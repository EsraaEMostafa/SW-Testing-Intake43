
HMI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000027b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000116  00800060  000027b2  00002846  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800176  00800176  0000295c  2**0
                  ALLOC
  3 .stab         0000234c  00000000  00000000  0000295c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fe0  00000000  00000000  00004ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005c88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005f38  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007b81  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000981c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000997c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009c09  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a3d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 31 11 	jmp	0x2262	; 0x2262 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 64 11 	jmp	0x22c8	; 0x22c8 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 eb       	ldi	r30, 0xB2	; 178
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 37       	cpi	r26, 0x7D	; 125
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <main>
      8a:	0c 94 d7 13 	jmp	0x27ae	; 0x27ae <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 5b 13 	jmp	0x26b6	; 0x26b6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e6       	ldi	r26, 0x65	; 101
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 77 13 	jmp	0x26ee	; 0x26ee <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 67 13 	jmp	0x26ce	; 0x26ce <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 83 13 	jmp	0x2706	; 0x2706 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 67 13 	jmp	0x26ce	; 0x26ce <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 83 13 	jmp	0x2706	; 0x2706 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 5b 13 	jmp	0x26b6	; 0x26b6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	85 e6       	ldi	r24, 0x65	; 101
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 77 13 	jmp	0x26ee	; 0x26ee <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 67 13 	jmp	0x26ce	; 0x26ce <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 83 13 	jmp	0x2706	; 0x2706 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 67 13 	jmp	0x26ce	; 0x26ce <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 83 13 	jmp	0x2706	; 0x2706 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 67 13 	jmp	0x26ce	; 0x26ce <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 83 13 	jmp	0x2706	; 0x2706 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 6b 13 	jmp	0x26d6	; 0x26d6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 87 13 	jmp	0x270e	; 0x270e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <sendReceive>:
uint8 g_ovfSec = 0;
//uint16 g_ctcSec = 0;

/* function to get the password from keypad and send it to the second MICRO*/
void sendReceive (void)
{
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	68 97       	sbiw	r28, 0x18	; 24
     b54:	0f b6       	in	r0, 0x3f	; 63
     b56:	f8 94       	cli
     b58:	de bf       	out	0x3e, r29	; 62
     b5a:	0f be       	out	0x3f, r0	; 63
     b5c:	cd bf       	out	0x3d, r28	; 61
		for (i=0;i<NUMBER;i++)
		{
			UART_sendByte(pass [i]);
		}
	}
}
     b5e:	2d b7       	in	r18, 0x3d	; 61
     b60:	3e b7       	in	r19, 0x3e	; 62
     b62:	38 8f       	std	Y+24, r19	; 0x18
     b64:	2f 8b       	std	Y+23, r18	; 0x17
uint8 g_ovfSec = 0;
//uint16 g_ctcSec = 0;

/* function to get the password from keypad and send it to the second MICRO*/
void sendReceive (void)
{
     b66:	8d b7       	in	r24, 0x3d	; 61
     b68:	9e b7       	in	r25, 0x3e	; 62
     b6a:	9c 8b       	std	Y+20, r25	; 0x14
     b6c:	8b 8b       	std	Y+19, r24	; 0x13
	/* local variables */
	uint8 i , enter;
	/*array to store the pass*/
	uint8 pass [i] ;
     b6e:	88 89       	ldd	r24, Y+16	; 0x10
     b70:	88 2f       	mov	r24, r24
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	2d b7       	in	r18, 0x3d	; 61
     b76:	3e b7       	in	r19, 0x3e	; 62
     b78:	28 1b       	sub	r18, r24
     b7a:	39 0b       	sbc	r19, r25
     b7c:	0f b6       	in	r0, 0x3f	; 63
     b7e:	f8 94       	cli
     b80:	3e bf       	out	0x3e, r19	; 62
     b82:	0f be       	out	0x3f, r0	; 63
     b84:	2d bf       	out	0x3d, r18	; 61
     b86:	8d b7       	in	r24, 0x3d	; 61
     b88:	9e b7       	in	r25, 0x3e	; 62
     b8a:	01 96       	adiw	r24, 0x01	; 1
     b8c:	9e 8b       	std	Y+22, r25	; 0x16
     b8e:	8d 8b       	std	Y+21, r24	; 0x15
     b90:	8d 89       	ldd	r24, Y+21	; 0x15
     b92:	9e 89       	ldd	r25, Y+22	; 0x16
     b94:	00 96       	adiw	r24, 0x00	; 0
     b96:	9e 8b       	std	Y+22, r25	; 0x16
     b98:	8d 8b       	std	Y+21, r24	; 0x15
     b9a:	2d 89       	ldd	r18, Y+21	; 0x15
     b9c:	3e 89       	ldd	r19, Y+22	; 0x16
     b9e:	3a 8b       	std	Y+18, r19	; 0x12
     ba0:	29 8b       	std	Y+17, r18	; 0x11
	/* for to get the pass from the keypad*/
	for (i=0;i<NUMBER;i++)
     ba2:	18 8a       	std	Y+16, r1	; 0x10
     ba4:	88 c0       	rjmp	.+272    	; 0xcb6 <sendReceive+0x170>
	{
		pass [i]=KeyPad_getPressedKey();
     ba6:	88 89       	ldd	r24, Y+16	; 0x10
     ba8:	08 2f       	mov	r16, r24
     baa:	10 e0       	ldi	r17, 0x00	; 0
     bac:	0e 94 6f 0b 	call	0x16de	; 0x16de <KeyPad_getPressedKey>
     bb0:	28 2f       	mov	r18, r24
     bb2:	89 89       	ldd	r24, Y+17	; 0x11
     bb4:	9a 89       	ldd	r25, Y+18	; 0x12
     bb6:	fc 01       	movw	r30, r24
     bb8:	e0 0f       	add	r30, r16
     bba:	f1 1f       	adc	r31, r17
     bbc:	20 83       	st	Z, r18
		/*display  * for each number */
		LCD_displayStringRowColumn(1,i,"*");
     bbe:	20 e6       	ldi	r18, 0x60	; 96
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	68 89       	ldd	r22, Y+16	; 0x10
     bc6:	a9 01       	movw	r20, r18
     bc8:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <LCD_displayStringRowColumn>
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	a8 ec       	ldi	r26, 0xC8	; 200
     bd2:	b2 e4       	ldi	r27, 0x42	; 66
     bd4:	8b 87       	std	Y+11, r24	; 0x0b
     bd6:	9c 87       	std	Y+12, r25	; 0x0c
     bd8:	ad 87       	std	Y+13, r26	; 0x0d
     bda:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bdc:	6b 85       	ldd	r22, Y+11	; 0x0b
     bde:	7c 85       	ldd	r23, Y+12	; 0x0c
     be0:	8d 85       	ldd	r24, Y+13	; 0x0d
     be2:	9e 85       	ldd	r25, Y+14	; 0x0e
     be4:	20 e0       	ldi	r18, 0x00	; 0
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	4a ef       	ldi	r20, 0xFA	; 250
     bea:	54 e4       	ldi	r21, 0x44	; 68
     bec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bf0:	dc 01       	movw	r26, r24
     bf2:	cb 01       	movw	r24, r22
     bf4:	8f 83       	std	Y+7, r24	; 0x07
     bf6:	98 87       	std	Y+8, r25	; 0x08
     bf8:	a9 87       	std	Y+9, r26	; 0x09
     bfa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bfc:	6f 81       	ldd	r22, Y+7	; 0x07
     bfe:	78 85       	ldd	r23, Y+8	; 0x08
     c00:	89 85       	ldd	r24, Y+9	; 0x09
     c02:	9a 85       	ldd	r25, Y+10	; 0x0a
     c04:	20 e0       	ldi	r18, 0x00	; 0
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	40 e8       	ldi	r20, 0x80	; 128
     c0a:	5f e3       	ldi	r21, 0x3F	; 63
     c0c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c10:	88 23       	and	r24, r24
     c12:	2c f4       	brge	.+10     	; 0xc1e <sendReceive+0xd8>
		__ticks = 1;
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	9e 83       	std	Y+6, r25	; 0x06
     c1a:	8d 83       	std	Y+5, r24	; 0x05
     c1c:	3f c0       	rjmp	.+126    	; 0xc9c <sendReceive+0x156>
	else if (__tmp > 65535)
     c1e:	6f 81       	ldd	r22, Y+7	; 0x07
     c20:	78 85       	ldd	r23, Y+8	; 0x08
     c22:	89 85       	ldd	r24, Y+9	; 0x09
     c24:	9a 85       	ldd	r25, Y+10	; 0x0a
     c26:	20 e0       	ldi	r18, 0x00	; 0
     c28:	3f ef       	ldi	r19, 0xFF	; 255
     c2a:	4f e7       	ldi	r20, 0x7F	; 127
     c2c:	57 e4       	ldi	r21, 0x47	; 71
     c2e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c32:	18 16       	cp	r1, r24
     c34:	4c f5       	brge	.+82     	; 0xc88 <sendReceive+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c36:	6b 85       	ldd	r22, Y+11	; 0x0b
     c38:	7c 85       	ldd	r23, Y+12	; 0x0c
     c3a:	8d 85       	ldd	r24, Y+13	; 0x0d
     c3c:	9e 85       	ldd	r25, Y+14	; 0x0e
     c3e:	20 e0       	ldi	r18, 0x00	; 0
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	40 e2       	ldi	r20, 0x20	; 32
     c44:	51 e4       	ldi	r21, 0x41	; 65
     c46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c4a:	dc 01       	movw	r26, r24
     c4c:	cb 01       	movw	r24, r22
     c4e:	bc 01       	movw	r22, r24
     c50:	cd 01       	movw	r24, r26
     c52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c56:	dc 01       	movw	r26, r24
     c58:	cb 01       	movw	r24, r22
     c5a:	9e 83       	std	Y+6, r25	; 0x06
     c5c:	8d 83       	std	Y+5, r24	; 0x05
     c5e:	0f c0       	rjmp	.+30     	; 0xc7e <sendReceive+0x138>
     c60:	88 ec       	ldi	r24, 0xC8	; 200
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	9c 83       	std	Y+4, r25	; 0x04
     c66:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c68:	8b 81       	ldd	r24, Y+3	; 0x03
     c6a:	9c 81       	ldd	r25, Y+4	; 0x04
     c6c:	01 97       	sbiw	r24, 0x01	; 1
     c6e:	f1 f7       	brne	.-4      	; 0xc6c <sendReceive+0x126>
     c70:	9c 83       	std	Y+4, r25	; 0x04
     c72:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c74:	8d 81       	ldd	r24, Y+5	; 0x05
     c76:	9e 81       	ldd	r25, Y+6	; 0x06
     c78:	01 97       	sbiw	r24, 0x01	; 1
     c7a:	9e 83       	std	Y+6, r25	; 0x06
     c7c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c7e:	8d 81       	ldd	r24, Y+5	; 0x05
     c80:	9e 81       	ldd	r25, Y+6	; 0x06
     c82:	00 97       	sbiw	r24, 0x00	; 0
     c84:	69 f7       	brne	.-38     	; 0xc60 <sendReceive+0x11a>
     c86:	14 c0       	rjmp	.+40     	; 0xcb0 <sendReceive+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c88:	6f 81       	ldd	r22, Y+7	; 0x07
     c8a:	78 85       	ldd	r23, Y+8	; 0x08
     c8c:	89 85       	ldd	r24, Y+9	; 0x09
     c8e:	9a 85       	ldd	r25, Y+10	; 0x0a
     c90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c94:	dc 01       	movw	r26, r24
     c96:	cb 01       	movw	r24, r22
     c98:	9e 83       	std	Y+6, r25	; 0x06
     c9a:	8d 83       	std	Y+5, r24	; 0x05
     c9c:	8d 81       	ldd	r24, Y+5	; 0x05
     c9e:	9e 81       	ldd	r25, Y+6	; 0x06
     ca0:	9a 83       	std	Y+2, r25	; 0x02
     ca2:	89 83       	std	Y+1, r24	; 0x01
     ca4:	89 81       	ldd	r24, Y+1	; 0x01
     ca6:	9a 81       	ldd	r25, Y+2	; 0x02
     ca8:	01 97       	sbiw	r24, 0x01	; 1
     caa:	f1 f7       	brne	.-4      	; 0xca8 <sendReceive+0x162>
     cac:	9a 83       	std	Y+2, r25	; 0x02
     cae:	89 83       	std	Y+1, r24	; 0x01
	/* local variables */
	uint8 i , enter;
	/*array to store the pass*/
	uint8 pass [i] ;
	/* for to get the pass from the keypad*/
	for (i=0;i<NUMBER;i++)
     cb0:	88 89       	ldd	r24, Y+16	; 0x10
     cb2:	8f 5f       	subi	r24, 0xFF	; 255
     cb4:	88 8b       	std	Y+16, r24	; 0x10
     cb6:	88 89       	ldd	r24, Y+16	; 0x10
     cb8:	85 30       	cpi	r24, 0x05	; 5
     cba:	08 f4       	brcc	.+2      	; 0xcbe <sendReceive+0x178>
     cbc:	74 cf       	rjmp	.-280    	; 0xba6 <sendReceive+0x60>
		/*display  * for each number */
		LCD_displayStringRowColumn(1,i,"*");
		_delay_ms (100);
	}
	/* get enter to continue */
	enter = KeyPad_getPressedKey();
     cbe:	0e 94 6f 0b 	call	0x16de	; 0x16de <KeyPad_getPressedKey>
     cc2:	8f 87       	std	Y+15, r24	; 0x0f
     cc4:	03 c0       	rjmp	.+6      	; 0xccc <sendReceive+0x186>
	while (enter != ENTER)
	{
		enter = KeyPad_getPressedKey();
     cc6:	0e 94 6f 0b 	call	0x16de	; 0x16de <KeyPad_getPressedKey>
     cca:	8f 87       	std	Y+15, r24	; 0x0f
		LCD_displayStringRowColumn(1,i,"*");
		_delay_ms (100);
	}
	/* get enter to continue */
	enter = KeyPad_getPressedKey();
	while (enter != ENTER)
     ccc:	8f 85       	ldd	r24, Y+15	; 0x0f
     cce:	8d 30       	cpi	r24, 0x0D	; 13
     cd0:	d1 f7       	brne	.-12     	; 0xcc6 <sendReceive+0x180>
	{
		enter = KeyPad_getPressedKey();
	}
	if (enter == ENTER)
     cd2:	8f 85       	ldd	r24, Y+15	; 0x0f
     cd4:	8d 30       	cpi	r24, 0x0D	; 13
     cd6:	99 f4       	brne	.+38     	; 0xcfe <sendReceive+0x1b8>
	{
		/* send the pass to the second MICRO*/
		for (i=0;i<NUMBER;i++)
     cd8:	18 8a       	std	Y+16, r1	; 0x10
     cda:	0e c0       	rjmp	.+28     	; 0xcf8 <sendReceive+0x1b2>
		{
			UART_sendByte(pass [i]);
     cdc:	88 89       	ldd	r24, Y+16	; 0x10
     cde:	28 2f       	mov	r18, r24
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	89 89       	ldd	r24, Y+17	; 0x11
     ce4:	9a 89       	ldd	r25, Y+18	; 0x12
     ce6:	fc 01       	movw	r30, r24
     ce8:	e2 0f       	add	r30, r18
     cea:	f3 1f       	adc	r31, r19
     cec:	80 81       	ld	r24, Z
     cee:	0e 94 a7 12 	call	0x254e	; 0x254e <UART_sendByte>
		enter = KeyPad_getPressedKey();
	}
	if (enter == ENTER)
	{
		/* send the pass to the second MICRO*/
		for (i=0;i<NUMBER;i++)
     cf2:	88 89       	ldd	r24, Y+16	; 0x10
     cf4:	8f 5f       	subi	r24, 0xFF	; 255
     cf6:	88 8b       	std	Y+16, r24	; 0x10
     cf8:	88 89       	ldd	r24, Y+16	; 0x10
     cfa:	85 30       	cpi	r24, 0x05	; 5
     cfc:	78 f3       	brcs	.-34     	; 0xcdc <sendReceive+0x196>
     cfe:	8b 89       	ldd	r24, Y+19	; 0x13
     d00:	9c 89       	ldd	r25, Y+20	; 0x14
     d02:	0f b6       	in	r0, 0x3f	; 63
     d04:	f8 94       	cli
     d06:	9e bf       	out	0x3e, r25	; 62
     d08:	0f be       	out	0x3f, r0	; 63
     d0a:	8d bf       	out	0x3d, r24	; 61
		{
			UART_sendByte(pass [i]);
		}
	}
}
     d0c:	2f 89       	ldd	r18, Y+23	; 0x17
     d0e:	38 8d       	ldd	r19, Y+24	; 0x18
     d10:	0f b6       	in	r0, 0x3f	; 63
     d12:	f8 94       	cli
     d14:	3e bf       	out	0x3e, r19	; 62
     d16:	0f be       	out	0x3f, r0	; 63
     d18:	2d bf       	out	0x3d, r18	; 61
     d1a:	68 96       	adiw	r28, 0x18	; 24
     d1c:	0f b6       	in	r0, 0x3f	; 63
     d1e:	f8 94       	cli
     d20:	de bf       	out	0x3e, r29	; 62
     d22:	0f be       	out	0x3f, r0	; 63
     d24:	cd bf       	out	0x3d, r28	; 61
     d26:	cf 91       	pop	r28
     d28:	df 91       	pop	r29
     d2a:	1f 91       	pop	r17
     d2c:	0f 91       	pop	r16
     d2e:	08 95       	ret

00000d30 <App_program>:
/* call back function for normal mode*/
void App_program (void){
     d30:	df 93       	push	r29
     d32:	cf 93       	push	r28
     d34:	cd b7       	in	r28, 0x3d	; 61
     d36:	de b7       	in	r29, 0x3e	; 62
	/*g_ovfTick increase every call */
	g_ovfTick ++ ;
     d38:	80 91 76 01 	lds	r24, 0x0176
     d3c:	8f 5f       	subi	r24, 0xFF	; 255
     d3e:	80 93 76 01 	sts	0x0176, r24
	if (g_ovfTick  == NUMBER_OF_OVERFLOWS_PER_SECOND)
     d42:	80 91 76 01 	lds	r24, 0x0176
     d46:	80 32       	cpi	r24, 0x20	; 32
     d48:	39 f4       	brne	.+14     	; 0xd58 <App_program+0x28>
	{
		g_ovfSec ++ ;
     d4a:	80 91 77 01 	lds	r24, 0x0177
     d4e:	8f 5f       	subi	r24, 0xFF	; 255
     d50:	80 93 77 01 	sts	0x0177, r24
		g_ovfTick = 0 ;
     d54:	10 92 76 01 	sts	0x0176, r1
	}
}
     d58:	cf 91       	pop	r28
     d5a:	df 91       	pop	r29
     d5c:	08 95       	ret

00000d5e <tryAgain>:
}
*/
uint8 g_unmatch ;
/* function if the pass unmatched 3 times*/
void tryAgain (void)
{
     d5e:	df 93       	push	r29
     d60:	cf 93       	push	r28
     d62:	cd b7       	in	r28, 0x3d	; 61
     d64:	de b7       	in	r29, 0x3e	; 62
	/* static local variable to count*/
	static uint8 block = 1 ;
	g_unmatch = UNMATCH ; // initial value
     d66:	10 92 7c 01 	sts	0x017C, r1
     d6a:	11 c0       	rjmp	.+34     	; 0xd8e <tryAgain+0x30>
	/* to get the pass 2 times if still unmatched  */
	while (( block < BLOCK)&& (g_unmatch == UNMATCH))
	{
		/*increase the block*/
		block ++ ;
     d6c:	80 91 6d 01 	lds	r24, 0x016D
     d70:	8f 5f       	subi	r24, 0xFF	; 255
     d72:	80 93 6d 01 	sts	0x016D, r24
		LCD_clearScreen();
     d76:	0e 94 27 11 	call	0x224e	; 0x224e <LCD_clearScreen>
		/*display string on LCD*/
		LCD_displayString("please try again !");
     d7a:	82 e6       	ldi	r24, 0x62	; 98
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	0e 94 80 10 	call	0x2100	; 0x2100 <LCD_displayString>
		/*get the pass again*/
		sendReceive ();
     d82:	0e 94 a3 05 	call	0xb46	; 0xb46 <sendReceive>
		/*receive MATCH or UNMATCH to continue */
		g_unmatch = UART_recieveByte();
     d86:	0e 94 be 12 	call	0x257c	; 0x257c <UART_recieveByte>
     d8a:	80 93 7c 01 	sts	0x017C, r24
{
	/* static local variable to count*/
	static uint8 block = 1 ;
	g_unmatch = UNMATCH ; // initial value
	/* to get the pass 2 times if still unmatched  */
	while (( block < BLOCK)&& (g_unmatch == UNMATCH))
     d8e:	80 91 6d 01 	lds	r24, 0x016D
     d92:	83 30       	cpi	r24, 0x03	; 3
     d94:	20 f4       	brcc	.+8      	; 0xd9e <tryAgain+0x40>
     d96:	80 91 7c 01 	lds	r24, 0x017C
     d9a:	88 23       	and	r24, r24
     d9c:	39 f3       	breq	.-50     	; 0xd6c <tryAgain+0xe>
		sendReceive ();
		/*receive MATCH or UNMATCH to continue */
		g_unmatch = UART_recieveByte();
	}
	/*the user enter the pass 3 times wrong*/
	if (block == BLOCK)
     d9e:	80 91 6d 01 	lds	r24, 0x016D
     da2:	83 30       	cpi	r24, 0x03	; 3
     da4:	61 f4       	brne	.+24     	; 0xdbe <tryAgain+0x60>
	{
		/*display system locked for a minute on LCD */
		LCD_clearScreen();
     da6:	0e 94 27 11 	call	0x224e	; 0x224e <LCD_clearScreen>
		LCD_displayString("system locked !");
     daa:	85 e7       	ldi	r24, 0x75	; 117
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	0e 94 80 10 	call	0x2100	; 0x2100 <LCD_displayString>
		g_ovfSec = 0;
     db2:	10 92 77 01 	sts	0x0177, r1
	    while(g_ovfSec < MIN) ;
     db6:	80 91 77 01 	lds	r24, 0x0177
     dba:	8c 33       	cpi	r24, 0x3C	; 60
     dbc:	e0 f3       	brcs	.-8      	; 0xdb6 <tryAgain+0x58>
	}
	/* block back to zero*/
	block = 0 ;
     dbe:	10 92 6d 01 	sts	0x016D, r1
}
     dc2:	cf 91       	pop	r28
     dc4:	df 91       	pop	r29
     dc6:	08 95       	ret

00000dc8 <main>:

int main ()
{
     dc8:	0f 93       	push	r16
     dca:	1f 93       	push	r17
     dcc:	df 93       	push	r29
     dce:	cf 93       	push	r28
     dd0:	cd b7       	in	r28, 0x3d	; 61
     dd2:	de b7       	in	r29, 0x3e	; 62
     dd4:	c8 56       	subi	r28, 0x68	; 104
     dd6:	d0 40       	sbci	r29, 0x00	; 0
     dd8:	0f b6       	in	r0, 0x3f	; 63
     dda:	f8 94       	cli
     ddc:	de bf       	out	0x3e, r29	; 62
     dde:	0f be       	out	0x3f, r0	; 63
     de0:	cd bf       	out	0x3d, r28	; 61
	/* Create configuration structure for timer driver */
	Timer_ConfigType Timer_Config = {NORMAL,0,CLOCK_1024};
     de2:	fe 01       	movw	r30, r28
     de4:	e7 5a       	subi	r30, 0xA7	; 167
     de6:	ff 4f       	sbci	r31, 0xFF	; 255
     de8:	10 82       	st	Z, r1
     dea:	11 82       	std	Z+1, r1	; 0x01
     dec:	12 82       	std	Z+2, r1	; 0x02
     dee:	13 82       	std	Z+3, r1	; 0x03
     df0:	fe 01       	movw	r30, r28
     df2:	e7 5a       	subi	r30, 0xA7	; 167
     df4:	ff 4f       	sbci	r31, 0xFF	; 255
     df6:	85 e0       	ldi	r24, 0x05	; 5
     df8:	82 83       	std	Z+2, r24	; 0x02
	/* Set the Call back function pointer in the timer driver */
	Ovf_setCallBack(App_program);
     dfa:	88 e9       	ldi	r24, 0x98	; 152
     dfc:	96 e0       	ldi	r25, 0x06	; 6
     dfe:	0e 94 ed 11 	call	0x23da	; 0x23da <Ovf_setCallBack>
	/* Create configuration structure for UART driver */
	Uart_ConfigType Uart_Config = {BIT_8,DISABLED,BIT_1,BAUD_9600};
     e02:	ce 01       	movw	r24, r28
     e04:	83 5a       	subi	r24, 0xA3	; 163
     e06:	9f 4f       	sbci	r25, 0xFF	; 255
     e08:	a6 96       	adiw	r28, 0x26	; 38
     e0a:	9f af       	std	Y+63, r25	; 0x3f
     e0c:	8e af       	std	Y+62, r24	; 0x3e
     e0e:	a6 97       	sbiw	r28, 0x26	; 38
     e10:	8e e6       	ldi	r24, 0x6E	; 110
     e12:	91 e0       	ldi	r25, 0x01	; 1
     e14:	a8 96       	adiw	r28, 0x28	; 40
     e16:	9f af       	std	Y+63, r25	; 0x3f
     e18:	8e af       	std	Y+62, r24	; 0x3e
     e1a:	a8 97       	sbiw	r28, 0x28	; 40
     e1c:	97 e0       	ldi	r25, 0x07	; 7
     e1e:	a9 96       	adiw	r28, 0x29	; 41
     e20:	9f af       	std	Y+63, r25	; 0x3f
     e22:	a9 97       	sbiw	r28, 0x29	; 41
     e24:	a8 96       	adiw	r28, 0x28	; 40
     e26:	ee ad       	ldd	r30, Y+62	; 0x3e
     e28:	ff ad       	ldd	r31, Y+63	; 0x3f
     e2a:	a8 97       	sbiw	r28, 0x28	; 40
     e2c:	00 80       	ld	r0, Z
     e2e:	a8 96       	adiw	r28, 0x28	; 40
     e30:	8e ad       	ldd	r24, Y+62	; 0x3e
     e32:	9f ad       	ldd	r25, Y+63	; 0x3f
     e34:	a8 97       	sbiw	r28, 0x28	; 40
     e36:	01 96       	adiw	r24, 0x01	; 1
     e38:	a8 96       	adiw	r28, 0x28	; 40
     e3a:	9f af       	std	Y+63, r25	; 0x3f
     e3c:	8e af       	std	Y+62, r24	; 0x3e
     e3e:	a8 97       	sbiw	r28, 0x28	; 40
     e40:	a6 96       	adiw	r28, 0x26	; 38
     e42:	ee ad       	ldd	r30, Y+62	; 0x3e
     e44:	ff ad       	ldd	r31, Y+63	; 0x3f
     e46:	a6 97       	sbiw	r28, 0x26	; 38
     e48:	00 82       	st	Z, r0
     e4a:	a6 96       	adiw	r28, 0x26	; 38
     e4c:	8e ad       	ldd	r24, Y+62	; 0x3e
     e4e:	9f ad       	ldd	r25, Y+63	; 0x3f
     e50:	a6 97       	sbiw	r28, 0x26	; 38
     e52:	01 96       	adiw	r24, 0x01	; 1
     e54:	a6 96       	adiw	r28, 0x26	; 38
     e56:	9f af       	std	Y+63, r25	; 0x3f
     e58:	8e af       	std	Y+62, r24	; 0x3e
     e5a:	a6 97       	sbiw	r28, 0x26	; 38
     e5c:	a9 96       	adiw	r28, 0x29	; 41
     e5e:	9f ad       	ldd	r25, Y+63	; 0x3f
     e60:	a9 97       	sbiw	r28, 0x29	; 41
     e62:	91 50       	subi	r25, 0x01	; 1
     e64:	a9 96       	adiw	r28, 0x29	; 41
     e66:	9f af       	std	Y+63, r25	; 0x3f
     e68:	a9 97       	sbiw	r28, 0x29	; 41
     e6a:	a9 96       	adiw	r28, 0x29	; 41
     e6c:	ef ad       	ldd	r30, Y+63	; 0x3f
     e6e:	a9 97       	sbiw	r28, 0x29	; 41
     e70:	ee 23       	and	r30, r30
     e72:	c1 f6       	brne	.-80     	; 0xe24 <main+0x5c>
	/* Initialize the LCD , UART and timer driver */
	UART_init(&Uart_Config);
     e74:	ce 01       	movw	r24, r28
     e76:	83 5a       	subi	r24, 0xA3	; 163
     e78:	9f 4f       	sbci	r25, 0xFF	; 255
     e7a:	0e 94 11 12 	call	0x2422	; 0x2422 <UART_init>
	timer_init(&Timer_Config);
     e7e:	ce 01       	movw	r24, r28
     e80:	87 5a       	subi	r24, 0xA7	; 167
     e82:	9f 4f       	sbci	r25, 0xFF	; 255
     e84:	0e 94 97 11 	call	0x232e	; 0x232e <timer_init>
	LCD_init();
     e88:	0e 94 6d 0c 	call	0x18da	; 0x18da <LCD_init>
	/* Enable Global Interrupt I-Bit */
	SREG  |= (1<<7);
     e8c:	af e5       	ldi	r26, 0x5F	; 95
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	ef e5       	ldi	r30, 0x5F	; 95
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	80 68       	ori	r24, 0x80	; 128
     e98:	8c 93       	st	X, r24
    /*local variables*/
	uint8 match = 10 , option , change = 10 , open = 10  ;
     e9a:	fe 01       	movw	r30, r28
     e9c:	e8 5a       	subi	r30, 0xA8	; 168
     e9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ea0:	8a e0       	ldi	r24, 0x0A	; 10
     ea2:	80 83       	st	Z, r24
     ea4:	fe 01       	movw	r30, r28
     ea6:	ea 5a       	subi	r30, 0xAA	; 170
     ea8:	ff 4f       	sbci	r31, 0xFF	; 255
     eaa:	8a e0       	ldi	r24, 0x0A	; 10
     eac:	80 83       	st	Z, r24
     eae:	fe 01       	movw	r30, r28
     eb0:	eb 5a       	subi	r30, 0xAB	; 171
     eb2:	ff 4f       	sbci	r31, 0xFF	; 255
     eb4:	8a e0       	ldi	r24, 0x0A	; 10
     eb6:	80 83       	st	Z, r24
    /*display welcome message on LCD */
	LCD_displayStringRowColumn(0,4,"Door locker");
     eb8:	25 e8       	ldi	r18, 0x85	; 133
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	64 e0       	ldi	r22, 0x04	; 4
     ec0:	a9 01       	movw	r20, r18
     ec2:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,4,"welcome");
     ec6:	21 e9       	ldi	r18, 0x91	; 145
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	64 e0       	ldi	r22, 0x04	; 4
     ece:	a9 01       	movw	r20, r18
     ed0:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <LCD_displayStringRowColumn>
     ed4:	fe 01       	movw	r30, r28
     ed6:	ef 5a       	subi	r30, 0xAF	; 175
     ed8:	ff 4f       	sbci	r31, 0xFF	; 255
     eda:	80 e0       	ldi	r24, 0x00	; 0
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	a8 e4       	ldi	r26, 0x48	; 72
     ee0:	b3 e4       	ldi	r27, 0x43	; 67
     ee2:	80 83       	st	Z, r24
     ee4:	91 83       	std	Z+1, r25	; 0x01
     ee6:	a2 83       	std	Z+2, r26	; 0x02
     ee8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eea:	8e 01       	movw	r16, r28
     eec:	03 5b       	subi	r16, 0xB3	; 179
     eee:	1f 4f       	sbci	r17, 0xFF	; 255
     ef0:	fe 01       	movw	r30, r28
     ef2:	ef 5a       	subi	r30, 0xAF	; 175
     ef4:	ff 4f       	sbci	r31, 0xFF	; 255
     ef6:	60 81       	ld	r22, Z
     ef8:	71 81       	ldd	r23, Z+1	; 0x01
     efa:	82 81       	ldd	r24, Z+2	; 0x02
     efc:	93 81       	ldd	r25, Z+3	; 0x03
     efe:	20 e0       	ldi	r18, 0x00	; 0
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	4a ef       	ldi	r20, 0xFA	; 250
     f04:	54 e4       	ldi	r21, 0x44	; 68
     f06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f0a:	dc 01       	movw	r26, r24
     f0c:	cb 01       	movw	r24, r22
     f0e:	f8 01       	movw	r30, r16
     f10:	80 83       	st	Z, r24
     f12:	91 83       	std	Z+1, r25	; 0x01
     f14:	a2 83       	std	Z+2, r26	; 0x02
     f16:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f18:	fe 01       	movw	r30, r28
     f1a:	e3 5b       	subi	r30, 0xB3	; 179
     f1c:	ff 4f       	sbci	r31, 0xFF	; 255
     f1e:	60 81       	ld	r22, Z
     f20:	71 81       	ldd	r23, Z+1	; 0x01
     f22:	82 81       	ldd	r24, Z+2	; 0x02
     f24:	93 81       	ldd	r25, Z+3	; 0x03
     f26:	20 e0       	ldi	r18, 0x00	; 0
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	40 e8       	ldi	r20, 0x80	; 128
     f2c:	5f e3       	ldi	r21, 0x3F	; 63
     f2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f32:	88 23       	and	r24, r24
     f34:	44 f4       	brge	.+16     	; 0xf46 <main+0x17e>
		__ticks = 1;
     f36:	fe 01       	movw	r30, r28
     f38:	e5 5b       	subi	r30, 0xB5	; 181
     f3a:	ff 4f       	sbci	r31, 0xFF	; 255
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	91 83       	std	Z+1, r25	; 0x01
     f42:	80 83       	st	Z, r24
     f44:	64 c0       	rjmp	.+200    	; 0x100e <main+0x246>
	else if (__tmp > 65535)
     f46:	fe 01       	movw	r30, r28
     f48:	e3 5b       	subi	r30, 0xB3	; 179
     f4a:	ff 4f       	sbci	r31, 0xFF	; 255
     f4c:	60 81       	ld	r22, Z
     f4e:	71 81       	ldd	r23, Z+1	; 0x01
     f50:	82 81       	ldd	r24, Z+2	; 0x02
     f52:	93 81       	ldd	r25, Z+3	; 0x03
     f54:	20 e0       	ldi	r18, 0x00	; 0
     f56:	3f ef       	ldi	r19, 0xFF	; 255
     f58:	4f e7       	ldi	r20, 0x7F	; 127
     f5a:	57 e4       	ldi	r21, 0x47	; 71
     f5c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f60:	18 16       	cp	r1, r24
     f62:	0c f0       	brlt	.+2      	; 0xf66 <main+0x19e>
     f64:	43 c0       	rjmp	.+134    	; 0xfec <main+0x224>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f66:	fe 01       	movw	r30, r28
     f68:	ef 5a       	subi	r30, 0xAF	; 175
     f6a:	ff 4f       	sbci	r31, 0xFF	; 255
     f6c:	60 81       	ld	r22, Z
     f6e:	71 81       	ldd	r23, Z+1	; 0x01
     f70:	82 81       	ldd	r24, Z+2	; 0x02
     f72:	93 81       	ldd	r25, Z+3	; 0x03
     f74:	20 e0       	ldi	r18, 0x00	; 0
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	40 e2       	ldi	r20, 0x20	; 32
     f7a:	51 e4       	ldi	r21, 0x41	; 65
     f7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f80:	dc 01       	movw	r26, r24
     f82:	cb 01       	movw	r24, r22
     f84:	8e 01       	movw	r16, r28
     f86:	05 5b       	subi	r16, 0xB5	; 181
     f88:	1f 4f       	sbci	r17, 0xFF	; 255
     f8a:	bc 01       	movw	r22, r24
     f8c:	cd 01       	movw	r24, r26
     f8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f92:	dc 01       	movw	r26, r24
     f94:	cb 01       	movw	r24, r22
     f96:	f8 01       	movw	r30, r16
     f98:	91 83       	std	Z+1, r25	; 0x01
     f9a:	80 83       	st	Z, r24
     f9c:	1f c0       	rjmp	.+62     	; 0xfdc <main+0x214>
     f9e:	fe 01       	movw	r30, r28
     fa0:	e7 5b       	subi	r30, 0xB7	; 183
     fa2:	ff 4f       	sbci	r31, 0xFF	; 255
     fa4:	88 ec       	ldi	r24, 0xC8	; 200
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	91 83       	std	Z+1, r25	; 0x01
     faa:	80 83       	st	Z, r24
     fac:	fe 01       	movw	r30, r28
     fae:	e7 5b       	subi	r30, 0xB7	; 183
     fb0:	ff 4f       	sbci	r31, 0xFF	; 255
     fb2:	80 81       	ld	r24, Z
     fb4:	91 81       	ldd	r25, Z+1	; 0x01
     fb6:	01 97       	sbiw	r24, 0x01	; 1
     fb8:	f1 f7       	brne	.-4      	; 0xfb6 <main+0x1ee>
     fba:	fe 01       	movw	r30, r28
     fbc:	e7 5b       	subi	r30, 0xB7	; 183
     fbe:	ff 4f       	sbci	r31, 0xFF	; 255
     fc0:	91 83       	std	Z+1, r25	; 0x01
     fc2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fc4:	de 01       	movw	r26, r28
     fc6:	a5 5b       	subi	r26, 0xB5	; 181
     fc8:	bf 4f       	sbci	r27, 0xFF	; 255
     fca:	fe 01       	movw	r30, r28
     fcc:	e5 5b       	subi	r30, 0xB5	; 181
     fce:	ff 4f       	sbci	r31, 0xFF	; 255
     fd0:	80 81       	ld	r24, Z
     fd2:	91 81       	ldd	r25, Z+1	; 0x01
     fd4:	01 97       	sbiw	r24, 0x01	; 1
     fd6:	11 96       	adiw	r26, 0x01	; 1
     fd8:	9c 93       	st	X, r25
     fda:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fdc:	fe 01       	movw	r30, r28
     fde:	e5 5b       	subi	r30, 0xB5	; 181
     fe0:	ff 4f       	sbci	r31, 0xFF	; 255
     fe2:	80 81       	ld	r24, Z
     fe4:	91 81       	ldd	r25, Z+1	; 0x01
     fe6:	00 97       	sbiw	r24, 0x00	; 0
     fe8:	d1 f6       	brne	.-76     	; 0xf9e <main+0x1d6>
     fea:	28 c0       	rjmp	.+80     	; 0x103c <main+0x274>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fec:	8e 01       	movw	r16, r28
     fee:	05 5b       	subi	r16, 0xB5	; 181
     ff0:	1f 4f       	sbci	r17, 0xFF	; 255
     ff2:	fe 01       	movw	r30, r28
     ff4:	e3 5b       	subi	r30, 0xB3	; 179
     ff6:	ff 4f       	sbci	r31, 0xFF	; 255
     ff8:	60 81       	ld	r22, Z
     ffa:	71 81       	ldd	r23, Z+1	; 0x01
     ffc:	82 81       	ldd	r24, Z+2	; 0x02
     ffe:	93 81       	ldd	r25, Z+3	; 0x03
    1000:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1004:	dc 01       	movw	r26, r24
    1006:	cb 01       	movw	r24, r22
    1008:	f8 01       	movw	r30, r16
    100a:	91 83       	std	Z+1, r25	; 0x01
    100c:	80 83       	st	Z, r24
    100e:	de 01       	movw	r26, r28
    1010:	a9 5b       	subi	r26, 0xB9	; 185
    1012:	bf 4f       	sbci	r27, 0xFF	; 255
    1014:	fe 01       	movw	r30, r28
    1016:	e5 5b       	subi	r30, 0xB5	; 181
    1018:	ff 4f       	sbci	r31, 0xFF	; 255
    101a:	80 81       	ld	r24, Z
    101c:	91 81       	ldd	r25, Z+1	; 0x01
    101e:	11 96       	adiw	r26, 0x01	; 1
    1020:	9c 93       	st	X, r25
    1022:	8e 93       	st	-X, r24
    1024:	fe 01       	movw	r30, r28
    1026:	e9 5b       	subi	r30, 0xB9	; 185
    1028:	ff 4f       	sbci	r31, 0xFF	; 255
    102a:	80 81       	ld	r24, Z
    102c:	91 81       	ldd	r25, Z+1	; 0x01
    102e:	01 97       	sbiw	r24, 0x01	; 1
    1030:	f1 f7       	brne	.-4      	; 0x102e <main+0x266>
    1032:	fe 01       	movw	r30, r28
    1034:	e9 5b       	subi	r30, 0xB9	; 185
    1036:	ff 4f       	sbci	r31, 0xFF	; 255
    1038:	91 83       	std	Z+1, r25	; 0x01
    103a:	80 83       	st	Z, r24
	_delay_ms (200);

    while (1)
    {
    	/* step 2 : if two pass are matched*/
    	if ((match == MATCH))
    103c:	fe 01       	movw	r30, r28
    103e:	e8 5a       	subi	r30, 0xA8	; 168
    1040:	ff 4f       	sbci	r31, 0xFF	; 255
    1042:	80 81       	ld	r24, Z
    1044:	81 30       	cpi	r24, 0x01	; 1
    1046:	09 f0       	breq	.+2      	; 0x104a <main+0x282>
    1048:	25 c2       	rjmp	.+1098   	; 0x1494 <main+0x6cc>
		{
		   LCD_clearScreen();
    104a:	0e 94 27 11 	call	0x224e	; 0x224e <LCD_clearScreen>
		   LCD_displayString("+ : Change password");
    104e:	89 e9       	ldi	r24, 0x99	; 153
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	0e 94 80 10 	call	0x2100	; 0x2100 <LCD_displayString>
		   LCD_displayStringRowColumn(1,0,"- : Open Door");
    1056:	2d ea       	ldi	r18, 0xAD	; 173
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	60 e0       	ldi	r22, 0x00	; 0
    105e:	a9 01       	movw	r20, r18
    1060:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <LCD_displayStringRowColumn>
		   /*get  + or - from the user */
		   option = KeyPad_getPressedKey() ;
    1064:	0e 94 6f 0b 	call	0x16de	; 0x16de <KeyPad_getPressedKey>
    1068:	fe 01       	movw	r30, r28
    106a:	e9 5a       	subi	r30, 0xA9	; 169
    106c:	ff 4f       	sbci	r31, 0xFF	; 255
    106e:	80 83       	st	Z, r24
		   /*send + or - to second MICRO */
		   UART_sendByte(option);
    1070:	fe 01       	movw	r30, r28
    1072:	e9 5a       	subi	r30, 0xA9	; 169
    1074:	ff 4f       	sbci	r31, 0xFF	; 255
    1076:	80 81       	ld	r24, Z
    1078:	0e 94 a7 12 	call	0x254e	; 0x254e <UART_sendByte>
           /*if the user choose + */
	       if (option == PLUS )
    107c:	fe 01       	movw	r30, r28
    107e:	e9 5a       	subi	r30, 0xA9	; 169
    1080:	ff 4f       	sbci	r31, 0xFF	; 255
    1082:	80 81       	ld	r24, Z
    1084:	8b 32       	cpi	r24, 0x2B	; 43
    1086:	09 f0       	breq	.+2      	; 0x108a <main+0x2c2>
    1088:	23 c1       	rjmp	.+582    	; 0x12d0 <main+0x508>
	       {
		     LCD_clearScreen();
    108a:	0e 94 27 11 	call	0x224e	; 0x224e <LCD_clearScreen>
		     LCD_displayString("Please enter old password");
    108e:	8b eb       	ldi	r24, 0xBB	; 187
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	0e 94 80 10 	call	0x2100	; 0x2100 <LCD_displayString>
		     /*get the pass and send */
		     sendReceive ();
    1096:	0e 94 a3 05 	call	0xb46	; 0xb46 <sendReceive>
		     /*receive 0 or 1 if the pass unmatched or matched*/
		     change = UART_recieveByte();
    109a:	0e 94 be 12 	call	0x257c	; 0x257c <UART_recieveByte>
    109e:	fe 01       	movw	r30, r28
    10a0:	ea 5a       	subi	r30, 0xAA	; 170
    10a2:	ff 4f       	sbci	r31, 0xFF	; 255
    10a4:	80 83       	st	Z, r24
		     LCD_clearScreen();
    10a6:	0e 94 27 11 	call	0x224e	; 0x224e <LCD_clearScreen>
		     /*if  the pass is unmatched*/
		     if (change == UNMATCH)
    10aa:	fe 01       	movw	r30, r28
    10ac:	ea 5a       	subi	r30, 0xAA	; 170
    10ae:	ff 4f       	sbci	r31, 0xFF	; 255
    10b0:	80 81       	ld	r24, Z
    10b2:	88 23       	and	r24, r24
    10b4:	09 f0       	breq	.+2      	; 0x10b8 <main+0x2f0>
    10b6:	8f c0       	rjmp	.+286    	; 0x11d6 <main+0x40e>
	         {
			     LCD_displayString("unMatched");
    10b8:	85 ed       	ldi	r24, 0xD5	; 213
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	0e 94 80 10 	call	0x2100	; 0x2100 <LCD_displayString>
    10c0:	fe 01       	movw	r30, r28
    10c2:	ed 5b       	subi	r30, 0xBD	; 189
    10c4:	ff 4f       	sbci	r31, 0xFF	; 255
    10c6:	80 e0       	ldi	r24, 0x00	; 0
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	a8 e4       	ldi	r26, 0x48	; 72
    10cc:	b3 e4       	ldi	r27, 0x43	; 67
    10ce:	80 83       	st	Z, r24
    10d0:	91 83       	std	Z+1, r25	; 0x01
    10d2:	a2 83       	std	Z+2, r26	; 0x02
    10d4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10d6:	8e 01       	movw	r16, r28
    10d8:	01 5c       	subi	r16, 0xC1	; 193
    10da:	1f 4f       	sbci	r17, 0xFF	; 255
    10dc:	fe 01       	movw	r30, r28
    10de:	ed 5b       	subi	r30, 0xBD	; 189
    10e0:	ff 4f       	sbci	r31, 0xFF	; 255
    10e2:	60 81       	ld	r22, Z
    10e4:	71 81       	ldd	r23, Z+1	; 0x01
    10e6:	82 81       	ldd	r24, Z+2	; 0x02
    10e8:	93 81       	ldd	r25, Z+3	; 0x03
    10ea:	20 e0       	ldi	r18, 0x00	; 0
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	4a ef       	ldi	r20, 0xFA	; 250
    10f0:	54 e4       	ldi	r21, 0x44	; 68
    10f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10f6:	dc 01       	movw	r26, r24
    10f8:	cb 01       	movw	r24, r22
    10fa:	f8 01       	movw	r30, r16
    10fc:	80 83       	st	Z, r24
    10fe:	91 83       	std	Z+1, r25	; 0x01
    1100:	a2 83       	std	Z+2, r26	; 0x02
    1102:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1104:	fe 01       	movw	r30, r28
    1106:	ff 96       	adiw	r30, 0x3f	; 63
    1108:	60 81       	ld	r22, Z
    110a:	71 81       	ldd	r23, Z+1	; 0x01
    110c:	82 81       	ldd	r24, Z+2	; 0x02
    110e:	93 81       	ldd	r25, Z+3	; 0x03
    1110:	20 e0       	ldi	r18, 0x00	; 0
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	40 e8       	ldi	r20, 0x80	; 128
    1116:	5f e3       	ldi	r21, 0x3F	; 63
    1118:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    111c:	88 23       	and	r24, r24
    111e:	2c f4       	brge	.+10     	; 0x112a <main+0x362>
		__ticks = 1;
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	9e af       	std	Y+62, r25	; 0x3e
    1126:	8d af       	std	Y+61, r24	; 0x3d
    1128:	46 c0       	rjmp	.+140    	; 0x11b6 <main+0x3ee>
	else if (__tmp > 65535)
    112a:	fe 01       	movw	r30, r28
    112c:	ff 96       	adiw	r30, 0x3f	; 63
    112e:	60 81       	ld	r22, Z
    1130:	71 81       	ldd	r23, Z+1	; 0x01
    1132:	82 81       	ldd	r24, Z+2	; 0x02
    1134:	93 81       	ldd	r25, Z+3	; 0x03
    1136:	20 e0       	ldi	r18, 0x00	; 0
    1138:	3f ef       	ldi	r19, 0xFF	; 255
    113a:	4f e7       	ldi	r20, 0x7F	; 127
    113c:	57 e4       	ldi	r21, 0x47	; 71
    113e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1142:	18 16       	cp	r1, r24
    1144:	64 f5       	brge	.+88     	; 0x119e <main+0x3d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1146:	fe 01       	movw	r30, r28
    1148:	ed 5b       	subi	r30, 0xBD	; 189
    114a:	ff 4f       	sbci	r31, 0xFF	; 255
    114c:	60 81       	ld	r22, Z
    114e:	71 81       	ldd	r23, Z+1	; 0x01
    1150:	82 81       	ldd	r24, Z+2	; 0x02
    1152:	93 81       	ldd	r25, Z+3	; 0x03
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	40 e2       	ldi	r20, 0x20	; 32
    115a:	51 e4       	ldi	r21, 0x41	; 65
    115c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1160:	dc 01       	movw	r26, r24
    1162:	cb 01       	movw	r24, r22
    1164:	bc 01       	movw	r22, r24
    1166:	cd 01       	movw	r24, r26
    1168:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    116c:	dc 01       	movw	r26, r24
    116e:	cb 01       	movw	r24, r22
    1170:	9e af       	std	Y+62, r25	; 0x3e
    1172:	8d af       	std	Y+61, r24	; 0x3d
    1174:	0f c0       	rjmp	.+30     	; 0x1194 <main+0x3cc>
    1176:	88 ec       	ldi	r24, 0xC8	; 200
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	9c af       	std	Y+60, r25	; 0x3c
    117c:	8b af       	std	Y+59, r24	; 0x3b
    117e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1180:	9c ad       	ldd	r25, Y+60	; 0x3c
    1182:	01 97       	sbiw	r24, 0x01	; 1
    1184:	f1 f7       	brne	.-4      	; 0x1182 <main+0x3ba>
    1186:	9c af       	std	Y+60, r25	; 0x3c
    1188:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    118a:	8d ad       	ldd	r24, Y+61	; 0x3d
    118c:	9e ad       	ldd	r25, Y+62	; 0x3e
    118e:	01 97       	sbiw	r24, 0x01	; 1
    1190:	9e af       	std	Y+62, r25	; 0x3e
    1192:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1194:	8d ad       	ldd	r24, Y+61	; 0x3d
    1196:	9e ad       	ldd	r25, Y+62	; 0x3e
    1198:	00 97       	sbiw	r24, 0x00	; 0
    119a:	69 f7       	brne	.-38     	; 0x1176 <main+0x3ae>
    119c:	16 c0       	rjmp	.+44     	; 0x11ca <main+0x402>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    119e:	fe 01       	movw	r30, r28
    11a0:	ff 96       	adiw	r30, 0x3f	; 63
    11a2:	60 81       	ld	r22, Z
    11a4:	71 81       	ldd	r23, Z+1	; 0x01
    11a6:	82 81       	ldd	r24, Z+2	; 0x02
    11a8:	93 81       	ldd	r25, Z+3	; 0x03
    11aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ae:	dc 01       	movw	r26, r24
    11b0:	cb 01       	movw	r24, r22
    11b2:	9e af       	std	Y+62, r25	; 0x3e
    11b4:	8d af       	std	Y+61, r24	; 0x3d
    11b6:	8d ad       	ldd	r24, Y+61	; 0x3d
    11b8:	9e ad       	ldd	r25, Y+62	; 0x3e
    11ba:	9a af       	std	Y+58, r25	; 0x3a
    11bc:	89 af       	std	Y+57, r24	; 0x39
    11be:	89 ad       	ldd	r24, Y+57	; 0x39
    11c0:	9a ad       	ldd	r25, Y+58	; 0x3a
    11c2:	01 97       	sbiw	r24, 0x01	; 1
    11c4:	f1 f7       	brne	.-4      	; 0x11c2 <main+0x3fa>
    11c6:	9a af       	std	Y+58, r25	; 0x3a
    11c8:	89 af       	std	Y+57, r24	; 0x39
			     _delay_ms (200);
			     /*to go to step 2*/
			     match = MATCH ;
    11ca:	fe 01       	movw	r30, r28
    11cc:	e8 5a       	subi	r30, 0xA8	; 168
    11ce:	ff 4f       	sbci	r31, 0xFF	; 255
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	80 83       	st	Z, r24
    11d4:	33 cf       	rjmp	.-410    	; 0x103c <main+0x274>
			     continue ;
		     }
		     /*if  the pass is matched*/
		     else if (change == MATCH)
    11d6:	fe 01       	movw	r30, r28
    11d8:	ea 5a       	subi	r30, 0xAA	; 170
    11da:	ff 4f       	sbci	r31, 0xFF	; 255
    11dc:	80 81       	ld	r24, Z
    11de:	81 30       	cpi	r24, 0x01	; 1
    11e0:	09 f0       	breq	.+2      	; 0x11e4 <main+0x41c>
    11e2:	76 c0       	rjmp	.+236    	; 0x12d0 <main+0x508>
		     {
			     LCD_displayString("Matched");
    11e4:	8f ed       	ldi	r24, 0xDF	; 223
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	0e 94 80 10 	call	0x2100	; 0x2100 <LCD_displayString>
    11ec:	80 e0       	ldi	r24, 0x00	; 0
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	a8 e4       	ldi	r26, 0x48	; 72
    11f2:	b3 e4       	ldi	r27, 0x43	; 67
    11f4:	8d ab       	std	Y+53, r24	; 0x35
    11f6:	9e ab       	std	Y+54, r25	; 0x36
    11f8:	af ab       	std	Y+55, r26	; 0x37
    11fa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11fc:	6d a9       	ldd	r22, Y+53	; 0x35
    11fe:	7e a9       	ldd	r23, Y+54	; 0x36
    1200:	8f a9       	ldd	r24, Y+55	; 0x37
    1202:	98 ad       	ldd	r25, Y+56	; 0x38
    1204:	20 e0       	ldi	r18, 0x00	; 0
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	4a ef       	ldi	r20, 0xFA	; 250
    120a:	54 e4       	ldi	r21, 0x44	; 68
    120c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1210:	dc 01       	movw	r26, r24
    1212:	cb 01       	movw	r24, r22
    1214:	89 ab       	std	Y+49, r24	; 0x31
    1216:	9a ab       	std	Y+50, r25	; 0x32
    1218:	ab ab       	std	Y+51, r26	; 0x33
    121a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    121c:	69 a9       	ldd	r22, Y+49	; 0x31
    121e:	7a a9       	ldd	r23, Y+50	; 0x32
    1220:	8b a9       	ldd	r24, Y+51	; 0x33
    1222:	9c a9       	ldd	r25, Y+52	; 0x34
    1224:	20 e0       	ldi	r18, 0x00	; 0
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	40 e8       	ldi	r20, 0x80	; 128
    122a:	5f e3       	ldi	r21, 0x3F	; 63
    122c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1230:	88 23       	and	r24, r24
    1232:	2c f4       	brge	.+10     	; 0x123e <main+0x476>
		__ticks = 1;
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	98 ab       	std	Y+48, r25	; 0x30
    123a:	8f a7       	std	Y+47, r24	; 0x2f
    123c:	3f c0       	rjmp	.+126    	; 0x12bc <main+0x4f4>
	else if (__tmp > 65535)
    123e:	69 a9       	ldd	r22, Y+49	; 0x31
    1240:	7a a9       	ldd	r23, Y+50	; 0x32
    1242:	8b a9       	ldd	r24, Y+51	; 0x33
    1244:	9c a9       	ldd	r25, Y+52	; 0x34
    1246:	20 e0       	ldi	r18, 0x00	; 0
    1248:	3f ef       	ldi	r19, 0xFF	; 255
    124a:	4f e7       	ldi	r20, 0x7F	; 127
    124c:	57 e4       	ldi	r21, 0x47	; 71
    124e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1252:	18 16       	cp	r1, r24
    1254:	4c f5       	brge	.+82     	; 0x12a8 <main+0x4e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1256:	6d a9       	ldd	r22, Y+53	; 0x35
    1258:	7e a9       	ldd	r23, Y+54	; 0x36
    125a:	8f a9       	ldd	r24, Y+55	; 0x37
    125c:	98 ad       	ldd	r25, Y+56	; 0x38
    125e:	20 e0       	ldi	r18, 0x00	; 0
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	40 e2       	ldi	r20, 0x20	; 32
    1264:	51 e4       	ldi	r21, 0x41	; 65
    1266:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    126a:	dc 01       	movw	r26, r24
    126c:	cb 01       	movw	r24, r22
    126e:	bc 01       	movw	r22, r24
    1270:	cd 01       	movw	r24, r26
    1272:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1276:	dc 01       	movw	r26, r24
    1278:	cb 01       	movw	r24, r22
    127a:	98 ab       	std	Y+48, r25	; 0x30
    127c:	8f a7       	std	Y+47, r24	; 0x2f
    127e:	0f c0       	rjmp	.+30     	; 0x129e <main+0x4d6>
    1280:	88 ec       	ldi	r24, 0xC8	; 200
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	9e a7       	std	Y+46, r25	; 0x2e
    1286:	8d a7       	std	Y+45, r24	; 0x2d
    1288:	8d a5       	ldd	r24, Y+45	; 0x2d
    128a:	9e a5       	ldd	r25, Y+46	; 0x2e
    128c:	01 97       	sbiw	r24, 0x01	; 1
    128e:	f1 f7       	brne	.-4      	; 0x128c <main+0x4c4>
    1290:	9e a7       	std	Y+46, r25	; 0x2e
    1292:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1294:	8f a5       	ldd	r24, Y+47	; 0x2f
    1296:	98 a9       	ldd	r25, Y+48	; 0x30
    1298:	01 97       	sbiw	r24, 0x01	; 1
    129a:	98 ab       	std	Y+48, r25	; 0x30
    129c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    129e:	8f a5       	ldd	r24, Y+47	; 0x2f
    12a0:	98 a9       	ldd	r25, Y+48	; 0x30
    12a2:	00 97       	sbiw	r24, 0x00	; 0
    12a4:	69 f7       	brne	.-38     	; 0x1280 <main+0x4b8>
    12a6:	14 c0       	rjmp	.+40     	; 0x12d0 <main+0x508>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12a8:	69 a9       	ldd	r22, Y+49	; 0x31
    12aa:	7a a9       	ldd	r23, Y+50	; 0x32
    12ac:	8b a9       	ldd	r24, Y+51	; 0x33
    12ae:	9c a9       	ldd	r25, Y+52	; 0x34
    12b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12b4:	dc 01       	movw	r26, r24
    12b6:	cb 01       	movw	r24, r22
    12b8:	98 ab       	std	Y+48, r25	; 0x30
    12ba:	8f a7       	std	Y+47, r24	; 0x2f
    12bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    12be:	98 a9       	ldd	r25, Y+48	; 0x30
    12c0:	9c a7       	std	Y+44, r25	; 0x2c
    12c2:	8b a7       	std	Y+43, r24	; 0x2b
    12c4:	8b a5       	ldd	r24, Y+43	; 0x2b
    12c6:	9c a5       	ldd	r25, Y+44	; 0x2c
    12c8:	01 97       	sbiw	r24, 0x01	; 1
    12ca:	f1 f7       	brne	.-4      	; 0x12c8 <main+0x500>
    12cc:	9c a7       	std	Y+44, r25	; 0x2c
    12ce:	8b a7       	std	Y+43, r24	; 0x2b
			     _delay_ms (200);
		     }
		 }
	     /*if the user choose - */
	     if ((option == MINUS))
    12d0:	fe 01       	movw	r30, r28
    12d2:	e9 5a       	subi	r30, 0xA9	; 169
    12d4:	ff 4f       	sbci	r31, 0xFF	; 255
    12d6:	80 81       	ld	r24, Z
    12d8:	8d 32       	cpi	r24, 0x2D	; 45
    12da:	09 f0       	breq	.+2      	; 0x12de <main+0x516>
    12dc:	db c0       	rjmp	.+438    	; 0x1494 <main+0x6cc>
	     {
		   LCD_clearScreen();
    12de:	0e 94 27 11 	call	0x224e	; 0x224e <LCD_clearScreen>
		   LCD_displayString("Please enter the password");
    12e2:	87 ee       	ldi	r24, 0xE7	; 231
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	0e 94 80 10 	call	0x2100	; 0x2100 <LCD_displayString>
		   /*get the pass and send */
		   sendReceive ();
    12ea:	0e 94 a3 05 	call	0xb46	; 0xb46 <sendReceive>
		   /*receive 0 or 1 if the pass unmatched or matched*/
		   open = UART_recieveByte();
    12ee:	0e 94 be 12 	call	0x257c	; 0x257c <UART_recieveByte>
    12f2:	fe 01       	movw	r30, r28
    12f4:	eb 5a       	subi	r30, 0xAB	; 171
    12f6:	ff 4f       	sbci	r31, 0xFF	; 255
    12f8:	80 83       	st	Z, r24
		   LCD_clearScreen();
    12fa:	0e 94 27 11 	call	0x224e	; 0x224e <LCD_clearScreen>
		   /*if  the pass is matched*/
		   if (open == MATCH)
    12fe:	fe 01       	movw	r30, r28
    1300:	eb 5a       	subi	r30, 0xAB	; 171
    1302:	ff 4f       	sbci	r31, 0xFF	; 255
    1304:	80 81       	ld	r24, Z
    1306:	81 30       	cpi	r24, 0x01	; 1
    1308:	e1 f4       	brne	.+56     	; 0x1342 <main+0x57a>
		   {
			   /*display the massage for 18 seconds*/
			   LCD_displayString("Door is unlocking....");
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	91 e0       	ldi	r25, 0x01	; 1
    130e:	0e 94 80 10 	call	0x2100	; 0x2100 <LCD_displayString>
			   g_ovfSec = 0;
    1312:	10 92 77 01 	sts	0x0177, r1
			   while(g_ovfSec < DELAY+STOP)
    1316:	80 91 77 01 	lds	r24, 0x0177
    131a:	82 31       	cpi	r24, 0x12	; 18
    131c:	e0 f3       	brcs	.-8      	; 0x1316 <main+0x54e>
				   LCD_intgerToString(g_ovfSec);
				   LCD_displayStringRowColumn(1,0,"");
				   LCD_intgerToString(g_ovfTick);*/
			   }
			   /*display the massage for 15 seconds*/
			   g_ovfSec = 0;
    131e:	10 92 77 01 	sts	0x0177, r1
			   LCD_clearScreen();
    1322:	0e 94 27 11 	call	0x224e	; 0x224e <LCD_clearScreen>
			   LCD_displayString("Door is locking....");
    1326:	87 e1       	ldi	r24, 0x17	; 23
    1328:	91 e0       	ldi	r25, 0x01	; 1
    132a:	0e 94 80 10 	call	0x2100	; 0x2100 <LCD_displayString>
			   while(g_ovfSec < DELAY)
    132e:	80 91 77 01 	lds	r24, 0x0177
    1332:	8f 30       	cpi	r24, 0x0F	; 15
    1334:	e0 f3       	brcs	.-8      	; 0x132e <main+0x566>
				   LCD_displayStringRowColumn(1,0,"");
				   LCD_intgerToString(g_ovfTick);*/

			   }
			   /*to go to step 2*/
			   match = MATCH ;
    1336:	fe 01       	movw	r30, r28
    1338:	e8 5a       	subi	r30, 0xA8	; 168
    133a:	ff 4f       	sbci	r31, 0xFF	; 255
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	80 83       	st	Z, r24
    1340:	7d ce       	rjmp	.-774    	; 0x103c <main+0x274>
			   continue ;
		   }
		   /*if  the pass is unmatched*/
		   else if (open == UNMATCH)
    1342:	fe 01       	movw	r30, r28
    1344:	eb 5a       	subi	r30, 0xAB	; 171
    1346:	ff 4f       	sbci	r31, 0xFF	; 255
    1348:	80 81       	ld	r24, Z
    134a:	88 23       	and	r24, r24
    134c:	09 f0       	breq	.+2      	; 0x1350 <main+0x588>
    134e:	a2 c0       	rjmp	.+324    	; 0x1494 <main+0x6cc>
		   {
			   LCD_displayString("UnMatched");
    1350:	8b e2       	ldi	r24, 0x2B	; 43
    1352:	91 e0       	ldi	r25, 0x01	; 1
    1354:	0e 94 80 10 	call	0x2100	; 0x2100 <LCD_displayString>
    1358:	80 e0       	ldi	r24, 0x00	; 0
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	a8 ec       	ldi	r26, 0xC8	; 200
    135e:	b2 e4       	ldi	r27, 0x42	; 66
    1360:	8f a3       	std	Y+39, r24	; 0x27
    1362:	98 a7       	std	Y+40, r25	; 0x28
    1364:	a9 a7       	std	Y+41, r26	; 0x29
    1366:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1368:	6f a1       	ldd	r22, Y+39	; 0x27
    136a:	78 a5       	ldd	r23, Y+40	; 0x28
    136c:	89 a5       	ldd	r24, Y+41	; 0x29
    136e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1370:	20 e0       	ldi	r18, 0x00	; 0
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	4a ef       	ldi	r20, 0xFA	; 250
    1376:	54 e4       	ldi	r21, 0x44	; 68
    1378:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    137c:	dc 01       	movw	r26, r24
    137e:	cb 01       	movw	r24, r22
    1380:	8b a3       	std	Y+35, r24	; 0x23
    1382:	9c a3       	std	Y+36, r25	; 0x24
    1384:	ad a3       	std	Y+37, r26	; 0x25
    1386:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1388:	6b a1       	ldd	r22, Y+35	; 0x23
    138a:	7c a1       	ldd	r23, Y+36	; 0x24
    138c:	8d a1       	ldd	r24, Y+37	; 0x25
    138e:	9e a1       	ldd	r25, Y+38	; 0x26
    1390:	20 e0       	ldi	r18, 0x00	; 0
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	40 e8       	ldi	r20, 0x80	; 128
    1396:	5f e3       	ldi	r21, 0x3F	; 63
    1398:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    139c:	88 23       	and	r24, r24
    139e:	2c f4       	brge	.+10     	; 0x13aa <main+0x5e2>
		__ticks = 1;
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	9a a3       	std	Y+34, r25	; 0x22
    13a6:	89 a3       	std	Y+33, r24	; 0x21
    13a8:	3f c0       	rjmp	.+126    	; 0x1428 <main+0x660>
	else if (__tmp > 65535)
    13aa:	6b a1       	ldd	r22, Y+35	; 0x23
    13ac:	7c a1       	ldd	r23, Y+36	; 0x24
    13ae:	8d a1       	ldd	r24, Y+37	; 0x25
    13b0:	9e a1       	ldd	r25, Y+38	; 0x26
    13b2:	20 e0       	ldi	r18, 0x00	; 0
    13b4:	3f ef       	ldi	r19, 0xFF	; 255
    13b6:	4f e7       	ldi	r20, 0x7F	; 127
    13b8:	57 e4       	ldi	r21, 0x47	; 71
    13ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13be:	18 16       	cp	r1, r24
    13c0:	4c f5       	brge	.+82     	; 0x1414 <main+0x64c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13c2:	6f a1       	ldd	r22, Y+39	; 0x27
    13c4:	78 a5       	ldd	r23, Y+40	; 0x28
    13c6:	89 a5       	ldd	r24, Y+41	; 0x29
    13c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    13ca:	20 e0       	ldi	r18, 0x00	; 0
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	40 e2       	ldi	r20, 0x20	; 32
    13d0:	51 e4       	ldi	r21, 0x41	; 65
    13d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13d6:	dc 01       	movw	r26, r24
    13d8:	cb 01       	movw	r24, r22
    13da:	bc 01       	movw	r22, r24
    13dc:	cd 01       	movw	r24, r26
    13de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13e2:	dc 01       	movw	r26, r24
    13e4:	cb 01       	movw	r24, r22
    13e6:	9a a3       	std	Y+34, r25	; 0x22
    13e8:	89 a3       	std	Y+33, r24	; 0x21
    13ea:	0f c0       	rjmp	.+30     	; 0x140a <main+0x642>
    13ec:	88 ec       	ldi	r24, 0xC8	; 200
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	98 a3       	std	Y+32, r25	; 0x20
    13f2:	8f 8f       	std	Y+31, r24	; 0x1f
    13f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    13f6:	98 a1       	ldd	r25, Y+32	; 0x20
    13f8:	01 97       	sbiw	r24, 0x01	; 1
    13fa:	f1 f7       	brne	.-4      	; 0x13f8 <main+0x630>
    13fc:	98 a3       	std	Y+32, r25	; 0x20
    13fe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1400:	89 a1       	ldd	r24, Y+33	; 0x21
    1402:	9a a1       	ldd	r25, Y+34	; 0x22
    1404:	01 97       	sbiw	r24, 0x01	; 1
    1406:	9a a3       	std	Y+34, r25	; 0x22
    1408:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    140a:	89 a1       	ldd	r24, Y+33	; 0x21
    140c:	9a a1       	ldd	r25, Y+34	; 0x22
    140e:	00 97       	sbiw	r24, 0x00	; 0
    1410:	69 f7       	brne	.-38     	; 0x13ec <main+0x624>
    1412:	14 c0       	rjmp	.+40     	; 0x143c <main+0x674>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1414:	6b a1       	ldd	r22, Y+35	; 0x23
    1416:	7c a1       	ldd	r23, Y+36	; 0x24
    1418:	8d a1       	ldd	r24, Y+37	; 0x25
    141a:	9e a1       	ldd	r25, Y+38	; 0x26
    141c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1420:	dc 01       	movw	r26, r24
    1422:	cb 01       	movw	r24, r22
    1424:	9a a3       	std	Y+34, r25	; 0x22
    1426:	89 a3       	std	Y+33, r24	; 0x21
    1428:	89 a1       	ldd	r24, Y+33	; 0x21
    142a:	9a a1       	ldd	r25, Y+34	; 0x22
    142c:	9e 8f       	std	Y+30, r25	; 0x1e
    142e:	8d 8f       	std	Y+29, r24	; 0x1d
    1430:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1432:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1434:	01 97       	sbiw	r24, 0x01	; 1
    1436:	f1 f7       	brne	.-4      	; 0x1434 <main+0x66c>
    1438:	9e 8f       	std	Y+30, r25	; 0x1e
    143a:	8d 8f       	std	Y+29, r24	; 0x1d
			   _delay_ms (100);
			   /*call function*/
			   tryAgain ();
    143c:	0e 94 af 06 	call	0xd5e	; 0xd5e <tryAgain>
			   /*if  the pass is matched*/
			   if (g_unmatch == MATCH)
    1440:	80 91 7c 01 	lds	r24, 0x017C
    1444:	81 30       	cpi	r24, 0x01	; 1
    1446:	f1 f4       	brne	.+60     	; 0x1484 <main+0x6bc>
			   {
				   LCD_clearScreen();
    1448:	0e 94 27 11 	call	0x224e	; 0x224e <LCD_clearScreen>
				   /*display the massage for 18 seconds*/
				   LCD_displayString("Door is unlocking....");
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	91 e0       	ldi	r25, 0x01	; 1
    1450:	0e 94 80 10 	call	0x2100	; 0x2100 <LCD_displayString>
				   g_ovfSec = 0;
    1454:	10 92 77 01 	sts	0x0177, r1
				   while(g_ovfSec < DELAY+STOP)
    1458:	80 91 77 01 	lds	r24, 0x0177
    145c:	82 31       	cpi	r24, 0x12	; 18
    145e:	e0 f3       	brcs	.-8      	; 0x1458 <main+0x690>
					   LCD_intgerToString(g_ovfSec);
					   LCD_displayStringRowColumn(1,0,"");
					   LCD_intgerToString(g_ovfTick);*/
				   }
				   /*display the massage for 15 seconds*/
				   g_ovfSec = 0;
    1460:	10 92 77 01 	sts	0x0177, r1
				   LCD_clearScreen();
    1464:	0e 94 27 11 	call	0x224e	; 0x224e <LCD_clearScreen>
				   LCD_displayString("Door is locking....");
    1468:	87 e1       	ldi	r24, 0x17	; 23
    146a:	91 e0       	ldi	r25, 0x01	; 1
    146c:	0e 94 80 10 	call	0x2100	; 0x2100 <LCD_displayString>
				   while(g_ovfSec < DELAY)
    1470:	80 91 77 01 	lds	r24, 0x0177
    1474:	8f 30       	cpi	r24, 0x0F	; 15
    1476:	e0 f3       	brcs	.-8      	; 0x1470 <main+0x6a8>
					   LCD_displayStringRowColumn(1,0,"");
					   LCD_intgerToString(g_ovfTick);*/

				   }
				   /*to go to step 2*/
				   match = MATCH ;
    1478:	fe 01       	movw	r30, r28
    147a:	e8 5a       	subi	r30, 0xA8	; 168
    147c:	ff 4f       	sbci	r31, 0xFF	; 255
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	80 83       	st	Z, r24
    1482:	dc cd       	rjmp	.-1096   	; 0x103c <main+0x274>
				   continue ;
			   }
			   /*if  the pass is unmatched*/
			   else if (g_unmatch == UNMATCH)
    1484:	80 91 7c 01 	lds	r24, 0x017C
    1488:	88 23       	and	r24, r24
    148a:	21 f4       	brne	.+8      	; 0x1494 <main+0x6cc>
			   {
				   /*to go to step 1*/
				   match = UNMATCH ;
    148c:	fe 01       	movw	r30, r28
    148e:	e8 5a       	subi	r30, 0xA8	; 168
    1490:	ff 4f       	sbci	r31, 0xFF	; 255
    1492:	10 82       	st	Z, r1
	   }
	}
    	/* step 1 : if the second MICRO send READY
    	 * or when the 2 pass unmatched
    	 * or when the user want to change the pass */
    	if ((change == MATCH)||(match == UNMATCH) || (UART_recieveByte() == READY))
    1494:	fe 01       	movw	r30, r28
    1496:	ea 5a       	subi	r30, 0xAA	; 170
    1498:	ff 4f       	sbci	r31, 0xFF	; 255
    149a:	80 81       	ld	r24, Z
    149c:	81 30       	cpi	r24, 0x01	; 1
    149e:	59 f0       	breq	.+22     	; 0x14b6 <main+0x6ee>
    14a0:	fe 01       	movw	r30, r28
    14a2:	e8 5a       	subi	r30, 0xA8	; 168
    14a4:	ff 4f       	sbci	r31, 0xFF	; 255
    14a6:	80 81       	ld	r24, Z
    14a8:	88 23       	and	r24, r24
    14aa:	29 f0       	breq	.+10     	; 0x14b6 <main+0x6ee>
    14ac:	0e 94 be 12 	call	0x257c	; 0x257c <UART_recieveByte>
    14b0:	82 35       	cpi	r24, 0x52	; 82
    14b2:	09 f0       	breq	.+2      	; 0x14b6 <main+0x6ee>
    14b4:	c3 cd       	rjmp	.-1146   	; 0x103c <main+0x274>
    	{
    		LCD_clearScreen();
    14b6:	0e 94 27 11 	call	0x224e	; 0x224e <LCD_clearScreen>
    		/*display string on LCD*/
    		LCD_displayString("Please Enter New Pass");
    14ba:	85 e3       	ldi	r24, 0x35	; 53
    14bc:	91 e0       	ldi	r25, 0x01	; 1
    14be:	0e 94 80 10 	call	0x2100	; 0x2100 <LCD_displayString>
    		 /*get the pass and send */
    		sendReceive ();
    14c2:	0e 94 a3 05 	call	0xb46	; 0xb46 <sendReceive>
    		LCD_clearScreen();
    14c6:	0e 94 27 11 	call	0x224e	; 0x224e <LCD_clearScreen>
    		/*display string on LCD*/
    		LCD_displayString("Please Re-Enter same Pass");
    14ca:	8b e4       	ldi	r24, 0x4B	; 75
    14cc:	91 e0       	ldi	r25, 0x01	; 1
    14ce:	0e 94 80 10 	call	0x2100	; 0x2100 <LCD_displayString>
    		 /*get the pass and send */
    		sendReceive ();
    14d2:	0e 94 a3 05 	call	0xb46	; 0xb46 <sendReceive>
    		/*receive 0 or 1 if the pass unmatched or matched*/
    		match = UART_recieveByte();
    14d6:	0e 94 be 12 	call	0x257c	; 0x257c <UART_recieveByte>
    14da:	fe 01       	movw	r30, r28
    14dc:	e8 5a       	subi	r30, 0xA8	; 168
    14de:	ff 4f       	sbci	r31, 0xFF	; 255
    14e0:	80 83       	st	Z, r24
    		LCD_clearScreen();
    14e2:	0e 94 27 11 	call	0x224e	; 0x224e <LCD_clearScreen>
    		/*if  the pass is unmatched*/
    		if (match == UNMATCH)
    14e6:	fe 01       	movw	r30, r28
    14e8:	e8 5a       	subi	r30, 0xA8	; 168
    14ea:	ff 4f       	sbci	r31, 0xFF	; 255
    14ec:	80 81       	ld	r24, Z
    14ee:	88 23       	and	r24, r24
    14f0:	09 f0       	breq	.+2      	; 0x14f4 <main+0x72c>
    14f2:	77 c0       	rjmp	.+238    	; 0x15e2 <main+0x81a>
    	    {
    			/*display string on LCD*/
    		     LCD_displayString("UnMatched");
    14f4:	8b e2       	ldi	r24, 0x2B	; 43
    14f6:	91 e0       	ldi	r25, 0x01	; 1
    14f8:	0e 94 80 10 	call	0x2100	; 0x2100 <LCD_displayString>
    14fc:	80 e0       	ldi	r24, 0x00	; 0
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	a8 e4       	ldi	r26, 0x48	; 72
    1502:	b3 e4       	ldi	r27, 0x43	; 67
    1504:	89 8f       	std	Y+25, r24	; 0x19
    1506:	9a 8f       	std	Y+26, r25	; 0x1a
    1508:	ab 8f       	std	Y+27, r26	; 0x1b
    150a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    150c:	69 8d       	ldd	r22, Y+25	; 0x19
    150e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1510:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1512:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	4a ef       	ldi	r20, 0xFA	; 250
    151a:	54 e4       	ldi	r21, 0x44	; 68
    151c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1520:	dc 01       	movw	r26, r24
    1522:	cb 01       	movw	r24, r22
    1524:	8d 8b       	std	Y+21, r24	; 0x15
    1526:	9e 8b       	std	Y+22, r25	; 0x16
    1528:	af 8b       	std	Y+23, r26	; 0x17
    152a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    152c:	6d 89       	ldd	r22, Y+21	; 0x15
    152e:	7e 89       	ldd	r23, Y+22	; 0x16
    1530:	8f 89       	ldd	r24, Y+23	; 0x17
    1532:	98 8d       	ldd	r25, Y+24	; 0x18
    1534:	20 e0       	ldi	r18, 0x00	; 0
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	40 e8       	ldi	r20, 0x80	; 128
    153a:	5f e3       	ldi	r21, 0x3F	; 63
    153c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1540:	88 23       	and	r24, r24
    1542:	2c f4       	brge	.+10     	; 0x154e <main+0x786>
		__ticks = 1;
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	9c 8b       	std	Y+20, r25	; 0x14
    154a:	8b 8b       	std	Y+19, r24	; 0x13
    154c:	3f c0       	rjmp	.+126    	; 0x15cc <main+0x804>
	else if (__tmp > 65535)
    154e:	6d 89       	ldd	r22, Y+21	; 0x15
    1550:	7e 89       	ldd	r23, Y+22	; 0x16
    1552:	8f 89       	ldd	r24, Y+23	; 0x17
    1554:	98 8d       	ldd	r25, Y+24	; 0x18
    1556:	20 e0       	ldi	r18, 0x00	; 0
    1558:	3f ef       	ldi	r19, 0xFF	; 255
    155a:	4f e7       	ldi	r20, 0x7F	; 127
    155c:	57 e4       	ldi	r21, 0x47	; 71
    155e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1562:	18 16       	cp	r1, r24
    1564:	4c f5       	brge	.+82     	; 0x15b8 <main+0x7f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1566:	69 8d       	ldd	r22, Y+25	; 0x19
    1568:	7a 8d       	ldd	r23, Y+26	; 0x1a
    156a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    156c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    156e:	20 e0       	ldi	r18, 0x00	; 0
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	40 e2       	ldi	r20, 0x20	; 32
    1574:	51 e4       	ldi	r21, 0x41	; 65
    1576:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    157a:	dc 01       	movw	r26, r24
    157c:	cb 01       	movw	r24, r22
    157e:	bc 01       	movw	r22, r24
    1580:	cd 01       	movw	r24, r26
    1582:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1586:	dc 01       	movw	r26, r24
    1588:	cb 01       	movw	r24, r22
    158a:	9c 8b       	std	Y+20, r25	; 0x14
    158c:	8b 8b       	std	Y+19, r24	; 0x13
    158e:	0f c0       	rjmp	.+30     	; 0x15ae <main+0x7e6>
    1590:	88 ec       	ldi	r24, 0xC8	; 200
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	9a 8b       	std	Y+18, r25	; 0x12
    1596:	89 8b       	std	Y+17, r24	; 0x11
    1598:	89 89       	ldd	r24, Y+17	; 0x11
    159a:	9a 89       	ldd	r25, Y+18	; 0x12
    159c:	01 97       	sbiw	r24, 0x01	; 1
    159e:	f1 f7       	brne	.-4      	; 0x159c <main+0x7d4>
    15a0:	9a 8b       	std	Y+18, r25	; 0x12
    15a2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15a4:	8b 89       	ldd	r24, Y+19	; 0x13
    15a6:	9c 89       	ldd	r25, Y+20	; 0x14
    15a8:	01 97       	sbiw	r24, 0x01	; 1
    15aa:	9c 8b       	std	Y+20, r25	; 0x14
    15ac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15ae:	8b 89       	ldd	r24, Y+19	; 0x13
    15b0:	9c 89       	ldd	r25, Y+20	; 0x14
    15b2:	00 97       	sbiw	r24, 0x00	; 0
    15b4:	69 f7       	brne	.-38     	; 0x1590 <main+0x7c8>
    15b6:	42 cd       	rjmp	.-1404   	; 0x103c <main+0x274>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15b8:	6d 89       	ldd	r22, Y+21	; 0x15
    15ba:	7e 89       	ldd	r23, Y+22	; 0x16
    15bc:	8f 89       	ldd	r24, Y+23	; 0x17
    15be:	98 8d       	ldd	r25, Y+24	; 0x18
    15c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15c4:	dc 01       	movw	r26, r24
    15c6:	cb 01       	movw	r24, r22
    15c8:	9c 8b       	std	Y+20, r25	; 0x14
    15ca:	8b 8b       	std	Y+19, r24	; 0x13
    15cc:	8b 89       	ldd	r24, Y+19	; 0x13
    15ce:	9c 89       	ldd	r25, Y+20	; 0x14
    15d0:	98 8b       	std	Y+16, r25	; 0x10
    15d2:	8f 87       	std	Y+15, r24	; 0x0f
    15d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    15d6:	98 89       	ldd	r25, Y+16	; 0x10
    15d8:	01 97       	sbiw	r24, 0x01	; 1
    15da:	f1 f7       	brne	.-4      	; 0x15d8 <main+0x810>
    15dc:	98 8b       	std	Y+16, r25	; 0x10
    15de:	8f 87       	std	Y+15, r24	; 0x0f
    15e0:	2d cd       	rjmp	.-1446   	; 0x103c <main+0x274>
    		     _delay_ms (200);
    		}
    		/*if  the pass is matched*/
    		else if (match == MATCH)
    15e2:	fe 01       	movw	r30, r28
    15e4:	e8 5a       	subi	r30, 0xA8	; 168
    15e6:	ff 4f       	sbci	r31, 0xFF	; 255
    15e8:	80 81       	ld	r24, Z
    15ea:	81 30       	cpi	r24, 0x01	; 1
    15ec:	09 f0       	breq	.+2      	; 0x15f0 <main+0x828>
    15ee:	26 cd       	rjmp	.-1460   	; 0x103c <main+0x274>
			{
    			/*display string on LCD*/
				 LCD_displayString("Matched");
    15f0:	8f ed       	ldi	r24, 0xDF	; 223
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	0e 94 80 10 	call	0x2100	; 0x2100 <LCD_displayString>
    15f8:	80 e0       	ldi	r24, 0x00	; 0
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	a8 e4       	ldi	r26, 0x48	; 72
    15fe:	b3 e4       	ldi	r27, 0x43	; 67
    1600:	8b 87       	std	Y+11, r24	; 0x0b
    1602:	9c 87       	std	Y+12, r25	; 0x0c
    1604:	ad 87       	std	Y+13, r26	; 0x0d
    1606:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1608:	6b 85       	ldd	r22, Y+11	; 0x0b
    160a:	7c 85       	ldd	r23, Y+12	; 0x0c
    160c:	8d 85       	ldd	r24, Y+13	; 0x0d
    160e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1610:	20 e0       	ldi	r18, 0x00	; 0
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	4a ef       	ldi	r20, 0xFA	; 250
    1616:	54 e4       	ldi	r21, 0x44	; 68
    1618:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    161c:	dc 01       	movw	r26, r24
    161e:	cb 01       	movw	r24, r22
    1620:	8f 83       	std	Y+7, r24	; 0x07
    1622:	98 87       	std	Y+8, r25	; 0x08
    1624:	a9 87       	std	Y+9, r26	; 0x09
    1626:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1628:	6f 81       	ldd	r22, Y+7	; 0x07
    162a:	78 85       	ldd	r23, Y+8	; 0x08
    162c:	89 85       	ldd	r24, Y+9	; 0x09
    162e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1630:	20 e0       	ldi	r18, 0x00	; 0
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	40 e8       	ldi	r20, 0x80	; 128
    1636:	5f e3       	ldi	r21, 0x3F	; 63
    1638:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    163c:	88 23       	and	r24, r24
    163e:	2c f4       	brge	.+10     	; 0x164a <main+0x882>
		__ticks = 1;
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	9e 83       	std	Y+6, r25	; 0x06
    1646:	8d 83       	std	Y+5, r24	; 0x05
    1648:	3f c0       	rjmp	.+126    	; 0x16c8 <main+0x900>
	else if (__tmp > 65535)
    164a:	6f 81       	ldd	r22, Y+7	; 0x07
    164c:	78 85       	ldd	r23, Y+8	; 0x08
    164e:	89 85       	ldd	r24, Y+9	; 0x09
    1650:	9a 85       	ldd	r25, Y+10	; 0x0a
    1652:	20 e0       	ldi	r18, 0x00	; 0
    1654:	3f ef       	ldi	r19, 0xFF	; 255
    1656:	4f e7       	ldi	r20, 0x7F	; 127
    1658:	57 e4       	ldi	r21, 0x47	; 71
    165a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    165e:	18 16       	cp	r1, r24
    1660:	4c f5       	brge	.+82     	; 0x16b4 <main+0x8ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1662:	6b 85       	ldd	r22, Y+11	; 0x0b
    1664:	7c 85       	ldd	r23, Y+12	; 0x0c
    1666:	8d 85       	ldd	r24, Y+13	; 0x0d
    1668:	9e 85       	ldd	r25, Y+14	; 0x0e
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	40 e2       	ldi	r20, 0x20	; 32
    1670:	51 e4       	ldi	r21, 0x41	; 65
    1672:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1676:	dc 01       	movw	r26, r24
    1678:	cb 01       	movw	r24, r22
    167a:	bc 01       	movw	r22, r24
    167c:	cd 01       	movw	r24, r26
    167e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1682:	dc 01       	movw	r26, r24
    1684:	cb 01       	movw	r24, r22
    1686:	9e 83       	std	Y+6, r25	; 0x06
    1688:	8d 83       	std	Y+5, r24	; 0x05
    168a:	0f c0       	rjmp	.+30     	; 0x16aa <main+0x8e2>
    168c:	88 ec       	ldi	r24, 0xC8	; 200
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	9c 83       	std	Y+4, r25	; 0x04
    1692:	8b 83       	std	Y+3, r24	; 0x03
    1694:	8b 81       	ldd	r24, Y+3	; 0x03
    1696:	9c 81       	ldd	r25, Y+4	; 0x04
    1698:	01 97       	sbiw	r24, 0x01	; 1
    169a:	f1 f7       	brne	.-4      	; 0x1698 <main+0x8d0>
    169c:	9c 83       	std	Y+4, r25	; 0x04
    169e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16a0:	8d 81       	ldd	r24, Y+5	; 0x05
    16a2:	9e 81       	ldd	r25, Y+6	; 0x06
    16a4:	01 97       	sbiw	r24, 0x01	; 1
    16a6:	9e 83       	std	Y+6, r25	; 0x06
    16a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16aa:	8d 81       	ldd	r24, Y+5	; 0x05
    16ac:	9e 81       	ldd	r25, Y+6	; 0x06
    16ae:	00 97       	sbiw	r24, 0x00	; 0
    16b0:	69 f7       	brne	.-38     	; 0x168c <main+0x8c4>
    16b2:	c4 cc       	rjmp	.-1656   	; 0x103c <main+0x274>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16b4:	6f 81       	ldd	r22, Y+7	; 0x07
    16b6:	78 85       	ldd	r23, Y+8	; 0x08
    16b8:	89 85       	ldd	r24, Y+9	; 0x09
    16ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    16bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16c0:	dc 01       	movw	r26, r24
    16c2:	cb 01       	movw	r24, r22
    16c4:	9e 83       	std	Y+6, r25	; 0x06
    16c6:	8d 83       	std	Y+5, r24	; 0x05
    16c8:	8d 81       	ldd	r24, Y+5	; 0x05
    16ca:	9e 81       	ldd	r25, Y+6	; 0x06
    16cc:	9a 83       	std	Y+2, r25	; 0x02
    16ce:	89 83       	std	Y+1, r24	; 0x01
    16d0:	89 81       	ldd	r24, Y+1	; 0x01
    16d2:	9a 81       	ldd	r25, Y+2	; 0x02
    16d4:	01 97       	sbiw	r24, 0x01	; 1
    16d6:	f1 f7       	brne	.-4      	; 0x16d4 <main+0x90c>
    16d8:	9a 83       	std	Y+2, r25	; 0x02
    16da:	89 83       	std	Y+1, r24	; 0x01
    16dc:	af cc       	rjmp	.-1698   	; 0x103c <main+0x274>

000016de <KeyPad_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void)
{
    16de:	df 93       	push	r29
    16e0:	cf 93       	push	r28
    16e2:	00 d0       	rcall	.+0      	; 0x16e4 <KeyPad_getPressedKey+0x6>
    16e4:	cd b7       	in	r28, 0x3d	; 61
    16e6:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    16e8:	1a 82       	std	Y+2, r1	; 0x02
    16ea:	4c c0       	rjmp	.+152    	; 0x1784 <KeyPad_getPressedKey+0xa6>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
    16ec:	ea e3       	ldi	r30, 0x3A	; 58
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	8a 81       	ldd	r24, Y+2	; 0x02
    16f2:	28 2f       	mov	r18, r24
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	80 e1       	ldi	r24, 0x10	; 16
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <KeyPad_getPressedKey+0x22>
    16fc:	88 0f       	add	r24, r24
    16fe:	99 1f       	adc	r25, r25
    1700:	2a 95       	dec	r18
    1702:	e2 f7       	brpl	.-8      	; 0x16fc <KeyPad_getPressedKey+0x1e>
    1704:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col));
    1706:	eb e3       	ldi	r30, 0x3B	; 59
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	8a 81       	ldd	r24, Y+2	; 0x02
    170c:	28 2f       	mov	r18, r24
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	80 e1       	ldi	r24, 0x10	; 16
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	02 2e       	mov	r0, r18
    1716:	02 c0       	rjmp	.+4      	; 0x171c <KeyPad_getPressedKey+0x3e>
    1718:	88 0f       	add	r24, r24
    171a:	99 1f       	adc	r25, r25
    171c:	0a 94       	dec	r0
    171e:	e2 f7       	brpl	.-8      	; 0x1718 <KeyPad_getPressedKey+0x3a>
    1720:	80 95       	com	r24
    1722:	80 83       	st	Z, r24

			for(row=0;row<N_row;row++) /* loop for rows */
    1724:	19 82       	std	Y+1, r1	; 0x01
    1726:	28 c0       	rjmp	.+80     	; 0x1778 <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
    1728:	e9 e3       	ldi	r30, 0x39	; 57
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	80 81       	ld	r24, Z
    172e:	28 2f       	mov	r18, r24
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	89 81       	ldd	r24, Y+1	; 0x01
    1734:	88 2f       	mov	r24, r24
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	a9 01       	movw	r20, r18
    173a:	02 c0       	rjmp	.+4      	; 0x1740 <KeyPad_getPressedKey+0x62>
    173c:	55 95       	asr	r21
    173e:	47 95       	ror	r20
    1740:	8a 95       	dec	r24
    1742:	e2 f7       	brpl	.-8      	; 0x173c <KeyPad_getPressedKey+0x5e>
    1744:	ca 01       	movw	r24, r20
    1746:	81 70       	andi	r24, 0x01	; 1
    1748:	90 70       	andi	r25, 0x00	; 0
    174a:	00 97       	sbiw	r24, 0x00	; 0
    174c:	91 f4       	brne	.+36     	; 0x1772 <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
    174e:	89 81       	ldd	r24, Y+1	; 0x01
    1750:	88 2f       	mov	r24, r24
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	88 0f       	add	r24, r24
    1756:	99 1f       	adc	r25, r25
    1758:	88 0f       	add	r24, r24
    175a:	99 1f       	adc	r25, r25
    175c:	98 2f       	mov	r25, r24
    175e:	8a 81       	ldd	r24, Y+2	; 0x02
    1760:	89 0f       	add	r24, r25
    1762:	8f 5f       	subi	r24, 0xFF	; 255
    1764:	0e 94 c7 0b 	call	0x178e	; 0x178e <KeyPad_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    1768:	0f 90       	pop	r0
    176a:	0f 90       	pop	r0
    176c:	cf 91       	pop	r28
    176e:	df 91       	pop	r29
    1770:	08 95       	ret
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col));

			for(row=0;row<N_row;row++) /* loop for rows */
    1772:	89 81       	ldd	r24, Y+1	; 0x01
    1774:	8f 5f       	subi	r24, 0xFF	; 255
    1776:	89 83       	std	Y+1, r24	; 0x01
    1778:	89 81       	ldd	r24, Y+1	; 0x01
    177a:	84 30       	cpi	r24, 0x04	; 4
    177c:	a8 f2       	brcs	.-86     	; 0x1728 <KeyPad_getPressedKey+0x4a>
uint8 KeyPad_getPressedKey(void)
{
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    177e:	8a 81       	ldd	r24, Y+2	; 0x02
    1780:	8f 5f       	subi	r24, 0xFF	; 255
    1782:	8a 83       	std	Y+2, r24	; 0x02
    1784:	8a 81       	ldd	r24, Y+2	; 0x02
    1786:	84 30       	cpi	r24, 0x04	; 4
    1788:	08 f4       	brcc	.+2      	; 0x178c <KeyPad_getPressedKey+0xae>
    178a:	b0 cf       	rjmp	.-160    	; 0x16ec <KeyPad_getPressedKey+0xe>
    178c:	ad cf       	rjmp	.-166    	; 0x16e8 <KeyPad_getPressedKey+0xa>

0000178e <KeyPad_4x4_adjustKeyNumber>:
} 

#elif (N_col == 4)
 
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
    178e:	df 93       	push	r29
    1790:	cf 93       	push	r28
    1792:	00 d0       	rcall	.+0      	; 0x1794 <KeyPad_4x4_adjustKeyNumber+0x6>
    1794:	00 d0       	rcall	.+0      	; 0x1796 <KeyPad_4x4_adjustKeyNumber+0x8>
    1796:	cd b7       	in	r28, 0x3d	; 61
    1798:	de b7       	in	r29, 0x3e	; 62
    179a:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    179c:	89 81       	ldd	r24, Y+1	; 0x01
    179e:	28 2f       	mov	r18, r24
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	3c 83       	std	Y+4, r19	; 0x04
    17a4:	2b 83       	std	Y+3, r18	; 0x03
    17a6:	8b 81       	ldd	r24, Y+3	; 0x03
    17a8:	9c 81       	ldd	r25, Y+4	; 0x04
    17aa:	88 30       	cpi	r24, 0x08	; 8
    17ac:	91 05       	cpc	r25, r1
    17ae:	09 f4       	brne	.+2      	; 0x17b2 <KeyPad_4x4_adjustKeyNumber+0x24>
    17b0:	70 c0       	rjmp	.+224    	; 0x1892 <KeyPad_4x4_adjustKeyNumber+0x104>
    17b2:	2b 81       	ldd	r18, Y+3	; 0x03
    17b4:	3c 81       	ldd	r19, Y+4	; 0x04
    17b6:	29 30       	cpi	r18, 0x09	; 9
    17b8:	31 05       	cpc	r19, r1
    17ba:	5c f5       	brge	.+86     	; 0x1812 <KeyPad_4x4_adjustKeyNumber+0x84>
    17bc:	8b 81       	ldd	r24, Y+3	; 0x03
    17be:	9c 81       	ldd	r25, Y+4	; 0x04
    17c0:	84 30       	cpi	r24, 0x04	; 4
    17c2:	91 05       	cpc	r25, r1
    17c4:	09 f4       	brne	.+2      	; 0x17c8 <KeyPad_4x4_adjustKeyNumber+0x3a>
    17c6:	59 c0       	rjmp	.+178    	; 0x187a <KeyPad_4x4_adjustKeyNumber+0xec>
    17c8:	2b 81       	ldd	r18, Y+3	; 0x03
    17ca:	3c 81       	ldd	r19, Y+4	; 0x04
    17cc:	25 30       	cpi	r18, 0x05	; 5
    17ce:	31 05       	cpc	r19, r1
    17d0:	9c f4       	brge	.+38     	; 0x17f8 <KeyPad_4x4_adjustKeyNumber+0x6a>
    17d2:	8b 81       	ldd	r24, Y+3	; 0x03
    17d4:	9c 81       	ldd	r25, Y+4	; 0x04
    17d6:	82 30       	cpi	r24, 0x02	; 2
    17d8:	91 05       	cpc	r25, r1
    17da:	09 f4       	brne	.+2      	; 0x17de <KeyPad_4x4_adjustKeyNumber+0x50>
    17dc:	48 c0       	rjmp	.+144    	; 0x186e <KeyPad_4x4_adjustKeyNumber+0xe0>
    17de:	2b 81       	ldd	r18, Y+3	; 0x03
    17e0:	3c 81       	ldd	r19, Y+4	; 0x04
    17e2:	23 30       	cpi	r18, 0x03	; 3
    17e4:	31 05       	cpc	r19, r1
    17e6:	0c f0       	brlt	.+2      	; 0x17ea <KeyPad_4x4_adjustKeyNumber+0x5c>
    17e8:	45 c0       	rjmp	.+138    	; 0x1874 <KeyPad_4x4_adjustKeyNumber+0xe6>
    17ea:	8b 81       	ldd	r24, Y+3	; 0x03
    17ec:	9c 81       	ldd	r25, Y+4	; 0x04
    17ee:	81 30       	cpi	r24, 0x01	; 1
    17f0:	91 05       	cpc	r25, r1
    17f2:	09 f4       	brne	.+2      	; 0x17f6 <KeyPad_4x4_adjustKeyNumber+0x68>
    17f4:	39 c0       	rjmp	.+114    	; 0x1868 <KeyPad_4x4_adjustKeyNumber+0xda>
    17f6:	67 c0       	rjmp	.+206    	; 0x18c6 <KeyPad_4x4_adjustKeyNumber+0x138>
    17f8:	2b 81       	ldd	r18, Y+3	; 0x03
    17fa:	3c 81       	ldd	r19, Y+4	; 0x04
    17fc:	26 30       	cpi	r18, 0x06	; 6
    17fe:	31 05       	cpc	r19, r1
    1800:	09 f4       	brne	.+2      	; 0x1804 <KeyPad_4x4_adjustKeyNumber+0x76>
    1802:	41 c0       	rjmp	.+130    	; 0x1886 <KeyPad_4x4_adjustKeyNumber+0xf8>
    1804:	8b 81       	ldd	r24, Y+3	; 0x03
    1806:	9c 81       	ldd	r25, Y+4	; 0x04
    1808:	87 30       	cpi	r24, 0x07	; 7
    180a:	91 05       	cpc	r25, r1
    180c:	0c f0       	brlt	.+2      	; 0x1810 <KeyPad_4x4_adjustKeyNumber+0x82>
    180e:	3e c0       	rjmp	.+124    	; 0x188c <KeyPad_4x4_adjustKeyNumber+0xfe>
    1810:	37 c0       	rjmp	.+110    	; 0x1880 <KeyPad_4x4_adjustKeyNumber+0xf2>
    1812:	2b 81       	ldd	r18, Y+3	; 0x03
    1814:	3c 81       	ldd	r19, Y+4	; 0x04
    1816:	2c 30       	cpi	r18, 0x0C	; 12
    1818:	31 05       	cpc	r19, r1
    181a:	09 f4       	brne	.+2      	; 0x181e <KeyPad_4x4_adjustKeyNumber+0x90>
    181c:	46 c0       	rjmp	.+140    	; 0x18aa <KeyPad_4x4_adjustKeyNumber+0x11c>
    181e:	8b 81       	ldd	r24, Y+3	; 0x03
    1820:	9c 81       	ldd	r25, Y+4	; 0x04
    1822:	8d 30       	cpi	r24, 0x0D	; 13
    1824:	91 05       	cpc	r25, r1
    1826:	5c f4       	brge	.+22     	; 0x183e <KeyPad_4x4_adjustKeyNumber+0xb0>
    1828:	2b 81       	ldd	r18, Y+3	; 0x03
    182a:	3c 81       	ldd	r19, Y+4	; 0x04
    182c:	2a 30       	cpi	r18, 0x0A	; 10
    182e:	31 05       	cpc	r19, r1
    1830:	b1 f1       	breq	.+108    	; 0x189e <KeyPad_4x4_adjustKeyNumber+0x110>
    1832:	8b 81       	ldd	r24, Y+3	; 0x03
    1834:	9c 81       	ldd	r25, Y+4	; 0x04
    1836:	8b 30       	cpi	r24, 0x0B	; 11
    1838:	91 05       	cpc	r25, r1
    183a:	a4 f5       	brge	.+104    	; 0x18a4 <KeyPad_4x4_adjustKeyNumber+0x116>
    183c:	2d c0       	rjmp	.+90     	; 0x1898 <KeyPad_4x4_adjustKeyNumber+0x10a>
    183e:	2b 81       	ldd	r18, Y+3	; 0x03
    1840:	3c 81       	ldd	r19, Y+4	; 0x04
    1842:	2e 30       	cpi	r18, 0x0E	; 14
    1844:	31 05       	cpc	r19, r1
    1846:	b9 f1       	breq	.+110    	; 0x18b6 <KeyPad_4x4_adjustKeyNumber+0x128>
    1848:	8b 81       	ldd	r24, Y+3	; 0x03
    184a:	9c 81       	ldd	r25, Y+4	; 0x04
    184c:	8e 30       	cpi	r24, 0x0E	; 14
    184e:	91 05       	cpc	r25, r1
    1850:	7c f1       	brlt	.+94     	; 0x18b0 <KeyPad_4x4_adjustKeyNumber+0x122>
    1852:	2b 81       	ldd	r18, Y+3	; 0x03
    1854:	3c 81       	ldd	r19, Y+4	; 0x04
    1856:	2f 30       	cpi	r18, 0x0F	; 15
    1858:	31 05       	cpc	r19, r1
    185a:	79 f1       	breq	.+94     	; 0x18ba <KeyPad_4x4_adjustKeyNumber+0x12c>
    185c:	8b 81       	ldd	r24, Y+3	; 0x03
    185e:	9c 81       	ldd	r25, Y+4	; 0x04
    1860:	80 31       	cpi	r24, 0x10	; 16
    1862:	91 05       	cpc	r25, r1
    1864:	69 f1       	breq	.+90     	; 0x18c0 <KeyPad_4x4_adjustKeyNumber+0x132>
    1866:	2f c0       	rjmp	.+94     	; 0x18c6 <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7; 
    1868:	97 e0       	ldi	r25, 0x07	; 7
    186a:	9a 83       	std	Y+2, r25	; 0x02
    186c:	2e c0       	rjmp	.+92     	; 0x18ca <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8; 
    186e:	28 e0       	ldi	r18, 0x08	; 8
    1870:	2a 83       	std	Y+2, r18	; 0x02
    1872:	2b c0       	rjmp	.+86     	; 0x18ca <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9; 
    1874:	39 e0       	ldi	r19, 0x09	; 9
    1876:	3a 83       	std	Y+2, r19	; 0x02
    1878:	28 c0       	rjmp	.+80     	; 0x18ca <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '%'; // ASCII Code of %
    187a:	85 e2       	ldi	r24, 0x25	; 37
    187c:	8a 83       	std	Y+2, r24	; 0x02
    187e:	25 c0       	rjmp	.+74     	; 0x18ca <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4; 
    1880:	94 e0       	ldi	r25, 0x04	; 4
    1882:	9a 83       	std	Y+2, r25	; 0x02
    1884:	22 c0       	rjmp	.+68     	; 0x18ca <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
    1886:	25 e0       	ldi	r18, 0x05	; 5
    1888:	2a 83       	std	Y+2, r18	; 0x02
    188a:	1f c0       	rjmp	.+62     	; 0x18ca <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6; 
    188c:	36 e0       	ldi	r19, 0x06	; 6
    188e:	3a 83       	std	Y+2, r19	; 0x02
    1890:	1c c0       	rjmp	.+56     	; 0x18ca <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
    1892:	8a e2       	ldi	r24, 0x2A	; 42
    1894:	8a 83       	std	Y+2, r24	; 0x02
    1896:	19 c0       	rjmp	.+50     	; 0x18ca <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;		
		case 9: return 1; 
    1898:	91 e0       	ldi	r25, 0x01	; 1
    189a:	9a 83       	std	Y+2, r25	; 0x02
    189c:	16 c0       	rjmp	.+44     	; 0x18ca <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2; 
    189e:	22 e0       	ldi	r18, 0x02	; 2
    18a0:	2a 83       	std	Y+2, r18	; 0x02
    18a2:	13 c0       	rjmp	.+38     	; 0x18ca <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3; 
    18a4:	33 e0       	ldi	r19, 0x03	; 3
    18a6:	3a 83       	std	Y+2, r19	; 0x02
    18a8:	10 c0       	rjmp	.+32     	; 0x18ca <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
    18aa:	8d e2       	ldi	r24, 0x2D	; 45
    18ac:	8a 83       	std	Y+2, r24	; 0x02
    18ae:	0d c0       	rjmp	.+26     	; 0x18ca <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return 13;  /* ASCII of Enter */
    18b0:	9d e0       	ldi	r25, 0x0D	; 13
    18b2:	9a 83       	std	Y+2, r25	; 0x02
    18b4:	0a c0       	rjmp	.+20     	; 0x18ca <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;			
		case 14: return 0; 
    18b6:	1a 82       	std	Y+2, r1	; 0x02
    18b8:	08 c0       	rjmp	.+16     	; 0x18ca <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
    18ba:	2d e3       	ldi	r18, 0x3D	; 61
    18bc:	2a 83       	std	Y+2, r18	; 0x02
    18be:	05 c0       	rjmp	.+10     	; 0x18ca <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
    18c0:	3b e2       	ldi	r19, 0x2B	; 43
    18c2:	3a 83       	std	Y+2, r19	; 0x02
    18c4:	02 c0       	rjmp	.+4      	; 0x18ca <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		default: return button_number;								 						
    18c6:	89 81       	ldd	r24, Y+1	; 0x01
    18c8:	8a 83       	std	Y+2, r24	; 0x02
    18ca:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
    18cc:	0f 90       	pop	r0
    18ce:	0f 90       	pop	r0
    18d0:	0f 90       	pop	r0
    18d2:	0f 90       	pop	r0
    18d4:	cf 91       	pop	r28
    18d6:	df 91       	pop	r29
    18d8:	08 95       	ret

000018da <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    18da:	df 93       	push	r29
    18dc:	cf 93       	push	r28
    18de:	cd b7       	in	r28, 0x3d	; 61
    18e0:	de b7       	in	r29, 0x3e	; 62
	LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
    18e2:	e4 e3       	ldi	r30, 0x34	; 52
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	8f ef       	ldi	r24, 0xFF	; 255
    18e8:	80 83       	st	Z, r24
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    18ea:	a1 e3       	ldi	r26, 0x31	; 49
    18ec:	b0 e0       	ldi	r27, 0x00	; 0
    18ee:	e1 e3       	ldi	r30, 0x31	; 49
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 81       	ld	r24, Z
    18f4:	8c 61       	ori	r24, 0x1C	; 28
    18f6:	8c 93       	st	X, r24
	
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    18f8:	88 e3       	ldi	r24, 0x38	; 56
    18fa:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_sendCommand>
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    18fe:	8c e0       	ldi	r24, 0x0C	; 12
    1900:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_sendCommand>
	
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_sendCommand>
}
    190a:	cf 91       	pop	r28
    190c:	df 91       	pop	r29
    190e:	08 95       	ret

00001910 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    1910:	df 93       	push	r29
    1912:	cf 93       	push	r28
    1914:	cd b7       	in	r28, 0x3d	; 61
    1916:	de b7       	in	r29, 0x3e	; 62
    1918:	e9 97       	sbiw	r28, 0x39	; 57
    191a:	0f b6       	in	r0, 0x3f	; 63
    191c:	f8 94       	cli
    191e:	de bf       	out	0x3e, r29	; 62
    1920:	0f be       	out	0x3f, r0	; 63
    1922:	cd bf       	out	0x3d, r28	; 61
    1924:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    1926:	a2 e3       	ldi	r26, 0x32	; 50
    1928:	b0 e0       	ldi	r27, 0x00	; 0
    192a:	e2 e3       	ldi	r30, 0x32	; 50
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	80 81       	ld	r24, Z
    1930:	8b 7f       	andi	r24, 0xFB	; 251
    1932:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1934:	a2 e3       	ldi	r26, 0x32	; 50
    1936:	b0 e0       	ldi	r27, 0x00	; 0
    1938:	e2 e3       	ldi	r30, 0x32	; 50
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	80 81       	ld	r24, Z
    193e:	87 7f       	andi	r24, 0xF7	; 247
    1940:	8c 93       	st	X, r24
    1942:	80 e0       	ldi	r24, 0x00	; 0
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	a0 e8       	ldi	r26, 0x80	; 128
    1948:	bf e3       	ldi	r27, 0x3F	; 63
    194a:	8d ab       	std	Y+53, r24	; 0x35
    194c:	9e ab       	std	Y+54, r25	; 0x36
    194e:	af ab       	std	Y+55, r26	; 0x37
    1950:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1952:	6d a9       	ldd	r22, Y+53	; 0x35
    1954:	7e a9       	ldd	r23, Y+54	; 0x36
    1956:	8f a9       	ldd	r24, Y+55	; 0x37
    1958:	98 ad       	ldd	r25, Y+56	; 0x38
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	4a ef       	ldi	r20, 0xFA	; 250
    1960:	54 e4       	ldi	r21, 0x44	; 68
    1962:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1966:	dc 01       	movw	r26, r24
    1968:	cb 01       	movw	r24, r22
    196a:	89 ab       	std	Y+49, r24	; 0x31
    196c:	9a ab       	std	Y+50, r25	; 0x32
    196e:	ab ab       	std	Y+51, r26	; 0x33
    1970:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1972:	69 a9       	ldd	r22, Y+49	; 0x31
    1974:	7a a9       	ldd	r23, Y+50	; 0x32
    1976:	8b a9       	ldd	r24, Y+51	; 0x33
    1978:	9c a9       	ldd	r25, Y+52	; 0x34
    197a:	20 e0       	ldi	r18, 0x00	; 0
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	40 e8       	ldi	r20, 0x80	; 128
    1980:	5f e3       	ldi	r21, 0x3F	; 63
    1982:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1986:	88 23       	and	r24, r24
    1988:	2c f4       	brge	.+10     	; 0x1994 <LCD_sendCommand+0x84>
		__ticks = 1;
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	98 ab       	std	Y+48, r25	; 0x30
    1990:	8f a7       	std	Y+47, r24	; 0x2f
    1992:	3f c0       	rjmp	.+126    	; 0x1a12 <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    1994:	69 a9       	ldd	r22, Y+49	; 0x31
    1996:	7a a9       	ldd	r23, Y+50	; 0x32
    1998:	8b a9       	ldd	r24, Y+51	; 0x33
    199a:	9c a9       	ldd	r25, Y+52	; 0x34
    199c:	20 e0       	ldi	r18, 0x00	; 0
    199e:	3f ef       	ldi	r19, 0xFF	; 255
    19a0:	4f e7       	ldi	r20, 0x7F	; 127
    19a2:	57 e4       	ldi	r21, 0x47	; 71
    19a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19a8:	18 16       	cp	r1, r24
    19aa:	4c f5       	brge	.+82     	; 0x19fe <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ac:	6d a9       	ldd	r22, Y+53	; 0x35
    19ae:	7e a9       	ldd	r23, Y+54	; 0x36
    19b0:	8f a9       	ldd	r24, Y+55	; 0x37
    19b2:	98 ad       	ldd	r25, Y+56	; 0x38
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	40 e2       	ldi	r20, 0x20	; 32
    19ba:	51 e4       	ldi	r21, 0x41	; 65
    19bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c0:	dc 01       	movw	r26, r24
    19c2:	cb 01       	movw	r24, r22
    19c4:	bc 01       	movw	r22, r24
    19c6:	cd 01       	movw	r24, r26
    19c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19cc:	dc 01       	movw	r26, r24
    19ce:	cb 01       	movw	r24, r22
    19d0:	98 ab       	std	Y+48, r25	; 0x30
    19d2:	8f a7       	std	Y+47, r24	; 0x2f
    19d4:	0f c0       	rjmp	.+30     	; 0x19f4 <LCD_sendCommand+0xe4>
    19d6:	88 ec       	ldi	r24, 0xC8	; 200
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	9e a7       	std	Y+46, r25	; 0x2e
    19dc:	8d a7       	std	Y+45, r24	; 0x2d
    19de:	8d a5       	ldd	r24, Y+45	; 0x2d
    19e0:	9e a5       	ldd	r25, Y+46	; 0x2e
    19e2:	01 97       	sbiw	r24, 0x01	; 1
    19e4:	f1 f7       	brne	.-4      	; 0x19e2 <LCD_sendCommand+0xd2>
    19e6:	9e a7       	std	Y+46, r25	; 0x2e
    19e8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    19ec:	98 a9       	ldd	r25, Y+48	; 0x30
    19ee:	01 97       	sbiw	r24, 0x01	; 1
    19f0:	98 ab       	std	Y+48, r25	; 0x30
    19f2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    19f6:	98 a9       	ldd	r25, Y+48	; 0x30
    19f8:	00 97       	sbiw	r24, 0x00	; 0
    19fa:	69 f7       	brne	.-38     	; 0x19d6 <LCD_sendCommand+0xc6>
    19fc:	14 c0       	rjmp	.+40     	; 0x1a26 <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19fe:	69 a9       	ldd	r22, Y+49	; 0x31
    1a00:	7a a9       	ldd	r23, Y+50	; 0x32
    1a02:	8b a9       	ldd	r24, Y+51	; 0x33
    1a04:	9c a9       	ldd	r25, Y+52	; 0x34
    1a06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a0a:	dc 01       	movw	r26, r24
    1a0c:	cb 01       	movw	r24, r22
    1a0e:	98 ab       	std	Y+48, r25	; 0x30
    1a10:	8f a7       	std	Y+47, r24	; 0x2f
    1a12:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a14:	98 a9       	ldd	r25, Y+48	; 0x30
    1a16:	9c a7       	std	Y+44, r25	; 0x2c
    1a18:	8b a7       	std	Y+43, r24	; 0x2b
    1a1a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a1c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a1e:	01 97       	sbiw	r24, 0x01	; 1
    1a20:	f1 f7       	brne	.-4      	; 0x1a1e <LCD_sendCommand+0x10e>
    1a22:	9c a7       	std	Y+44, r25	; 0x2c
    1a24:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1a26:	a2 e3       	ldi	r26, 0x32	; 50
    1a28:	b0 e0       	ldi	r27, 0x00	; 0
    1a2a:	e2 e3       	ldi	r30, 0x32	; 50
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	80 61       	ori	r24, 0x10	; 16
    1a32:	8c 93       	st	X, r24
    1a34:	80 e0       	ldi	r24, 0x00	; 0
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	a0 e8       	ldi	r26, 0x80	; 128
    1a3a:	bf e3       	ldi	r27, 0x3F	; 63
    1a3c:	8f a3       	std	Y+39, r24	; 0x27
    1a3e:	98 a7       	std	Y+40, r25	; 0x28
    1a40:	a9 a7       	std	Y+41, r26	; 0x29
    1a42:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a44:	6f a1       	ldd	r22, Y+39	; 0x27
    1a46:	78 a5       	ldd	r23, Y+40	; 0x28
    1a48:	89 a5       	ldd	r24, Y+41	; 0x29
    1a4a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a4c:	20 e0       	ldi	r18, 0x00	; 0
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	4a ef       	ldi	r20, 0xFA	; 250
    1a52:	54 e4       	ldi	r21, 0x44	; 68
    1a54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a58:	dc 01       	movw	r26, r24
    1a5a:	cb 01       	movw	r24, r22
    1a5c:	8b a3       	std	Y+35, r24	; 0x23
    1a5e:	9c a3       	std	Y+36, r25	; 0x24
    1a60:	ad a3       	std	Y+37, r26	; 0x25
    1a62:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a64:	6b a1       	ldd	r22, Y+35	; 0x23
    1a66:	7c a1       	ldd	r23, Y+36	; 0x24
    1a68:	8d a1       	ldd	r24, Y+37	; 0x25
    1a6a:	9e a1       	ldd	r25, Y+38	; 0x26
    1a6c:	20 e0       	ldi	r18, 0x00	; 0
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	40 e8       	ldi	r20, 0x80	; 128
    1a72:	5f e3       	ldi	r21, 0x3F	; 63
    1a74:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a78:	88 23       	and	r24, r24
    1a7a:	2c f4       	brge	.+10     	; 0x1a86 <LCD_sendCommand+0x176>
		__ticks = 1;
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	9a a3       	std	Y+34, r25	; 0x22
    1a82:	89 a3       	std	Y+33, r24	; 0x21
    1a84:	3f c0       	rjmp	.+126    	; 0x1b04 <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    1a86:	6b a1       	ldd	r22, Y+35	; 0x23
    1a88:	7c a1       	ldd	r23, Y+36	; 0x24
    1a8a:	8d a1       	ldd	r24, Y+37	; 0x25
    1a8c:	9e a1       	ldd	r25, Y+38	; 0x26
    1a8e:	20 e0       	ldi	r18, 0x00	; 0
    1a90:	3f ef       	ldi	r19, 0xFF	; 255
    1a92:	4f e7       	ldi	r20, 0x7F	; 127
    1a94:	57 e4       	ldi	r21, 0x47	; 71
    1a96:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a9a:	18 16       	cp	r1, r24
    1a9c:	4c f5       	brge	.+82     	; 0x1af0 <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a9e:	6f a1       	ldd	r22, Y+39	; 0x27
    1aa0:	78 a5       	ldd	r23, Y+40	; 0x28
    1aa2:	89 a5       	ldd	r24, Y+41	; 0x29
    1aa4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	40 e2       	ldi	r20, 0x20	; 32
    1aac:	51 e4       	ldi	r21, 0x41	; 65
    1aae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab2:	dc 01       	movw	r26, r24
    1ab4:	cb 01       	movw	r24, r22
    1ab6:	bc 01       	movw	r22, r24
    1ab8:	cd 01       	movw	r24, r26
    1aba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1abe:	dc 01       	movw	r26, r24
    1ac0:	cb 01       	movw	r24, r22
    1ac2:	9a a3       	std	Y+34, r25	; 0x22
    1ac4:	89 a3       	std	Y+33, r24	; 0x21
    1ac6:	0f c0       	rjmp	.+30     	; 0x1ae6 <LCD_sendCommand+0x1d6>
    1ac8:	88 ec       	ldi	r24, 0xC8	; 200
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	98 a3       	std	Y+32, r25	; 0x20
    1ace:	8f 8f       	std	Y+31, r24	; 0x1f
    1ad0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ad2:	98 a1       	ldd	r25, Y+32	; 0x20
    1ad4:	01 97       	sbiw	r24, 0x01	; 1
    1ad6:	f1 f7       	brne	.-4      	; 0x1ad4 <LCD_sendCommand+0x1c4>
    1ad8:	98 a3       	std	Y+32, r25	; 0x20
    1ada:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1adc:	89 a1       	ldd	r24, Y+33	; 0x21
    1ade:	9a a1       	ldd	r25, Y+34	; 0x22
    1ae0:	01 97       	sbiw	r24, 0x01	; 1
    1ae2:	9a a3       	std	Y+34, r25	; 0x22
    1ae4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ae6:	89 a1       	ldd	r24, Y+33	; 0x21
    1ae8:	9a a1       	ldd	r25, Y+34	; 0x22
    1aea:	00 97       	sbiw	r24, 0x00	; 0
    1aec:	69 f7       	brne	.-38     	; 0x1ac8 <LCD_sendCommand+0x1b8>
    1aee:	14 c0       	rjmp	.+40     	; 0x1b18 <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1af0:	6b a1       	ldd	r22, Y+35	; 0x23
    1af2:	7c a1       	ldd	r23, Y+36	; 0x24
    1af4:	8d a1       	ldd	r24, Y+37	; 0x25
    1af6:	9e a1       	ldd	r25, Y+38	; 0x26
    1af8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1afc:	dc 01       	movw	r26, r24
    1afe:	cb 01       	movw	r24, r22
    1b00:	9a a3       	std	Y+34, r25	; 0x22
    1b02:	89 a3       	std	Y+33, r24	; 0x21
    1b04:	89 a1       	ldd	r24, Y+33	; 0x21
    1b06:	9a a1       	ldd	r25, Y+34	; 0x22
    1b08:	9e 8f       	std	Y+30, r25	; 0x1e
    1b0a:	8d 8f       	std	Y+29, r24	; 0x1d
    1b0c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b0e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b10:	01 97       	sbiw	r24, 0x01	; 1
    1b12:	f1 f7       	brne	.-4      	; 0x1b10 <LCD_sendCommand+0x200>
    1b14:	9e 8f       	std	Y+30, r25	; 0x1e
    1b16:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
    1b18:	e5 e3       	ldi	r30, 0x35	; 53
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	89 ad       	ldd	r24, Y+57	; 0x39
    1b1e:	80 83       	st	Z, r24
    1b20:	80 e0       	ldi	r24, 0x00	; 0
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	a0 e8       	ldi	r26, 0x80	; 128
    1b26:	bf e3       	ldi	r27, 0x3F	; 63
    1b28:	89 8f       	std	Y+25, r24	; 0x19
    1b2a:	9a 8f       	std	Y+26, r25	; 0x1a
    1b2c:	ab 8f       	std	Y+27, r26	; 0x1b
    1b2e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b30:	69 8d       	ldd	r22, Y+25	; 0x19
    1b32:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b36:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b38:	20 e0       	ldi	r18, 0x00	; 0
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	4a ef       	ldi	r20, 0xFA	; 250
    1b3e:	54 e4       	ldi	r21, 0x44	; 68
    1b40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b44:	dc 01       	movw	r26, r24
    1b46:	cb 01       	movw	r24, r22
    1b48:	8d 8b       	std	Y+21, r24	; 0x15
    1b4a:	9e 8b       	std	Y+22, r25	; 0x16
    1b4c:	af 8b       	std	Y+23, r26	; 0x17
    1b4e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b50:	6d 89       	ldd	r22, Y+21	; 0x15
    1b52:	7e 89       	ldd	r23, Y+22	; 0x16
    1b54:	8f 89       	ldd	r24, Y+23	; 0x17
    1b56:	98 8d       	ldd	r25, Y+24	; 0x18
    1b58:	20 e0       	ldi	r18, 0x00	; 0
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	40 e8       	ldi	r20, 0x80	; 128
    1b5e:	5f e3       	ldi	r21, 0x3F	; 63
    1b60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b64:	88 23       	and	r24, r24
    1b66:	2c f4       	brge	.+10     	; 0x1b72 <LCD_sendCommand+0x262>
		__ticks = 1;
    1b68:	81 e0       	ldi	r24, 0x01	; 1
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	9c 8b       	std	Y+20, r25	; 0x14
    1b6e:	8b 8b       	std	Y+19, r24	; 0x13
    1b70:	3f c0       	rjmp	.+126    	; 0x1bf0 <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    1b72:	6d 89       	ldd	r22, Y+21	; 0x15
    1b74:	7e 89       	ldd	r23, Y+22	; 0x16
    1b76:	8f 89       	ldd	r24, Y+23	; 0x17
    1b78:	98 8d       	ldd	r25, Y+24	; 0x18
    1b7a:	20 e0       	ldi	r18, 0x00	; 0
    1b7c:	3f ef       	ldi	r19, 0xFF	; 255
    1b7e:	4f e7       	ldi	r20, 0x7F	; 127
    1b80:	57 e4       	ldi	r21, 0x47	; 71
    1b82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b86:	18 16       	cp	r1, r24
    1b88:	4c f5       	brge	.+82     	; 0x1bdc <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b8a:	69 8d       	ldd	r22, Y+25	; 0x19
    1b8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b90:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b92:	20 e0       	ldi	r18, 0x00	; 0
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	40 e2       	ldi	r20, 0x20	; 32
    1b98:	51 e4       	ldi	r21, 0x41	; 65
    1b9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b9e:	dc 01       	movw	r26, r24
    1ba0:	cb 01       	movw	r24, r22
    1ba2:	bc 01       	movw	r22, r24
    1ba4:	cd 01       	movw	r24, r26
    1ba6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1baa:	dc 01       	movw	r26, r24
    1bac:	cb 01       	movw	r24, r22
    1bae:	9c 8b       	std	Y+20, r25	; 0x14
    1bb0:	8b 8b       	std	Y+19, r24	; 0x13
    1bb2:	0f c0       	rjmp	.+30     	; 0x1bd2 <LCD_sendCommand+0x2c2>
    1bb4:	88 ec       	ldi	r24, 0xC8	; 200
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	9a 8b       	std	Y+18, r25	; 0x12
    1bba:	89 8b       	std	Y+17, r24	; 0x11
    1bbc:	89 89       	ldd	r24, Y+17	; 0x11
    1bbe:	9a 89       	ldd	r25, Y+18	; 0x12
    1bc0:	01 97       	sbiw	r24, 0x01	; 1
    1bc2:	f1 f7       	brne	.-4      	; 0x1bc0 <LCD_sendCommand+0x2b0>
    1bc4:	9a 8b       	std	Y+18, r25	; 0x12
    1bc6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bc8:	8b 89       	ldd	r24, Y+19	; 0x13
    1bca:	9c 89       	ldd	r25, Y+20	; 0x14
    1bcc:	01 97       	sbiw	r24, 0x01	; 1
    1bce:	9c 8b       	std	Y+20, r25	; 0x14
    1bd0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bd2:	8b 89       	ldd	r24, Y+19	; 0x13
    1bd4:	9c 89       	ldd	r25, Y+20	; 0x14
    1bd6:	00 97       	sbiw	r24, 0x00	; 0
    1bd8:	69 f7       	brne	.-38     	; 0x1bb4 <LCD_sendCommand+0x2a4>
    1bda:	14 c0       	rjmp	.+40     	; 0x1c04 <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bdc:	6d 89       	ldd	r22, Y+21	; 0x15
    1bde:	7e 89       	ldd	r23, Y+22	; 0x16
    1be0:	8f 89       	ldd	r24, Y+23	; 0x17
    1be2:	98 8d       	ldd	r25, Y+24	; 0x18
    1be4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be8:	dc 01       	movw	r26, r24
    1bea:	cb 01       	movw	r24, r22
    1bec:	9c 8b       	std	Y+20, r25	; 0x14
    1bee:	8b 8b       	std	Y+19, r24	; 0x13
    1bf0:	8b 89       	ldd	r24, Y+19	; 0x13
    1bf2:	9c 89       	ldd	r25, Y+20	; 0x14
    1bf4:	98 8b       	std	Y+16, r25	; 0x10
    1bf6:	8f 87       	std	Y+15, r24	; 0x0f
    1bf8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bfa:	98 89       	ldd	r25, Y+16	; 0x10
    1bfc:	01 97       	sbiw	r24, 0x01	; 1
    1bfe:	f1 f7       	brne	.-4      	; 0x1bfc <LCD_sendCommand+0x2ec>
    1c00:	98 8b       	std	Y+16, r25	; 0x10
    1c02:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1c04:	a2 e3       	ldi	r26, 0x32	; 50
    1c06:	b0 e0       	ldi	r27, 0x00	; 0
    1c08:	e2 e3       	ldi	r30, 0x32	; 50
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	8f 7e       	andi	r24, 0xEF	; 239
    1c10:	8c 93       	st	X, r24
    1c12:	80 e0       	ldi	r24, 0x00	; 0
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	a0 e8       	ldi	r26, 0x80	; 128
    1c18:	bf e3       	ldi	r27, 0x3F	; 63
    1c1a:	8b 87       	std	Y+11, r24	; 0x0b
    1c1c:	9c 87       	std	Y+12, r25	; 0x0c
    1c1e:	ad 87       	std	Y+13, r26	; 0x0d
    1c20:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c22:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c24:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c26:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c28:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c2a:	20 e0       	ldi	r18, 0x00	; 0
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	4a ef       	ldi	r20, 0xFA	; 250
    1c30:	54 e4       	ldi	r21, 0x44	; 68
    1c32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c36:	dc 01       	movw	r26, r24
    1c38:	cb 01       	movw	r24, r22
    1c3a:	8f 83       	std	Y+7, r24	; 0x07
    1c3c:	98 87       	std	Y+8, r25	; 0x08
    1c3e:	a9 87       	std	Y+9, r26	; 0x09
    1c40:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c42:	6f 81       	ldd	r22, Y+7	; 0x07
    1c44:	78 85       	ldd	r23, Y+8	; 0x08
    1c46:	89 85       	ldd	r24, Y+9	; 0x09
    1c48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c4a:	20 e0       	ldi	r18, 0x00	; 0
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	40 e8       	ldi	r20, 0x80	; 128
    1c50:	5f e3       	ldi	r21, 0x3F	; 63
    1c52:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c56:	88 23       	and	r24, r24
    1c58:	2c f4       	brge	.+10     	; 0x1c64 <LCD_sendCommand+0x354>
		__ticks = 1;
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	9e 83       	std	Y+6, r25	; 0x06
    1c60:	8d 83       	std	Y+5, r24	; 0x05
    1c62:	3f c0       	rjmp	.+126    	; 0x1ce2 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    1c64:	6f 81       	ldd	r22, Y+7	; 0x07
    1c66:	78 85       	ldd	r23, Y+8	; 0x08
    1c68:	89 85       	ldd	r24, Y+9	; 0x09
    1c6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
    1c6e:	3f ef       	ldi	r19, 0xFF	; 255
    1c70:	4f e7       	ldi	r20, 0x7F	; 127
    1c72:	57 e4       	ldi	r21, 0x47	; 71
    1c74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c78:	18 16       	cp	r1, r24
    1c7a:	4c f5       	brge	.+82     	; 0x1cce <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c80:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c82:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c84:	20 e0       	ldi	r18, 0x00	; 0
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	40 e2       	ldi	r20, 0x20	; 32
    1c8a:	51 e4       	ldi	r21, 0x41	; 65
    1c8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c90:	dc 01       	movw	r26, r24
    1c92:	cb 01       	movw	r24, r22
    1c94:	bc 01       	movw	r22, r24
    1c96:	cd 01       	movw	r24, r26
    1c98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c9c:	dc 01       	movw	r26, r24
    1c9e:	cb 01       	movw	r24, r22
    1ca0:	9e 83       	std	Y+6, r25	; 0x06
    1ca2:	8d 83       	std	Y+5, r24	; 0x05
    1ca4:	0f c0       	rjmp	.+30     	; 0x1cc4 <LCD_sendCommand+0x3b4>
    1ca6:	88 ec       	ldi	r24, 0xC8	; 200
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	9c 83       	std	Y+4, r25	; 0x04
    1cac:	8b 83       	std	Y+3, r24	; 0x03
    1cae:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb2:	01 97       	sbiw	r24, 0x01	; 1
    1cb4:	f1 f7       	brne	.-4      	; 0x1cb2 <LCD_sendCommand+0x3a2>
    1cb6:	9c 83       	std	Y+4, r25	; 0x04
    1cb8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cba:	8d 81       	ldd	r24, Y+5	; 0x05
    1cbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cbe:	01 97       	sbiw	r24, 0x01	; 1
    1cc0:	9e 83       	std	Y+6, r25	; 0x06
    1cc2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc6:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc8:	00 97       	sbiw	r24, 0x00	; 0
    1cca:	69 f7       	brne	.-38     	; 0x1ca6 <LCD_sendCommand+0x396>
    1ccc:	14 c0       	rjmp	.+40     	; 0x1cf6 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cce:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd0:	78 85       	ldd	r23, Y+8	; 0x08
    1cd2:	89 85       	ldd	r24, Y+9	; 0x09
    1cd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cda:	dc 01       	movw	r26, r24
    1cdc:	cb 01       	movw	r24, r22
    1cde:	9e 83       	std	Y+6, r25	; 0x06
    1ce0:	8d 83       	std	Y+5, r24	; 0x05
    1ce2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce6:	9a 83       	std	Y+2, r25	; 0x02
    1ce8:	89 83       	std	Y+1, r24	; 0x01
    1cea:	89 81       	ldd	r24, Y+1	; 0x01
    1cec:	9a 81       	ldd	r25, Y+2	; 0x02
    1cee:	01 97       	sbiw	r24, 0x01	; 1
    1cf0:	f1 f7       	brne	.-4      	; 0x1cee <LCD_sendCommand+0x3de>
    1cf2:	9a 83       	std	Y+2, r25	; 0x02
    1cf4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1cf6:	e9 96       	adiw	r28, 0x39	; 57
    1cf8:	0f b6       	in	r0, 0x3f	; 63
    1cfa:	f8 94       	cli
    1cfc:	de bf       	out	0x3e, r29	; 62
    1cfe:	0f be       	out	0x3f, r0	; 63
    1d00:	cd bf       	out	0x3d, r28	; 61
    1d02:	cf 91       	pop	r28
    1d04:	df 91       	pop	r29
    1d06:	08 95       	ret

00001d08 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    1d08:	df 93       	push	r29
    1d0a:	cf 93       	push	r28
    1d0c:	cd b7       	in	r28, 0x3d	; 61
    1d0e:	de b7       	in	r29, 0x3e	; 62
    1d10:	e9 97       	sbiw	r28, 0x39	; 57
    1d12:	0f b6       	in	r0, 0x3f	; 63
    1d14:	f8 94       	cli
    1d16:	de bf       	out	0x3e, r29	; 62
    1d18:	0f be       	out	0x3f, r0	; 63
    1d1a:	cd bf       	out	0x3d, r28	; 61
    1d1c:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    1d1e:	a2 e3       	ldi	r26, 0x32	; 50
    1d20:	b0 e0       	ldi	r27, 0x00	; 0
    1d22:	e2 e3       	ldi	r30, 0x32	; 50
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	80 81       	ld	r24, Z
    1d28:	84 60       	ori	r24, 0x04	; 4
    1d2a:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1d2c:	a2 e3       	ldi	r26, 0x32	; 50
    1d2e:	b0 e0       	ldi	r27, 0x00	; 0
    1d30:	e2 e3       	ldi	r30, 0x32	; 50
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	80 81       	ld	r24, Z
    1d36:	87 7f       	andi	r24, 0xF7	; 247
    1d38:	8c 93       	st	X, r24
    1d3a:	80 e0       	ldi	r24, 0x00	; 0
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	a0 e8       	ldi	r26, 0x80	; 128
    1d40:	bf e3       	ldi	r27, 0x3F	; 63
    1d42:	8d ab       	std	Y+53, r24	; 0x35
    1d44:	9e ab       	std	Y+54, r25	; 0x36
    1d46:	af ab       	std	Y+55, r26	; 0x37
    1d48:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d4a:	6d a9       	ldd	r22, Y+53	; 0x35
    1d4c:	7e a9       	ldd	r23, Y+54	; 0x36
    1d4e:	8f a9       	ldd	r24, Y+55	; 0x37
    1d50:	98 ad       	ldd	r25, Y+56	; 0x38
    1d52:	20 e0       	ldi	r18, 0x00	; 0
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	4a ef       	ldi	r20, 0xFA	; 250
    1d58:	54 e4       	ldi	r21, 0x44	; 68
    1d5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d5e:	dc 01       	movw	r26, r24
    1d60:	cb 01       	movw	r24, r22
    1d62:	89 ab       	std	Y+49, r24	; 0x31
    1d64:	9a ab       	std	Y+50, r25	; 0x32
    1d66:	ab ab       	std	Y+51, r26	; 0x33
    1d68:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d6a:	69 a9       	ldd	r22, Y+49	; 0x31
    1d6c:	7a a9       	ldd	r23, Y+50	; 0x32
    1d6e:	8b a9       	ldd	r24, Y+51	; 0x33
    1d70:	9c a9       	ldd	r25, Y+52	; 0x34
    1d72:	20 e0       	ldi	r18, 0x00	; 0
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	40 e8       	ldi	r20, 0x80	; 128
    1d78:	5f e3       	ldi	r21, 0x3F	; 63
    1d7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d7e:	88 23       	and	r24, r24
    1d80:	2c f4       	brge	.+10     	; 0x1d8c <LCD_displayCharacter+0x84>
		__ticks = 1;
    1d82:	81 e0       	ldi	r24, 0x01	; 1
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	98 ab       	std	Y+48, r25	; 0x30
    1d88:	8f a7       	std	Y+47, r24	; 0x2f
    1d8a:	3f c0       	rjmp	.+126    	; 0x1e0a <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    1d8c:	69 a9       	ldd	r22, Y+49	; 0x31
    1d8e:	7a a9       	ldd	r23, Y+50	; 0x32
    1d90:	8b a9       	ldd	r24, Y+51	; 0x33
    1d92:	9c a9       	ldd	r25, Y+52	; 0x34
    1d94:	20 e0       	ldi	r18, 0x00	; 0
    1d96:	3f ef       	ldi	r19, 0xFF	; 255
    1d98:	4f e7       	ldi	r20, 0x7F	; 127
    1d9a:	57 e4       	ldi	r21, 0x47	; 71
    1d9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1da0:	18 16       	cp	r1, r24
    1da2:	4c f5       	brge	.+82     	; 0x1df6 <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1da4:	6d a9       	ldd	r22, Y+53	; 0x35
    1da6:	7e a9       	ldd	r23, Y+54	; 0x36
    1da8:	8f a9       	ldd	r24, Y+55	; 0x37
    1daa:	98 ad       	ldd	r25, Y+56	; 0x38
    1dac:	20 e0       	ldi	r18, 0x00	; 0
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	40 e2       	ldi	r20, 0x20	; 32
    1db2:	51 e4       	ldi	r21, 0x41	; 65
    1db4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1db8:	dc 01       	movw	r26, r24
    1dba:	cb 01       	movw	r24, r22
    1dbc:	bc 01       	movw	r22, r24
    1dbe:	cd 01       	movw	r24, r26
    1dc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc4:	dc 01       	movw	r26, r24
    1dc6:	cb 01       	movw	r24, r22
    1dc8:	98 ab       	std	Y+48, r25	; 0x30
    1dca:	8f a7       	std	Y+47, r24	; 0x2f
    1dcc:	0f c0       	rjmp	.+30     	; 0x1dec <LCD_displayCharacter+0xe4>
    1dce:	88 ec       	ldi	r24, 0xC8	; 200
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	9e a7       	std	Y+46, r25	; 0x2e
    1dd4:	8d a7       	std	Y+45, r24	; 0x2d
    1dd6:	8d a5       	ldd	r24, Y+45	; 0x2d
    1dd8:	9e a5       	ldd	r25, Y+46	; 0x2e
    1dda:	01 97       	sbiw	r24, 0x01	; 1
    1ddc:	f1 f7       	brne	.-4      	; 0x1dda <LCD_displayCharacter+0xd2>
    1dde:	9e a7       	std	Y+46, r25	; 0x2e
    1de0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1de2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1de4:	98 a9       	ldd	r25, Y+48	; 0x30
    1de6:	01 97       	sbiw	r24, 0x01	; 1
    1de8:	98 ab       	std	Y+48, r25	; 0x30
    1dea:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dec:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dee:	98 a9       	ldd	r25, Y+48	; 0x30
    1df0:	00 97       	sbiw	r24, 0x00	; 0
    1df2:	69 f7       	brne	.-38     	; 0x1dce <LCD_displayCharacter+0xc6>
    1df4:	14 c0       	rjmp	.+40     	; 0x1e1e <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1df6:	69 a9       	ldd	r22, Y+49	; 0x31
    1df8:	7a a9       	ldd	r23, Y+50	; 0x32
    1dfa:	8b a9       	ldd	r24, Y+51	; 0x33
    1dfc:	9c a9       	ldd	r25, Y+52	; 0x34
    1dfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e02:	dc 01       	movw	r26, r24
    1e04:	cb 01       	movw	r24, r22
    1e06:	98 ab       	std	Y+48, r25	; 0x30
    1e08:	8f a7       	std	Y+47, r24	; 0x2f
    1e0a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e0c:	98 a9       	ldd	r25, Y+48	; 0x30
    1e0e:	9c a7       	std	Y+44, r25	; 0x2c
    1e10:	8b a7       	std	Y+43, r24	; 0x2b
    1e12:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e14:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e16:	01 97       	sbiw	r24, 0x01	; 1
    1e18:	f1 f7       	brne	.-4      	; 0x1e16 <LCD_displayCharacter+0x10e>
    1e1a:	9c a7       	std	Y+44, r25	; 0x2c
    1e1c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1e1e:	a2 e3       	ldi	r26, 0x32	; 50
    1e20:	b0 e0       	ldi	r27, 0x00	; 0
    1e22:	e2 e3       	ldi	r30, 0x32	; 50
    1e24:	f0 e0       	ldi	r31, 0x00	; 0
    1e26:	80 81       	ld	r24, Z
    1e28:	80 61       	ori	r24, 0x10	; 16
    1e2a:	8c 93       	st	X, r24
    1e2c:	80 e0       	ldi	r24, 0x00	; 0
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	a0 e8       	ldi	r26, 0x80	; 128
    1e32:	bf e3       	ldi	r27, 0x3F	; 63
    1e34:	8f a3       	std	Y+39, r24	; 0x27
    1e36:	98 a7       	std	Y+40, r25	; 0x28
    1e38:	a9 a7       	std	Y+41, r26	; 0x29
    1e3a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e3c:	6f a1       	ldd	r22, Y+39	; 0x27
    1e3e:	78 a5       	ldd	r23, Y+40	; 0x28
    1e40:	89 a5       	ldd	r24, Y+41	; 0x29
    1e42:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e44:	20 e0       	ldi	r18, 0x00	; 0
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	4a ef       	ldi	r20, 0xFA	; 250
    1e4a:	54 e4       	ldi	r21, 0x44	; 68
    1e4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	8b a3       	std	Y+35, r24	; 0x23
    1e56:	9c a3       	std	Y+36, r25	; 0x24
    1e58:	ad a3       	std	Y+37, r26	; 0x25
    1e5a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e5c:	6b a1       	ldd	r22, Y+35	; 0x23
    1e5e:	7c a1       	ldd	r23, Y+36	; 0x24
    1e60:	8d a1       	ldd	r24, Y+37	; 0x25
    1e62:	9e a1       	ldd	r25, Y+38	; 0x26
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	40 e8       	ldi	r20, 0x80	; 128
    1e6a:	5f e3       	ldi	r21, 0x3F	; 63
    1e6c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e70:	88 23       	and	r24, r24
    1e72:	2c f4       	brge	.+10     	; 0x1e7e <LCD_displayCharacter+0x176>
		__ticks = 1;
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	9a a3       	std	Y+34, r25	; 0x22
    1e7a:	89 a3       	std	Y+33, r24	; 0x21
    1e7c:	3f c0       	rjmp	.+126    	; 0x1efc <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    1e7e:	6b a1       	ldd	r22, Y+35	; 0x23
    1e80:	7c a1       	ldd	r23, Y+36	; 0x24
    1e82:	8d a1       	ldd	r24, Y+37	; 0x25
    1e84:	9e a1       	ldd	r25, Y+38	; 0x26
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	3f ef       	ldi	r19, 0xFF	; 255
    1e8a:	4f e7       	ldi	r20, 0x7F	; 127
    1e8c:	57 e4       	ldi	r21, 0x47	; 71
    1e8e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e92:	18 16       	cp	r1, r24
    1e94:	4c f5       	brge	.+82     	; 0x1ee8 <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e96:	6f a1       	ldd	r22, Y+39	; 0x27
    1e98:	78 a5       	ldd	r23, Y+40	; 0x28
    1e9a:	89 a5       	ldd	r24, Y+41	; 0x29
    1e9c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e9e:	20 e0       	ldi	r18, 0x00	; 0
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	40 e2       	ldi	r20, 0x20	; 32
    1ea4:	51 e4       	ldi	r21, 0x41	; 65
    1ea6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eaa:	dc 01       	movw	r26, r24
    1eac:	cb 01       	movw	r24, r22
    1eae:	bc 01       	movw	r22, r24
    1eb0:	cd 01       	movw	r24, r26
    1eb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb6:	dc 01       	movw	r26, r24
    1eb8:	cb 01       	movw	r24, r22
    1eba:	9a a3       	std	Y+34, r25	; 0x22
    1ebc:	89 a3       	std	Y+33, r24	; 0x21
    1ebe:	0f c0       	rjmp	.+30     	; 0x1ede <LCD_displayCharacter+0x1d6>
    1ec0:	88 ec       	ldi	r24, 0xC8	; 200
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	98 a3       	std	Y+32, r25	; 0x20
    1ec6:	8f 8f       	std	Y+31, r24	; 0x1f
    1ec8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1eca:	98 a1       	ldd	r25, Y+32	; 0x20
    1ecc:	01 97       	sbiw	r24, 0x01	; 1
    1ece:	f1 f7       	brne	.-4      	; 0x1ecc <LCD_displayCharacter+0x1c4>
    1ed0:	98 a3       	std	Y+32, r25	; 0x20
    1ed2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ed4:	89 a1       	ldd	r24, Y+33	; 0x21
    1ed6:	9a a1       	ldd	r25, Y+34	; 0x22
    1ed8:	01 97       	sbiw	r24, 0x01	; 1
    1eda:	9a a3       	std	Y+34, r25	; 0x22
    1edc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ede:	89 a1       	ldd	r24, Y+33	; 0x21
    1ee0:	9a a1       	ldd	r25, Y+34	; 0x22
    1ee2:	00 97       	sbiw	r24, 0x00	; 0
    1ee4:	69 f7       	brne	.-38     	; 0x1ec0 <LCD_displayCharacter+0x1b8>
    1ee6:	14 c0       	rjmp	.+40     	; 0x1f10 <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ee8:	6b a1       	ldd	r22, Y+35	; 0x23
    1eea:	7c a1       	ldd	r23, Y+36	; 0x24
    1eec:	8d a1       	ldd	r24, Y+37	; 0x25
    1eee:	9e a1       	ldd	r25, Y+38	; 0x26
    1ef0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef4:	dc 01       	movw	r26, r24
    1ef6:	cb 01       	movw	r24, r22
    1ef8:	9a a3       	std	Y+34, r25	; 0x22
    1efa:	89 a3       	std	Y+33, r24	; 0x21
    1efc:	89 a1       	ldd	r24, Y+33	; 0x21
    1efe:	9a a1       	ldd	r25, Y+34	; 0x22
    1f00:	9e 8f       	std	Y+30, r25	; 0x1e
    1f02:	8d 8f       	std	Y+29, r24	; 0x1d
    1f04:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f06:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f08:	01 97       	sbiw	r24, 0x01	; 1
    1f0a:	f1 f7       	brne	.-4      	; 0x1f08 <LCD_displayCharacter+0x200>
    1f0c:	9e 8f       	std	Y+30, r25	; 0x1e
    1f0e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = data; /* out the required data char to the data bus D0 --> D7 */
    1f10:	e5 e3       	ldi	r30, 0x35	; 53
    1f12:	f0 e0       	ldi	r31, 0x00	; 0
    1f14:	89 ad       	ldd	r24, Y+57	; 0x39
    1f16:	80 83       	st	Z, r24
    1f18:	80 e0       	ldi	r24, 0x00	; 0
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	a0 e8       	ldi	r26, 0x80	; 128
    1f1e:	bf e3       	ldi	r27, 0x3F	; 63
    1f20:	89 8f       	std	Y+25, r24	; 0x19
    1f22:	9a 8f       	std	Y+26, r25	; 0x1a
    1f24:	ab 8f       	std	Y+27, r26	; 0x1b
    1f26:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f28:	69 8d       	ldd	r22, Y+25	; 0x19
    1f2a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f30:	20 e0       	ldi	r18, 0x00	; 0
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	4a ef       	ldi	r20, 0xFA	; 250
    1f36:	54 e4       	ldi	r21, 0x44	; 68
    1f38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	cb 01       	movw	r24, r22
    1f40:	8d 8b       	std	Y+21, r24	; 0x15
    1f42:	9e 8b       	std	Y+22, r25	; 0x16
    1f44:	af 8b       	std	Y+23, r26	; 0x17
    1f46:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f48:	6d 89       	ldd	r22, Y+21	; 0x15
    1f4a:	7e 89       	ldd	r23, Y+22	; 0x16
    1f4c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f4e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f50:	20 e0       	ldi	r18, 0x00	; 0
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	40 e8       	ldi	r20, 0x80	; 128
    1f56:	5f e3       	ldi	r21, 0x3F	; 63
    1f58:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f5c:	88 23       	and	r24, r24
    1f5e:	2c f4       	brge	.+10     	; 0x1f6a <LCD_displayCharacter+0x262>
		__ticks = 1;
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	9c 8b       	std	Y+20, r25	; 0x14
    1f66:	8b 8b       	std	Y+19, r24	; 0x13
    1f68:	3f c0       	rjmp	.+126    	; 0x1fe8 <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    1f6a:	6d 89       	ldd	r22, Y+21	; 0x15
    1f6c:	7e 89       	ldd	r23, Y+22	; 0x16
    1f6e:	8f 89       	ldd	r24, Y+23	; 0x17
    1f70:	98 8d       	ldd	r25, Y+24	; 0x18
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	3f ef       	ldi	r19, 0xFF	; 255
    1f76:	4f e7       	ldi	r20, 0x7F	; 127
    1f78:	57 e4       	ldi	r21, 0x47	; 71
    1f7a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f7e:	18 16       	cp	r1, r24
    1f80:	4c f5       	brge	.+82     	; 0x1fd4 <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f82:	69 8d       	ldd	r22, Y+25	; 0x19
    1f84:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f88:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f8a:	20 e0       	ldi	r18, 0x00	; 0
    1f8c:	30 e0       	ldi	r19, 0x00	; 0
    1f8e:	40 e2       	ldi	r20, 0x20	; 32
    1f90:	51 e4       	ldi	r21, 0x41	; 65
    1f92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f96:	dc 01       	movw	r26, r24
    1f98:	cb 01       	movw	r24, r22
    1f9a:	bc 01       	movw	r22, r24
    1f9c:	cd 01       	movw	r24, r26
    1f9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa2:	dc 01       	movw	r26, r24
    1fa4:	cb 01       	movw	r24, r22
    1fa6:	9c 8b       	std	Y+20, r25	; 0x14
    1fa8:	8b 8b       	std	Y+19, r24	; 0x13
    1faa:	0f c0       	rjmp	.+30     	; 0x1fca <LCD_displayCharacter+0x2c2>
    1fac:	88 ec       	ldi	r24, 0xC8	; 200
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	9a 8b       	std	Y+18, r25	; 0x12
    1fb2:	89 8b       	std	Y+17, r24	; 0x11
    1fb4:	89 89       	ldd	r24, Y+17	; 0x11
    1fb6:	9a 89       	ldd	r25, Y+18	; 0x12
    1fb8:	01 97       	sbiw	r24, 0x01	; 1
    1fba:	f1 f7       	brne	.-4      	; 0x1fb8 <LCD_displayCharacter+0x2b0>
    1fbc:	9a 8b       	std	Y+18, r25	; 0x12
    1fbe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fc0:	8b 89       	ldd	r24, Y+19	; 0x13
    1fc2:	9c 89       	ldd	r25, Y+20	; 0x14
    1fc4:	01 97       	sbiw	r24, 0x01	; 1
    1fc6:	9c 8b       	std	Y+20, r25	; 0x14
    1fc8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fca:	8b 89       	ldd	r24, Y+19	; 0x13
    1fcc:	9c 89       	ldd	r25, Y+20	; 0x14
    1fce:	00 97       	sbiw	r24, 0x00	; 0
    1fd0:	69 f7       	brne	.-38     	; 0x1fac <LCD_displayCharacter+0x2a4>
    1fd2:	14 c0       	rjmp	.+40     	; 0x1ffc <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fd4:	6d 89       	ldd	r22, Y+21	; 0x15
    1fd6:	7e 89       	ldd	r23, Y+22	; 0x16
    1fd8:	8f 89       	ldd	r24, Y+23	; 0x17
    1fda:	98 8d       	ldd	r25, Y+24	; 0x18
    1fdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe0:	dc 01       	movw	r26, r24
    1fe2:	cb 01       	movw	r24, r22
    1fe4:	9c 8b       	std	Y+20, r25	; 0x14
    1fe6:	8b 8b       	std	Y+19, r24	; 0x13
    1fe8:	8b 89       	ldd	r24, Y+19	; 0x13
    1fea:	9c 89       	ldd	r25, Y+20	; 0x14
    1fec:	98 8b       	std	Y+16, r25	; 0x10
    1fee:	8f 87       	std	Y+15, r24	; 0x0f
    1ff0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ff2:	98 89       	ldd	r25, Y+16	; 0x10
    1ff4:	01 97       	sbiw	r24, 0x01	; 1
    1ff6:	f1 f7       	brne	.-4      	; 0x1ff4 <LCD_displayCharacter+0x2ec>
    1ff8:	98 8b       	std	Y+16, r25	; 0x10
    1ffa:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1ffc:	a2 e3       	ldi	r26, 0x32	; 50
    1ffe:	b0 e0       	ldi	r27, 0x00	; 0
    2000:	e2 e3       	ldi	r30, 0x32	; 50
    2002:	f0 e0       	ldi	r31, 0x00	; 0
    2004:	80 81       	ld	r24, Z
    2006:	8f 7e       	andi	r24, 0xEF	; 239
    2008:	8c 93       	st	X, r24
    200a:	80 e0       	ldi	r24, 0x00	; 0
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	a0 e8       	ldi	r26, 0x80	; 128
    2010:	bf e3       	ldi	r27, 0x3F	; 63
    2012:	8b 87       	std	Y+11, r24	; 0x0b
    2014:	9c 87       	std	Y+12, r25	; 0x0c
    2016:	ad 87       	std	Y+13, r26	; 0x0d
    2018:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    201a:	6b 85       	ldd	r22, Y+11	; 0x0b
    201c:	7c 85       	ldd	r23, Y+12	; 0x0c
    201e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2020:	9e 85       	ldd	r25, Y+14	; 0x0e
    2022:	20 e0       	ldi	r18, 0x00	; 0
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	4a ef       	ldi	r20, 0xFA	; 250
    2028:	54 e4       	ldi	r21, 0x44	; 68
    202a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    202e:	dc 01       	movw	r26, r24
    2030:	cb 01       	movw	r24, r22
    2032:	8f 83       	std	Y+7, r24	; 0x07
    2034:	98 87       	std	Y+8, r25	; 0x08
    2036:	a9 87       	std	Y+9, r26	; 0x09
    2038:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    203a:	6f 81       	ldd	r22, Y+7	; 0x07
    203c:	78 85       	ldd	r23, Y+8	; 0x08
    203e:	89 85       	ldd	r24, Y+9	; 0x09
    2040:	9a 85       	ldd	r25, Y+10	; 0x0a
    2042:	20 e0       	ldi	r18, 0x00	; 0
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	40 e8       	ldi	r20, 0x80	; 128
    2048:	5f e3       	ldi	r21, 0x3F	; 63
    204a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    204e:	88 23       	and	r24, r24
    2050:	2c f4       	brge	.+10     	; 0x205c <LCD_displayCharacter+0x354>
		__ticks = 1;
    2052:	81 e0       	ldi	r24, 0x01	; 1
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	9e 83       	std	Y+6, r25	; 0x06
    2058:	8d 83       	std	Y+5, r24	; 0x05
    205a:	3f c0       	rjmp	.+126    	; 0x20da <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    205c:	6f 81       	ldd	r22, Y+7	; 0x07
    205e:	78 85       	ldd	r23, Y+8	; 0x08
    2060:	89 85       	ldd	r24, Y+9	; 0x09
    2062:	9a 85       	ldd	r25, Y+10	; 0x0a
    2064:	20 e0       	ldi	r18, 0x00	; 0
    2066:	3f ef       	ldi	r19, 0xFF	; 255
    2068:	4f e7       	ldi	r20, 0x7F	; 127
    206a:	57 e4       	ldi	r21, 0x47	; 71
    206c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2070:	18 16       	cp	r1, r24
    2072:	4c f5       	brge	.+82     	; 0x20c6 <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2074:	6b 85       	ldd	r22, Y+11	; 0x0b
    2076:	7c 85       	ldd	r23, Y+12	; 0x0c
    2078:	8d 85       	ldd	r24, Y+13	; 0x0d
    207a:	9e 85       	ldd	r25, Y+14	; 0x0e
    207c:	20 e0       	ldi	r18, 0x00	; 0
    207e:	30 e0       	ldi	r19, 0x00	; 0
    2080:	40 e2       	ldi	r20, 0x20	; 32
    2082:	51 e4       	ldi	r21, 0x41	; 65
    2084:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2088:	dc 01       	movw	r26, r24
    208a:	cb 01       	movw	r24, r22
    208c:	bc 01       	movw	r22, r24
    208e:	cd 01       	movw	r24, r26
    2090:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2094:	dc 01       	movw	r26, r24
    2096:	cb 01       	movw	r24, r22
    2098:	9e 83       	std	Y+6, r25	; 0x06
    209a:	8d 83       	std	Y+5, r24	; 0x05
    209c:	0f c0       	rjmp	.+30     	; 0x20bc <LCD_displayCharacter+0x3b4>
    209e:	88 ec       	ldi	r24, 0xC8	; 200
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	9c 83       	std	Y+4, r25	; 0x04
    20a4:	8b 83       	std	Y+3, r24	; 0x03
    20a6:	8b 81       	ldd	r24, Y+3	; 0x03
    20a8:	9c 81       	ldd	r25, Y+4	; 0x04
    20aa:	01 97       	sbiw	r24, 0x01	; 1
    20ac:	f1 f7       	brne	.-4      	; 0x20aa <LCD_displayCharacter+0x3a2>
    20ae:	9c 83       	std	Y+4, r25	; 0x04
    20b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20b2:	8d 81       	ldd	r24, Y+5	; 0x05
    20b4:	9e 81       	ldd	r25, Y+6	; 0x06
    20b6:	01 97       	sbiw	r24, 0x01	; 1
    20b8:	9e 83       	std	Y+6, r25	; 0x06
    20ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20bc:	8d 81       	ldd	r24, Y+5	; 0x05
    20be:	9e 81       	ldd	r25, Y+6	; 0x06
    20c0:	00 97       	sbiw	r24, 0x00	; 0
    20c2:	69 f7       	brne	.-38     	; 0x209e <LCD_displayCharacter+0x396>
    20c4:	14 c0       	rjmp	.+40     	; 0x20ee <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20c6:	6f 81       	ldd	r22, Y+7	; 0x07
    20c8:	78 85       	ldd	r23, Y+8	; 0x08
    20ca:	89 85       	ldd	r24, Y+9	; 0x09
    20cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d2:	dc 01       	movw	r26, r24
    20d4:	cb 01       	movw	r24, r22
    20d6:	9e 83       	std	Y+6, r25	; 0x06
    20d8:	8d 83       	std	Y+5, r24	; 0x05
    20da:	8d 81       	ldd	r24, Y+5	; 0x05
    20dc:	9e 81       	ldd	r25, Y+6	; 0x06
    20de:	9a 83       	std	Y+2, r25	; 0x02
    20e0:	89 83       	std	Y+1, r24	; 0x01
    20e2:	89 81       	ldd	r24, Y+1	; 0x01
    20e4:	9a 81       	ldd	r25, Y+2	; 0x02
    20e6:	01 97       	sbiw	r24, 0x01	; 1
    20e8:	f1 f7       	brne	.-4      	; 0x20e6 <LCD_displayCharacter+0x3de>
    20ea:	9a 83       	std	Y+2, r25	; 0x02
    20ec:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */	
}
    20ee:	e9 96       	adiw	r28, 0x39	; 57
    20f0:	0f b6       	in	r0, 0x3f	; 63
    20f2:	f8 94       	cli
    20f4:	de bf       	out	0x3e, r29	; 62
    20f6:	0f be       	out	0x3f, r0	; 63
    20f8:	cd bf       	out	0x3d, r28	; 61
    20fa:	cf 91       	pop	r28
    20fc:	df 91       	pop	r29
    20fe:	08 95       	ret

00002100 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    2100:	df 93       	push	r29
    2102:	cf 93       	push	r28
    2104:	00 d0       	rcall	.+0      	; 0x2106 <LCD_displayString+0x6>
    2106:	0f 92       	push	r0
    2108:	cd b7       	in	r28, 0x3d	; 61
    210a:	de b7       	in	r29, 0x3e	; 62
    210c:	9b 83       	std	Y+3, r25	; 0x03
    210e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2110:	19 82       	std	Y+1, r1	; 0x01
    2112:	0e c0       	rjmp	.+28     	; 0x2130 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2114:	89 81       	ldd	r24, Y+1	; 0x01
    2116:	28 2f       	mov	r18, r24
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	8a 81       	ldd	r24, Y+2	; 0x02
    211c:	9b 81       	ldd	r25, Y+3	; 0x03
    211e:	fc 01       	movw	r30, r24
    2120:	e2 0f       	add	r30, r18
    2122:	f3 1f       	adc	r31, r19
    2124:	80 81       	ld	r24, Z
    2126:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <LCD_displayCharacter>
		i++;
    212a:	89 81       	ldd	r24, Y+1	; 0x01
    212c:	8f 5f       	subi	r24, 0xFF	; 255
    212e:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2130:	89 81       	ldd	r24, Y+1	; 0x01
    2132:	28 2f       	mov	r18, r24
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	8a 81       	ldd	r24, Y+2	; 0x02
    2138:	9b 81       	ldd	r25, Y+3	; 0x03
    213a:	fc 01       	movw	r30, r24
    213c:	e2 0f       	add	r30, r18
    213e:	f3 1f       	adc	r31, r19
    2140:	80 81       	ld	r24, Z
    2142:	88 23       	and	r24, r24
    2144:	39 f7       	brne	.-50     	; 0x2114 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2146:	0f 90       	pop	r0
    2148:	0f 90       	pop	r0
    214a:	0f 90       	pop	r0
    214c:	cf 91       	pop	r28
    214e:	df 91       	pop	r29
    2150:	08 95       	ret

00002152 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    2152:	df 93       	push	r29
    2154:	cf 93       	push	r28
    2156:	00 d0       	rcall	.+0      	; 0x2158 <LCD_goToRowColumn+0x6>
    2158:	00 d0       	rcall	.+0      	; 0x215a <LCD_goToRowColumn+0x8>
    215a:	0f 92       	push	r0
    215c:	cd b7       	in	r28, 0x3d	; 61
    215e:	de b7       	in	r29, 0x3e	; 62
    2160:	8a 83       	std	Y+2, r24	; 0x02
    2162:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    2164:	8a 81       	ldd	r24, Y+2	; 0x02
    2166:	28 2f       	mov	r18, r24
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	3d 83       	std	Y+5, r19	; 0x05
    216c:	2c 83       	std	Y+4, r18	; 0x04
    216e:	8c 81       	ldd	r24, Y+4	; 0x04
    2170:	9d 81       	ldd	r25, Y+5	; 0x05
    2172:	81 30       	cpi	r24, 0x01	; 1
    2174:	91 05       	cpc	r25, r1
    2176:	c1 f0       	breq	.+48     	; 0x21a8 <LCD_goToRowColumn+0x56>
    2178:	2c 81       	ldd	r18, Y+4	; 0x04
    217a:	3d 81       	ldd	r19, Y+5	; 0x05
    217c:	22 30       	cpi	r18, 0x02	; 2
    217e:	31 05       	cpc	r19, r1
    2180:	2c f4       	brge	.+10     	; 0x218c <LCD_goToRowColumn+0x3a>
    2182:	8c 81       	ldd	r24, Y+4	; 0x04
    2184:	9d 81       	ldd	r25, Y+5	; 0x05
    2186:	00 97       	sbiw	r24, 0x00	; 0
    2188:	61 f0       	breq	.+24     	; 0x21a2 <LCD_goToRowColumn+0x50>
    218a:	19 c0       	rjmp	.+50     	; 0x21be <LCD_goToRowColumn+0x6c>
    218c:	2c 81       	ldd	r18, Y+4	; 0x04
    218e:	3d 81       	ldd	r19, Y+5	; 0x05
    2190:	22 30       	cpi	r18, 0x02	; 2
    2192:	31 05       	cpc	r19, r1
    2194:	69 f0       	breq	.+26     	; 0x21b0 <LCD_goToRowColumn+0x5e>
    2196:	8c 81       	ldd	r24, Y+4	; 0x04
    2198:	9d 81       	ldd	r25, Y+5	; 0x05
    219a:	83 30       	cpi	r24, 0x03	; 3
    219c:	91 05       	cpc	r25, r1
    219e:	61 f0       	breq	.+24     	; 0x21b8 <LCD_goToRowColumn+0x66>
    21a0:	0e c0       	rjmp	.+28     	; 0x21be <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    21a2:	8b 81       	ldd	r24, Y+3	; 0x03
    21a4:	89 83       	std	Y+1, r24	; 0x01
    21a6:	0b c0       	rjmp	.+22     	; 0x21be <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    21a8:	8b 81       	ldd	r24, Y+3	; 0x03
    21aa:	80 5c       	subi	r24, 0xC0	; 192
    21ac:	89 83       	std	Y+1, r24	; 0x01
    21ae:	07 c0       	rjmp	.+14     	; 0x21be <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    21b0:	8b 81       	ldd	r24, Y+3	; 0x03
    21b2:	80 5f       	subi	r24, 0xF0	; 240
    21b4:	89 83       	std	Y+1, r24	; 0x01
    21b6:	03 c0       	rjmp	.+6      	; 0x21be <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    21b8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ba:	80 5b       	subi	r24, 0xB0	; 176
    21bc:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    21be:	89 81       	ldd	r24, Y+1	; 0x01
    21c0:	80 68       	ori	r24, 0x80	; 128
    21c2:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_sendCommand>
}
    21c6:	0f 90       	pop	r0
    21c8:	0f 90       	pop	r0
    21ca:	0f 90       	pop	r0
    21cc:	0f 90       	pop	r0
    21ce:	0f 90       	pop	r0
    21d0:	cf 91       	pop	r28
    21d2:	df 91       	pop	r29
    21d4:	08 95       	ret

000021d6 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    21d6:	df 93       	push	r29
    21d8:	cf 93       	push	r28
    21da:	00 d0       	rcall	.+0      	; 0x21dc <LCD_displayStringRowColumn+0x6>
    21dc:	00 d0       	rcall	.+0      	; 0x21de <LCD_displayStringRowColumn+0x8>
    21de:	cd b7       	in	r28, 0x3d	; 61
    21e0:	de b7       	in	r29, 0x3e	; 62
    21e2:	89 83       	std	Y+1, r24	; 0x01
    21e4:	6a 83       	std	Y+2, r22	; 0x02
    21e6:	5c 83       	std	Y+4, r21	; 0x04
    21e8:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    21ea:	89 81       	ldd	r24, Y+1	; 0x01
    21ec:	6a 81       	ldd	r22, Y+2	; 0x02
    21ee:	0e 94 a9 10 	call	0x2152	; 0x2152 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    21f2:	8b 81       	ldd	r24, Y+3	; 0x03
    21f4:	9c 81       	ldd	r25, Y+4	; 0x04
    21f6:	0e 94 80 10 	call	0x2100	; 0x2100 <LCD_displayString>
}
    21fa:	0f 90       	pop	r0
    21fc:	0f 90       	pop	r0
    21fe:	0f 90       	pop	r0
    2200:	0f 90       	pop	r0
    2202:	cf 91       	pop	r28
    2204:	df 91       	pop	r29
    2206:	08 95       	ret

00002208 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    2208:	df 93       	push	r29
    220a:	cf 93       	push	r28
    220c:	cd b7       	in	r28, 0x3d	; 61
    220e:	de b7       	in	r29, 0x3e	; 62
    2210:	62 97       	sbiw	r28, 0x12	; 18
    2212:	0f b6       	in	r0, 0x3f	; 63
    2214:	f8 94       	cli
    2216:	de bf       	out	0x3e, r29	; 62
    2218:	0f be       	out	0x3f, r0	; 63
    221a:	cd bf       	out	0x3d, r28	; 61
    221c:	9a 8b       	std	Y+18, r25	; 0x12
    221e:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    2220:	89 89       	ldd	r24, Y+17	; 0x11
    2222:	9a 89       	ldd	r25, Y+18	; 0x12
    2224:	9e 01       	movw	r18, r28
    2226:	2f 5f       	subi	r18, 0xFF	; 255
    2228:	3f 4f       	sbci	r19, 0xFF	; 255
    222a:	b9 01       	movw	r22, r18
    222c:	4a e0       	ldi	r20, 0x0A	; 10
    222e:	50 e0       	ldi	r21, 0x00	; 0
    2230:	0e 94 92 13 	call	0x2724	; 0x2724 <itoa>
   LCD_displayString(buff);
    2234:	ce 01       	movw	r24, r28
    2236:	01 96       	adiw	r24, 0x01	; 1
    2238:	0e 94 80 10 	call	0x2100	; 0x2100 <LCD_displayString>
}
    223c:	62 96       	adiw	r28, 0x12	; 18
    223e:	0f b6       	in	r0, 0x3f	; 63
    2240:	f8 94       	cli
    2242:	de bf       	out	0x3e, r29	; 62
    2244:	0f be       	out	0x3f, r0	; 63
    2246:	cd bf       	out	0x3d, r28	; 61
    2248:	cf 91       	pop	r28
    224a:	df 91       	pop	r29
    224c:	08 95       	ret

0000224e <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    224e:	df 93       	push	r29
    2250:	cf 93       	push	r28
    2252:	cd b7       	in	r28, 0x3d	; 61
    2254:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    2256:	81 e0       	ldi	r24, 0x01	; 1
    2258:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_sendCommand>
}
    225c:	cf 91       	pop	r28
    225e:	df 91       	pop	r29
    2260:	08 95       	ret

00002262 <__vector_9>:
static volatile void (*g_callBackPtrOvf)(void) = NULL_PTR;
static volatile void (*g_callBackPtrCtc)(void) = NULL_PTR;

/* Interrupt Service Routine for timer0 normal mode */
ISR(TIMER0_OVF_vect)
{
    2262:	1f 92       	push	r1
    2264:	0f 92       	push	r0
    2266:	0f b6       	in	r0, 0x3f	; 63
    2268:	0f 92       	push	r0
    226a:	11 24       	eor	r1, r1
    226c:	2f 93       	push	r18
    226e:	3f 93       	push	r19
    2270:	4f 93       	push	r20
    2272:	5f 93       	push	r21
    2274:	6f 93       	push	r22
    2276:	7f 93       	push	r23
    2278:	8f 93       	push	r24
    227a:	9f 93       	push	r25
    227c:	af 93       	push	r26
    227e:	bf 93       	push	r27
    2280:	ef 93       	push	r30
    2282:	ff 93       	push	r31
    2284:	df 93       	push	r29
    2286:	cf 93       	push	r28
    2288:	cd b7       	in	r28, 0x3d	; 61
    228a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrOvf != NULL_PTR)
    228c:	80 91 78 01 	lds	r24, 0x0178
    2290:	90 91 79 01 	lds	r25, 0x0179
    2294:	00 97       	sbiw	r24, 0x00	; 0
    2296:	29 f0       	breq	.+10     	; 0x22a2 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtrOvf)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2298:	e0 91 78 01 	lds	r30, 0x0178
    229c:	f0 91 79 01 	lds	r31, 0x0179
    22a0:	09 95       	icall
	}
}
    22a2:	cf 91       	pop	r28
    22a4:	df 91       	pop	r29
    22a6:	ff 91       	pop	r31
    22a8:	ef 91       	pop	r30
    22aa:	bf 91       	pop	r27
    22ac:	af 91       	pop	r26
    22ae:	9f 91       	pop	r25
    22b0:	8f 91       	pop	r24
    22b2:	7f 91       	pop	r23
    22b4:	6f 91       	pop	r22
    22b6:	5f 91       	pop	r21
    22b8:	4f 91       	pop	r20
    22ba:	3f 91       	pop	r19
    22bc:	2f 91       	pop	r18
    22be:	0f 90       	pop	r0
    22c0:	0f be       	out	0x3f, r0	; 63
    22c2:	0f 90       	pop	r0
    22c4:	1f 90       	pop	r1
    22c6:	18 95       	reti

000022c8 <__vector_19>:
/* Interrupt Service Routine for timer0 compare mode */
ISR(TIMER0_COMP_vect)
{
    22c8:	1f 92       	push	r1
    22ca:	0f 92       	push	r0
    22cc:	0f b6       	in	r0, 0x3f	; 63
    22ce:	0f 92       	push	r0
    22d0:	11 24       	eor	r1, r1
    22d2:	2f 93       	push	r18
    22d4:	3f 93       	push	r19
    22d6:	4f 93       	push	r20
    22d8:	5f 93       	push	r21
    22da:	6f 93       	push	r22
    22dc:	7f 93       	push	r23
    22de:	8f 93       	push	r24
    22e0:	9f 93       	push	r25
    22e2:	af 93       	push	r26
    22e4:	bf 93       	push	r27
    22e6:	ef 93       	push	r30
    22e8:	ff 93       	push	r31
    22ea:	df 93       	push	r29
    22ec:	cf 93       	push	r28
    22ee:	cd b7       	in	r28, 0x3d	; 61
    22f0:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrCtc != NULL_PTR)
    22f2:	80 91 7a 01 	lds	r24, 0x017A
    22f6:	90 91 7b 01 	lds	r25, 0x017B
    22fa:	00 97       	sbiw	r24, 0x00	; 0
    22fc:	29 f0       	breq	.+10     	; 0x2308 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtrCtc)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    22fe:	e0 91 7a 01 	lds	r30, 0x017A
    2302:	f0 91 7b 01 	lds	r31, 0x017B
    2306:	09 95       	icall
	}
}
    2308:	cf 91       	pop	r28
    230a:	df 91       	pop	r29
    230c:	ff 91       	pop	r31
    230e:	ef 91       	pop	r30
    2310:	bf 91       	pop	r27
    2312:	af 91       	pop	r26
    2314:	9f 91       	pop	r25
    2316:	8f 91       	pop	r24
    2318:	7f 91       	pop	r23
    231a:	6f 91       	pop	r22
    231c:	5f 91       	pop	r21
    231e:	4f 91       	pop	r20
    2320:	3f 91       	pop	r19
    2322:	2f 91       	pop	r18
    2324:	0f 90       	pop	r0
    2326:	0f be       	out	0x3f, r0	; 63
    2328:	0f 90       	pop	r0
    232a:	1f 90       	pop	r1
    232c:	18 95       	reti

0000232e <timer_init>:
void timer_init (const Timer_ConfigType * Config_Ptr)
{
    232e:	df 93       	push	r29
    2330:	cf 93       	push	r28
    2332:	00 d0       	rcall	.+0      	; 0x2334 <timer_init+0x6>
    2334:	cd b7       	in	r28, 0x3d	; 61
    2336:	de b7       	in	r29, 0x3e	; 62
    2338:	9a 83       	std	Y+2, r25	; 0x02
    233a:	89 83       	std	Y+1, r24	; 0x01
	if (Config_Ptr->mode == NORMAL_MODE)
    233c:	e9 81       	ldd	r30, Y+1	; 0x01
    233e:	fa 81       	ldd	r31, Y+2	; 0x02
    2340:	80 81       	ld	r24, Z
    2342:	88 23       	and	r24, r24
    2344:	e9 f4       	brne	.+58     	; 0x2380 <timer_init+0x52>
	{
		TCNT0 = Config_Ptr->initValue ;//Set Timer initial value
    2346:	a2 e5       	ldi	r26, 0x52	; 82
    2348:	b0 e0       	ldi	r27, 0x00	; 0
    234a:	e9 81       	ldd	r30, Y+1	; 0x01
    234c:	fa 81       	ldd	r31, Y+2	; 0x02
    234e:	81 81       	ldd	r24, Z+1	; 0x01
    2350:	8c 93       	st	X, r24
		TIMSK |= (1<<TOIE0);          // Enable Timer0 Overflow Interrupt
    2352:	a9 e5       	ldi	r26, 0x59	; 89
    2354:	b0 e0       	ldi	r27, 0x00	; 0
    2356:	e9 e5       	ldi	r30, 0x59	; 89
    2358:	f0 e0       	ldi	r31, 0x00	; 0
    235a:	80 81       	ld	r24, Z
    235c:	81 60       	ori	r24, 0x01	; 1
    235e:	8c 93       	st	X, r24
		 * 1. Non PWM mode FOC0=1
		 * 2. Normal Mode WGM01=0 & WGM00=0
		 * 3. Normal Mode COM00=0 & COM01=0
		 * 4. clock
		 */
		TCCR0 = (1<<FOC0) ;
    2360:	e3 e5       	ldi	r30, 0x53	; 83
    2362:	f0 e0       	ldi	r31, 0x00	; 0
    2364:	80 e8       	ldi	r24, 0x80	; 128
    2366:	80 83       	st	Z, r24
		TCCR0 = (TCCR0 & 0xF8)|(Config_Ptr->Prescaler);
    2368:	a3 e5       	ldi	r26, 0x53	; 83
    236a:	b0 e0       	ldi	r27, 0x00	; 0
    236c:	e3 e5       	ldi	r30, 0x53	; 83
    236e:	f0 e0       	ldi	r31, 0x00	; 0
    2370:	80 81       	ld	r24, Z
    2372:	98 2f       	mov	r25, r24
    2374:	98 7f       	andi	r25, 0xF8	; 248
    2376:	e9 81       	ldd	r30, Y+1	; 0x01
    2378:	fa 81       	ldd	r31, Y+2	; 0x02
    237a:	82 81       	ldd	r24, Z+2	; 0x02
    237c:	89 2b       	or	r24, r25
    237e:	8c 93       	st	X, r24

	}
	if(Config_Ptr->mode == COMPARE_MODE)
    2380:	e9 81       	ldd	r30, Y+1	; 0x01
    2382:	fa 81       	ldd	r31, Y+2	; 0x02
    2384:	80 81       	ld	r24, Z
    2386:	81 30       	cpi	r24, 0x01	; 1
    2388:	19 f5       	brne	.+70     	; 0x23d0 <timer_init+0xa2>
	{
		TCNT0 = Config_Ptr->initValue;    // Set Timer initial value
    238a:	a2 e5       	ldi	r26, 0x52	; 82
    238c:	b0 e0       	ldi	r27, 0x00	; 0
    238e:	e9 81       	ldd	r30, Y+1	; 0x01
    2390:	fa 81       	ldd	r31, Y+2	; 0x02
    2392:	81 81       	ldd	r24, Z+1	; 0x01
    2394:	8c 93       	st	X, r24
		OCR0  = Config_Ptr->compare;     // Set Compare Value
    2396:	ac e5       	ldi	r26, 0x5C	; 92
    2398:	b0 e0       	ldi	r27, 0x00	; 0
    239a:	e9 81       	ldd	r30, Y+1	; 0x01
    239c:	fa 81       	ldd	r31, Y+2	; 0x02
    239e:	83 81       	ldd	r24, Z+3	; 0x03
    23a0:	8c 93       	st	X, r24
		TIMSK |= (1<<OCIE0);            // Enable Timer0 Compare Interrupt
    23a2:	a9 e5       	ldi	r26, 0x59	; 89
    23a4:	b0 e0       	ldi	r27, 0x00	; 0
    23a6:	e9 e5       	ldi	r30, 0x59	; 89
    23a8:	f0 e0       	ldi	r31, 0x00	; 0
    23aa:	80 81       	ld	r24, Z
    23ac:	82 60       	ori	r24, 0x02	; 2
    23ae:	8c 93       	st	X, r24
		 * 1. Non PWM mode FOC0=1
		 * 2. CTC Mode WGM01=1 & WGM00=0
		 * 3. No need for OC0 in this example so COM00=0 & COM01=0
		 * 4. clock
		 */
		TCCR0 = (1<<FOC0) | (1<<WGM01);
    23b0:	e3 e5       	ldi	r30, 0x53	; 83
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	88 e8       	ldi	r24, 0x88	; 136
    23b6:	80 83       	st	Z, r24
		TCCR0 =(TCCR0 & 0xF8)|(Config_Ptr->Prescaler);
    23b8:	a3 e5       	ldi	r26, 0x53	; 83
    23ba:	b0 e0       	ldi	r27, 0x00	; 0
    23bc:	e3 e5       	ldi	r30, 0x53	; 83
    23be:	f0 e0       	ldi	r31, 0x00	; 0
    23c0:	80 81       	ld	r24, Z
    23c2:	98 2f       	mov	r25, r24
    23c4:	98 7f       	andi	r25, 0xF8	; 248
    23c6:	e9 81       	ldd	r30, Y+1	; 0x01
    23c8:	fa 81       	ldd	r31, Y+2	; 0x02
    23ca:	82 81       	ldd	r24, Z+2	; 0x02
    23cc:	89 2b       	or	r24, r25
    23ce:	8c 93       	st	X, r24
	}
}
    23d0:	0f 90       	pop	r0
    23d2:	0f 90       	pop	r0
    23d4:	cf 91       	pop	r28
    23d6:	df 91       	pop	r29
    23d8:	08 95       	ret

000023da <Ovf_setCallBack>:
/* Description: Function to set the Call Back function address.
*/
void Ovf_setCallBack(void(*a_ptr)(void))
{
    23da:	df 93       	push	r29
    23dc:	cf 93       	push	r28
    23de:	00 d0       	rcall	.+0      	; 0x23e0 <Ovf_setCallBack+0x6>
    23e0:	cd b7       	in	r28, 0x3d	; 61
    23e2:	de b7       	in	r29, 0x3e	; 62
    23e4:	9a 83       	std	Y+2, r25	; 0x02
    23e6:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtrOvf = a_ptr;
    23e8:	89 81       	ldd	r24, Y+1	; 0x01
    23ea:	9a 81       	ldd	r25, Y+2	; 0x02
    23ec:	90 93 79 01 	sts	0x0179, r25
    23f0:	80 93 78 01 	sts	0x0178, r24
}
    23f4:	0f 90       	pop	r0
    23f6:	0f 90       	pop	r0
    23f8:	cf 91       	pop	r28
    23fa:	df 91       	pop	r29
    23fc:	08 95       	ret

000023fe <Ctc_setCallBack>:
/* Description: Function to set the Call Back function address.
*/
void Ctc_setCallBack(void(*a_ptr)(void))
{
    23fe:	df 93       	push	r29
    2400:	cf 93       	push	r28
    2402:	00 d0       	rcall	.+0      	; 0x2404 <Ctc_setCallBack+0x6>
    2404:	cd b7       	in	r28, 0x3d	; 61
    2406:	de b7       	in	r29, 0x3e	; 62
    2408:	9a 83       	std	Y+2, r25	; 0x02
    240a:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtrCtc = a_ptr;
    240c:	89 81       	ldd	r24, Y+1	; 0x01
    240e:	9a 81       	ldd	r25, Y+2	; 0x02
    2410:	90 93 7b 01 	sts	0x017B, r25
    2414:	80 93 7a 01 	sts	0x017A, r24
}
    2418:	0f 90       	pop	r0
    241a:	0f 90       	pop	r0
    241c:	cf 91       	pop	r28
    241e:	df 91       	pop	r29
    2420:	08 95       	ret

00002422 <UART_init>:
#include "uart_driver.h"

//#define BAUD_PRESCALE (((F_CPU / (USART_BAUDRATE * 8UL))) - 1)

void UART_init(const Uart_ConfigType * Config_Ptr)
{
    2422:	df 93       	push	r29
    2424:	cf 93       	push	r28
    2426:	00 d0       	rcall	.+0      	; 0x2428 <UART_init+0x6>
    2428:	00 d0       	rcall	.+0      	; 0x242a <UART_init+0x8>
    242a:	00 d0       	rcall	.+0      	; 0x242c <UART_init+0xa>
    242c:	cd b7       	in	r28, 0x3d	; 61
    242e:	de b7       	in	r29, 0x3e	; 62
    2430:	9e 83       	std	Y+6, r25	; 0x06
    2432:	8d 83       	std	Y+5, r24	; 0x05
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2434:	eb e2       	ldi	r30, 0x2B	; 43
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	82 e0       	ldi	r24, 0x02	; 2
    243a:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2  For data mode
	 * RXB8 & TXB8  used for 9-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    243c:	ea e2       	ldi	r30, 0x2A	; 42
    243e:	f0 e0       	ldi	r31, 0x00	; 0
    2440:	88 e1       	ldi	r24, 0x18	; 24
    2442:	80 83       	st	Z, r24
	UCSRB = (UCSRB & 0xFB)|(Config_Ptr->bits);
    2444:	aa e2       	ldi	r26, 0x2A	; 42
    2446:	b0 e0       	ldi	r27, 0x00	; 0
    2448:	ea e2       	ldi	r30, 0x2A	; 42
    244a:	f0 e0       	ldi	r31, 0x00	; 0
    244c:	80 81       	ld	r24, Z
    244e:	98 2f       	mov	r25, r24
    2450:	9b 7f       	andi	r25, 0xFB	; 251
    2452:	ed 81       	ldd	r30, Y+5	; 0x05
    2454:	fe 81       	ldd	r31, Y+6	; 0x06
    2456:	80 81       	ld	r24, Z
    2458:	89 2b       	or	r24, r25
    245a:	8c 93       	st	X, r24
	 * UPM1:0  for parity bit
	 * USBS    for stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);
    245c:	e0 e4       	ldi	r30, 0x40	; 64
    245e:	f0 e0       	ldi	r31, 0x00	; 0
    2460:	86 e8       	ldi	r24, 0x86	; 134
    2462:	80 83       	st	Z, r24
	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr->parity)<<4);
    2464:	a0 e4       	ldi	r26, 0x40	; 64
    2466:	b0 e0       	ldi	r27, 0x00	; 0
    2468:	e0 e4       	ldi	r30, 0x40	; 64
    246a:	f0 e0       	ldi	r31, 0x00	; 0
    246c:	80 81       	ld	r24, Z
    246e:	28 2f       	mov	r18, r24
    2470:	2f 7c       	andi	r18, 0xCF	; 207
    2472:	ed 81       	ldd	r30, Y+5	; 0x05
    2474:	fe 81       	ldd	r31, Y+6	; 0x06
    2476:	81 81       	ldd	r24, Z+1	; 0x01
    2478:	88 2f       	mov	r24, r24
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	82 95       	swap	r24
    247e:	92 95       	swap	r25
    2480:	90 7f       	andi	r25, 0xF0	; 240
    2482:	98 27       	eor	r25, r24
    2484:	80 7f       	andi	r24, 0xF0	; 240
    2486:	98 27       	eor	r25, r24
    2488:	82 2b       	or	r24, r18
    248a:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr->stop)<<3);
    248c:	a0 e4       	ldi	r26, 0x40	; 64
    248e:	b0 e0       	ldi	r27, 0x00	; 0
    2490:	e0 e4       	ldi	r30, 0x40	; 64
    2492:	f0 e0       	ldi	r31, 0x00	; 0
    2494:	80 81       	ld	r24, Z
    2496:	28 2f       	mov	r18, r24
    2498:	27 7f       	andi	r18, 0xF7	; 247
    249a:	ed 81       	ldd	r30, Y+5	; 0x05
    249c:	fe 81       	ldd	r31, Y+6	; 0x06
    249e:	82 81       	ldd	r24, Z+2	; 0x02
    24a0:	88 2f       	mov	r24, r24
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	88 0f       	add	r24, r24
    24a6:	99 1f       	adc	r25, r25
    24a8:	88 0f       	add	r24, r24
    24aa:	99 1f       	adc	r25, r25
    24ac:	88 0f       	add	r24, r24
    24ae:	99 1f       	adc	r25, r25
    24b0:	82 2b       	or	r24, r18
    24b2:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9) | ((Config_Ptr->bits)<<1);
    24b4:	a0 e4       	ldi	r26, 0x40	; 64
    24b6:	b0 e0       	ldi	r27, 0x00	; 0
    24b8:	e0 e4       	ldi	r30, 0x40	; 64
    24ba:	f0 e0       	ldi	r31, 0x00	; 0
    24bc:	80 81       	ld	r24, Z
    24be:	28 2f       	mov	r18, r24
    24c0:	29 7f       	andi	r18, 0xF9	; 249
    24c2:	ed 81       	ldd	r30, Y+5	; 0x05
    24c4:	fe 81       	ldd	r31, Y+6	; 0x06
    24c6:	80 81       	ld	r24, Z
    24c8:	88 2f       	mov	r24, r24
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	88 0f       	add	r24, r24
    24ce:	99 1f       	adc	r25, r25
    24d0:	82 2b       	or	r24, r18
    24d2:	8c 93       	st	X, r24

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	unsigned long int baudPrescale;
	baudPrescale = (((F_CPU / ((Config_Ptr->baud)* 8UL))) - 1) ;
    24d4:	ed 81       	ldd	r30, Y+5	; 0x05
    24d6:	fe 81       	ldd	r31, Y+6	; 0x06
    24d8:	83 81       	ldd	r24, Z+3	; 0x03
    24da:	94 81       	ldd	r25, Z+4	; 0x04
    24dc:	a5 81       	ldd	r26, Z+5	; 0x05
    24de:	b6 81       	ldd	r27, Z+6	; 0x06
    24e0:	88 0f       	add	r24, r24
    24e2:	99 1f       	adc	r25, r25
    24e4:	aa 1f       	adc	r26, r26
    24e6:	bb 1f       	adc	r27, r27
    24e8:	88 0f       	add	r24, r24
    24ea:	99 1f       	adc	r25, r25
    24ec:	aa 1f       	adc	r26, r26
    24ee:	bb 1f       	adc	r27, r27
    24f0:	88 0f       	add	r24, r24
    24f2:	99 1f       	adc	r25, r25
    24f4:	aa 1f       	adc	r26, r26
    24f6:	bb 1f       	adc	r27, r27
    24f8:	9c 01       	movw	r18, r24
    24fa:	ad 01       	movw	r20, r26
    24fc:	80 e0       	ldi	r24, 0x00	; 0
    24fe:	92 e1       	ldi	r25, 0x12	; 18
    2500:	aa e7       	ldi	r26, 0x7A	; 122
    2502:	b0 e0       	ldi	r27, 0x00	; 0
    2504:	bc 01       	movw	r22, r24
    2506:	cd 01       	movw	r24, r26
    2508:	0e 94 39 13 	call	0x2672	; 0x2672 <__udivmodsi4>
    250c:	da 01       	movw	r26, r20
    250e:	c9 01       	movw	r24, r18
    2510:	01 97       	sbiw	r24, 0x01	; 1
    2512:	a1 09       	sbc	r26, r1
    2514:	b1 09       	sbc	r27, r1
    2516:	89 83       	std	Y+1, r24	; 0x01
    2518:	9a 83       	std	Y+2, r25	; 0x02
    251a:	ab 83       	std	Y+3, r26	; 0x03
    251c:	bc 83       	std	Y+4, r27	; 0x04
	UBRRH = (baudPrescale >> 8);
    251e:	e0 e4       	ldi	r30, 0x40	; 64
    2520:	f0 e0       	ldi	r31, 0x00	; 0
    2522:	89 81       	ldd	r24, Y+1	; 0x01
    2524:	9a 81       	ldd	r25, Y+2	; 0x02
    2526:	ab 81       	ldd	r26, Y+3	; 0x03
    2528:	bc 81       	ldd	r27, Y+4	; 0x04
    252a:	89 2f       	mov	r24, r25
    252c:	9a 2f       	mov	r25, r26
    252e:	ab 2f       	mov	r26, r27
    2530:	bb 27       	eor	r27, r27
    2532:	80 83       	st	Z, r24
	UBRRL = baudPrescale;
    2534:	e9 e2       	ldi	r30, 0x29	; 41
    2536:	f0 e0       	ldi	r31, 0x00	; 0
    2538:	89 81       	ldd	r24, Y+1	; 0x01
    253a:	80 83       	st	Z, r24
}
    253c:	26 96       	adiw	r28, 0x06	; 6
    253e:	0f b6       	in	r0, 0x3f	; 63
    2540:	f8 94       	cli
    2542:	de bf       	out	0x3e, r29	; 62
    2544:	0f be       	out	0x3f, r0	; 63
    2546:	cd bf       	out	0x3d, r28	; 61
    2548:	cf 91       	pop	r28
    254a:	df 91       	pop	r29
    254c:	08 95       	ret

0000254e <UART_sendByte>:

void UART_sendByte(const uint8 data)
{
    254e:	df 93       	push	r29
    2550:	cf 93       	push	r28
    2552:	0f 92       	push	r0
    2554:	cd b7       	in	r28, 0x3d	; 61
    2556:	de b7       	in	r29, 0x3e	; 62
    2558:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    255a:	eb e2       	ldi	r30, 0x2B	; 43
    255c:	f0 e0       	ldi	r31, 0x00	; 0
    255e:	80 81       	ld	r24, Z
    2560:	88 2f       	mov	r24, r24
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	80 72       	andi	r24, 0x20	; 32
    2566:	90 70       	andi	r25, 0x00	; 0
    2568:	00 97       	sbiw	r24, 0x00	; 0
    256a:	b9 f3       	breq	.-18     	; 0x255a <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now */
	UDR = data;
    256c:	ec e2       	ldi	r30, 0x2C	; 44
    256e:	f0 e0       	ldi	r31, 0x00	; 0
    2570:	89 81       	ldd	r24, Y+1	; 0x01
    2572:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2574:	0f 90       	pop	r0
    2576:	cf 91       	pop	r28
    2578:	df 91       	pop	r29
    257a:	08 95       	ret

0000257c <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    257c:	df 93       	push	r29
    257e:	cf 93       	push	r28
    2580:	cd b7       	in	r28, 0x3d	; 61
    2582:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2584:	eb e2       	ldi	r30, 0x2B	; 43
    2586:	f0 e0       	ldi	r31, 0x00	; 0
    2588:	80 81       	ld	r24, Z
    258a:	88 23       	and	r24, r24
    258c:	dc f7       	brge	.-10     	; 0x2584 <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag
	   will be cleared after read this data */
    return UDR;
    258e:	ec e2       	ldi	r30, 0x2C	; 44
    2590:	f0 e0       	ldi	r31, 0x00	; 0
    2592:	80 81       	ld	r24, Z
}
    2594:	cf 91       	pop	r28
    2596:	df 91       	pop	r29
    2598:	08 95       	ret

0000259a <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    259a:	df 93       	push	r29
    259c:	cf 93       	push	r28
    259e:	00 d0       	rcall	.+0      	; 0x25a0 <UART_sendString+0x6>
    25a0:	0f 92       	push	r0
    25a2:	cd b7       	in	r28, 0x3d	; 61
    25a4:	de b7       	in	r29, 0x3e	; 62
    25a6:	9b 83       	std	Y+3, r25	; 0x03
    25a8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    25aa:	19 82       	std	Y+1, r1	; 0x01
    25ac:	0e c0       	rjmp	.+28     	; 0x25ca <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    25ae:	89 81       	ldd	r24, Y+1	; 0x01
    25b0:	28 2f       	mov	r18, r24
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	8a 81       	ldd	r24, Y+2	; 0x02
    25b6:	9b 81       	ldd	r25, Y+3	; 0x03
    25b8:	fc 01       	movw	r30, r24
    25ba:	e2 0f       	add	r30, r18
    25bc:	f3 1f       	adc	r31, r19
    25be:	80 81       	ld	r24, Z
    25c0:	0e 94 a7 12 	call	0x254e	; 0x254e <UART_sendByte>
		i++;
    25c4:	89 81       	ldd	r24, Y+1	; 0x01
    25c6:	8f 5f       	subi	r24, 0xFF	; 255
    25c8:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    25ca:	89 81       	ldd	r24, Y+1	; 0x01
    25cc:	28 2f       	mov	r18, r24
    25ce:	30 e0       	ldi	r19, 0x00	; 0
    25d0:	8a 81       	ldd	r24, Y+2	; 0x02
    25d2:	9b 81       	ldd	r25, Y+3	; 0x03
    25d4:	fc 01       	movw	r30, r24
    25d6:	e2 0f       	add	r30, r18
    25d8:	f3 1f       	adc	r31, r19
    25da:	80 81       	ld	r24, Z
    25dc:	88 23       	and	r24, r24
    25de:	39 f7       	brne	.-50     	; 0x25ae <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    25e0:	0f 90       	pop	r0
    25e2:	0f 90       	pop	r0
    25e4:	0f 90       	pop	r0
    25e6:	cf 91       	pop	r28
    25e8:	df 91       	pop	r29
    25ea:	08 95       	ret

000025ec <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    25ec:	0f 93       	push	r16
    25ee:	1f 93       	push	r17
    25f0:	df 93       	push	r29
    25f2:	cf 93       	push	r28
    25f4:	00 d0       	rcall	.+0      	; 0x25f6 <UART_receiveString+0xa>
    25f6:	0f 92       	push	r0
    25f8:	cd b7       	in	r28, 0x3d	; 61
    25fa:	de b7       	in	r29, 0x3e	; 62
    25fc:	9b 83       	std	Y+3, r25	; 0x03
    25fe:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2600:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    2602:	89 81       	ldd	r24, Y+1	; 0x01
    2604:	28 2f       	mov	r18, r24
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	8a 81       	ldd	r24, Y+2	; 0x02
    260a:	9b 81       	ldd	r25, Y+3	; 0x03
    260c:	8c 01       	movw	r16, r24
    260e:	02 0f       	add	r16, r18
    2610:	13 1f       	adc	r17, r19
    2612:	0e 94 be 12 	call	0x257c	; 0x257c <UART_recieveByte>
    2616:	f8 01       	movw	r30, r16
    2618:	80 83       	st	Z, r24
    261a:	0f c0       	rjmp	.+30     	; 0x263a <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    261c:	89 81       	ldd	r24, Y+1	; 0x01
    261e:	8f 5f       	subi	r24, 0xFF	; 255
    2620:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2622:	89 81       	ldd	r24, Y+1	; 0x01
    2624:	28 2f       	mov	r18, r24
    2626:	30 e0       	ldi	r19, 0x00	; 0
    2628:	8a 81       	ldd	r24, Y+2	; 0x02
    262a:	9b 81       	ldd	r25, Y+3	; 0x03
    262c:	8c 01       	movw	r16, r24
    262e:	02 0f       	add	r16, r18
    2630:	13 1f       	adc	r17, r19
    2632:	0e 94 be 12 	call	0x257c	; 0x257c <UART_recieveByte>
    2636:	f8 01       	movw	r30, r16
    2638:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    263a:	89 81       	ldd	r24, Y+1	; 0x01
    263c:	28 2f       	mov	r18, r24
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	8a 81       	ldd	r24, Y+2	; 0x02
    2642:	9b 81       	ldd	r25, Y+3	; 0x03
    2644:	fc 01       	movw	r30, r24
    2646:	e2 0f       	add	r30, r18
    2648:	f3 1f       	adc	r31, r19
    264a:	80 81       	ld	r24, Z
    264c:	83 32       	cpi	r24, 0x23	; 35
    264e:	31 f7       	brne	.-52     	; 0x261c <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    2650:	89 81       	ldd	r24, Y+1	; 0x01
    2652:	28 2f       	mov	r18, r24
    2654:	30 e0       	ldi	r19, 0x00	; 0
    2656:	8a 81       	ldd	r24, Y+2	; 0x02
    2658:	9b 81       	ldd	r25, Y+3	; 0x03
    265a:	fc 01       	movw	r30, r24
    265c:	e2 0f       	add	r30, r18
    265e:	f3 1f       	adc	r31, r19
    2660:	10 82       	st	Z, r1
}
    2662:	0f 90       	pop	r0
    2664:	0f 90       	pop	r0
    2666:	0f 90       	pop	r0
    2668:	cf 91       	pop	r28
    266a:	df 91       	pop	r29
    266c:	1f 91       	pop	r17
    266e:	0f 91       	pop	r16
    2670:	08 95       	ret

00002672 <__udivmodsi4>:
    2672:	a1 e2       	ldi	r26, 0x21	; 33
    2674:	1a 2e       	mov	r1, r26
    2676:	aa 1b       	sub	r26, r26
    2678:	bb 1b       	sub	r27, r27
    267a:	fd 01       	movw	r30, r26
    267c:	0d c0       	rjmp	.+26     	; 0x2698 <__udivmodsi4_ep>

0000267e <__udivmodsi4_loop>:
    267e:	aa 1f       	adc	r26, r26
    2680:	bb 1f       	adc	r27, r27
    2682:	ee 1f       	adc	r30, r30
    2684:	ff 1f       	adc	r31, r31
    2686:	a2 17       	cp	r26, r18
    2688:	b3 07       	cpc	r27, r19
    268a:	e4 07       	cpc	r30, r20
    268c:	f5 07       	cpc	r31, r21
    268e:	20 f0       	brcs	.+8      	; 0x2698 <__udivmodsi4_ep>
    2690:	a2 1b       	sub	r26, r18
    2692:	b3 0b       	sbc	r27, r19
    2694:	e4 0b       	sbc	r30, r20
    2696:	f5 0b       	sbc	r31, r21

00002698 <__udivmodsi4_ep>:
    2698:	66 1f       	adc	r22, r22
    269a:	77 1f       	adc	r23, r23
    269c:	88 1f       	adc	r24, r24
    269e:	99 1f       	adc	r25, r25
    26a0:	1a 94       	dec	r1
    26a2:	69 f7       	brne	.-38     	; 0x267e <__udivmodsi4_loop>
    26a4:	60 95       	com	r22
    26a6:	70 95       	com	r23
    26a8:	80 95       	com	r24
    26aa:	90 95       	com	r25
    26ac:	9b 01       	movw	r18, r22
    26ae:	ac 01       	movw	r20, r24
    26b0:	bd 01       	movw	r22, r26
    26b2:	cf 01       	movw	r24, r30
    26b4:	08 95       	ret

000026b6 <__prologue_saves__>:
    26b6:	2f 92       	push	r2
    26b8:	3f 92       	push	r3
    26ba:	4f 92       	push	r4
    26bc:	5f 92       	push	r5
    26be:	6f 92       	push	r6
    26c0:	7f 92       	push	r7
    26c2:	8f 92       	push	r8
    26c4:	9f 92       	push	r9
    26c6:	af 92       	push	r10
    26c8:	bf 92       	push	r11
    26ca:	cf 92       	push	r12
    26cc:	df 92       	push	r13
    26ce:	ef 92       	push	r14
    26d0:	ff 92       	push	r15
    26d2:	0f 93       	push	r16
    26d4:	1f 93       	push	r17
    26d6:	cf 93       	push	r28
    26d8:	df 93       	push	r29
    26da:	cd b7       	in	r28, 0x3d	; 61
    26dc:	de b7       	in	r29, 0x3e	; 62
    26de:	ca 1b       	sub	r28, r26
    26e0:	db 0b       	sbc	r29, r27
    26e2:	0f b6       	in	r0, 0x3f	; 63
    26e4:	f8 94       	cli
    26e6:	de bf       	out	0x3e, r29	; 62
    26e8:	0f be       	out	0x3f, r0	; 63
    26ea:	cd bf       	out	0x3d, r28	; 61
    26ec:	09 94       	ijmp

000026ee <__epilogue_restores__>:
    26ee:	2a 88       	ldd	r2, Y+18	; 0x12
    26f0:	39 88       	ldd	r3, Y+17	; 0x11
    26f2:	48 88       	ldd	r4, Y+16	; 0x10
    26f4:	5f 84       	ldd	r5, Y+15	; 0x0f
    26f6:	6e 84       	ldd	r6, Y+14	; 0x0e
    26f8:	7d 84       	ldd	r7, Y+13	; 0x0d
    26fa:	8c 84       	ldd	r8, Y+12	; 0x0c
    26fc:	9b 84       	ldd	r9, Y+11	; 0x0b
    26fe:	aa 84       	ldd	r10, Y+10	; 0x0a
    2700:	b9 84       	ldd	r11, Y+9	; 0x09
    2702:	c8 84       	ldd	r12, Y+8	; 0x08
    2704:	df 80       	ldd	r13, Y+7	; 0x07
    2706:	ee 80       	ldd	r14, Y+6	; 0x06
    2708:	fd 80       	ldd	r15, Y+5	; 0x05
    270a:	0c 81       	ldd	r16, Y+4	; 0x04
    270c:	1b 81       	ldd	r17, Y+3	; 0x03
    270e:	aa 81       	ldd	r26, Y+2	; 0x02
    2710:	b9 81       	ldd	r27, Y+1	; 0x01
    2712:	ce 0f       	add	r28, r30
    2714:	d1 1d       	adc	r29, r1
    2716:	0f b6       	in	r0, 0x3f	; 63
    2718:	f8 94       	cli
    271a:	de bf       	out	0x3e, r29	; 62
    271c:	0f be       	out	0x3f, r0	; 63
    271e:	cd bf       	out	0x3d, r28	; 61
    2720:	ed 01       	movw	r28, r26
    2722:	08 95       	ret

00002724 <itoa>:
    2724:	fb 01       	movw	r30, r22
    2726:	9f 01       	movw	r18, r30
    2728:	e8 94       	clt
    272a:	42 30       	cpi	r20, 0x02	; 2
    272c:	c4 f0       	brlt	.+48     	; 0x275e <itoa+0x3a>
    272e:	45 32       	cpi	r20, 0x25	; 37
    2730:	b4 f4       	brge	.+44     	; 0x275e <itoa+0x3a>
    2732:	4a 30       	cpi	r20, 0x0A	; 10
    2734:	29 f4       	brne	.+10     	; 0x2740 <itoa+0x1c>
    2736:	97 fb       	bst	r25, 7
    2738:	1e f4       	brtc	.+6      	; 0x2740 <itoa+0x1c>
    273a:	90 95       	com	r25
    273c:	81 95       	neg	r24
    273e:	9f 4f       	sbci	r25, 0xFF	; 255
    2740:	64 2f       	mov	r22, r20
    2742:	77 27       	eor	r23, r23
    2744:	0e 94 c3 13 	call	0x2786	; 0x2786 <__udivmodhi4>
    2748:	80 5d       	subi	r24, 0xD0	; 208
    274a:	8a 33       	cpi	r24, 0x3A	; 58
    274c:	0c f0       	brlt	.+2      	; 0x2750 <itoa+0x2c>
    274e:	89 5d       	subi	r24, 0xD9	; 217
    2750:	81 93       	st	Z+, r24
    2752:	cb 01       	movw	r24, r22
    2754:	00 97       	sbiw	r24, 0x00	; 0
    2756:	a1 f7       	brne	.-24     	; 0x2740 <itoa+0x1c>
    2758:	16 f4       	brtc	.+4      	; 0x275e <itoa+0x3a>
    275a:	5d e2       	ldi	r21, 0x2D	; 45
    275c:	51 93       	st	Z+, r21
    275e:	10 82       	st	Z, r1
    2760:	c9 01       	movw	r24, r18
    2762:	0c 94 b3 13 	jmp	0x2766	; 0x2766 <strrev>

00002766 <strrev>:
    2766:	dc 01       	movw	r26, r24
    2768:	fc 01       	movw	r30, r24
    276a:	67 2f       	mov	r22, r23
    276c:	71 91       	ld	r23, Z+
    276e:	77 23       	and	r23, r23
    2770:	e1 f7       	brne	.-8      	; 0x276a <strrev+0x4>
    2772:	32 97       	sbiw	r30, 0x02	; 2
    2774:	04 c0       	rjmp	.+8      	; 0x277e <strrev+0x18>
    2776:	7c 91       	ld	r23, X
    2778:	6d 93       	st	X+, r22
    277a:	70 83       	st	Z, r23
    277c:	62 91       	ld	r22, -Z
    277e:	ae 17       	cp	r26, r30
    2780:	bf 07       	cpc	r27, r31
    2782:	c8 f3       	brcs	.-14     	; 0x2776 <strrev+0x10>
    2784:	08 95       	ret

00002786 <__udivmodhi4>:
    2786:	aa 1b       	sub	r26, r26
    2788:	bb 1b       	sub	r27, r27
    278a:	51 e1       	ldi	r21, 0x11	; 17
    278c:	07 c0       	rjmp	.+14     	; 0x279c <__udivmodhi4_ep>

0000278e <__udivmodhi4_loop>:
    278e:	aa 1f       	adc	r26, r26
    2790:	bb 1f       	adc	r27, r27
    2792:	a6 17       	cp	r26, r22
    2794:	b7 07       	cpc	r27, r23
    2796:	10 f0       	brcs	.+4      	; 0x279c <__udivmodhi4_ep>
    2798:	a6 1b       	sub	r26, r22
    279a:	b7 0b       	sbc	r27, r23

0000279c <__udivmodhi4_ep>:
    279c:	88 1f       	adc	r24, r24
    279e:	99 1f       	adc	r25, r25
    27a0:	5a 95       	dec	r21
    27a2:	a9 f7       	brne	.-22     	; 0x278e <__udivmodhi4_loop>
    27a4:	80 95       	com	r24
    27a6:	90 95       	com	r25
    27a8:	bc 01       	movw	r22, r24
    27aa:	cd 01       	movw	r24, r26
    27ac:	08 95       	ret

000027ae <_exit>:
    27ae:	f8 94       	cli

000027b0 <__stop_program>:
    27b0:	ff cf       	rjmp	.-2      	; 0x27b0 <__stop_program>
