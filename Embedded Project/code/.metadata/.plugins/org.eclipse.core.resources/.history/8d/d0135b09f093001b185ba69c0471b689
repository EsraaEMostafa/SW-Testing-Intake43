/*
 * MC1.c
 *
 *  Created on:27/3þ/2021
 *      Author: Esraa Ebrahim
 */

#include "lcd.h"
#include "keypad.h"
#include "uart_driver.h"
#include "timer_driver.h"

#define MATCH 1
#define UNMATCH 0
#define NUMBER  5
#define ENTER 13
#define EMPTY '#'
#define READY 'R'
#define PLUS '+'
#define MINUS '-'
#define DELAY 15
#define STOP 3
#define MIN 60
#define NUMBER_OF_OVERFLOWS_PER_SECOND 32
#define BLOCK 3

/* global variable contain the ticks count of the timer */
uint8 g_ovfTick = 0;
uint8 g_ovfSec = 0;

/* function to get the password from keypad and send it to the second micro */
void sendReceive (void)
{
	/* local variables */
	uint8 i , enter;
	uint8 pass [i] ;
	/* for to get the pass from the keypad*/
	for (i=0;i<NUMBER;i++)
	{
		pass [i]=KeyPad_getPressedKey();
		LCD_displayStringRowColumn(1,i,"*");
		_delay_ms (100);
	}
	/* get enter to continue */
	enter = KeyPad_getPressedKey();
	while (enter != ENTER)
		enter = KeyPad_getPressedKey();
	if (enter == ENTER)
	{
		/* send the pass to the second micro*/
		for (i=0;i<NUMBER;i++)
		{
			UART_sendByte(pass [i]);
		}
	}
}
/* call back function*/
void App_program (void){
	/*g_ovfTick increase every call */
	g_ovfTick ++ ;
	if (g_ovfTick  == NUMBER_OF_OVERFLOWS_PER_SECOND)
	{
		g_ovfSec ++ ;
		g_ovfTick = 0 ;
	}
}
/*void App_Ctcprogram (void)
{
	g_ctcTick ++ ;
	if (g_ctcTick  == NUMBER_OF_OVERFLOWS_PER_SECOND)
		{
		    g_ctcTick =0 ;
		    g_ctcSec ++ ;
		}
}
*/
uint8 unmatch ;
/* function if the pass unmatched 3 times*/
void tryAgain (void)
{
	/* static local variable to count*/
	static uint8 block = 1 ;
	unmatch = UNMATCH ; // initial value
	/* to get the pass 2 times if still unmatched   */
	while (( block < BLOCK)&& (unmatch == UNMATCH))
	{
		/*increase the block*/
		block ++ ;
		LCD_clearScreen();
		LCD_displayString("please try again !");
		sendReceive ();
		unmatch = UART_recieveByte();
		LCD_displayStringRowColumn(1,4,"");
	    LCD_intgerToString(block);
	    _delay_ms (200);
	}
	if (block == 3)
	{
		LCD_clearScreen();
		LCD_displayString("system locked !");
		g_ovfSec = 0;
	    while(g_ovfSec < MIN) ;
	}
	block = 0 ;
}

int main ()
{
	Timer_ConfigType Timer_Config = {NORMAL,0,CLOCK_1024};
	//Timer_ConfigType Ctc_Timer_Config = {COMPARE,0,CLOCK_1024,255};
	Ovf_setCallBack(App_program);
	timer_init(&Timer_Config); //start the timer.

	Uart_ConfigType Uart_Config = {BIT_8,DISABLED,BIT_1,BAUD_9600};
	UART_init(&Uart_Config);
	LCD_init();
	SREG  |= (1<<7);    //Enable global interrupts in MC by setting the I-Bit.

	uint8 match = 10, option , change =10 , open = 10  ;

	LCD_displayStringRowColumn(0,4,"Door locker");
	LCD_displayStringRowColumn(1,4,"welcome");
	_delay_ms (200);

    while (1)
    {
    	if ((match == MATCH))
		{
		   LCD_clearScreen();
		   LCD_displayString("+ : Change password");
		   LCD_displayStringRowColumn(1,0,"- : Open Door");
		   option = KeyPad_getPressedKey() ;
		   UART_sendByte(option);

	       if (option == PLUS )
	       {
		     LCD_clearScreen();
		     LCD_displayString("Please enter old password");
		     sendReceive ();
		     change = UART_recieveByte();
		     LCD_clearScreen();
		     if (change == UNMATCH)
	         {
			     LCD_displayString("unMatched");
			     _delay_ms (200);
			     LCD_intgerToString(change);
			     match = MATCH ;
			     //enter = KeyPad_getPressedKey();
			     continue ;
		     }
		   else if (change == MATCH)
		  {
			  LCD_displayString("Matched");
			  _delay_ms (200);
			  LCD_intgerToString(change);
			  match = MATCH ;
		  }
		}
	    if ((option == MINUS))
	    {
		   LCD_clearScreen();
		   LCD_displayString("Please enter the password");
		   sendReceive ();
		   open = UART_recieveByte();
		   LCD_clearScreen();
		   if (open == MATCH)
		   {
			   LCD_displayString("Door is unlocking....");
			   g_ovfSec = 0;
			   while(g_ovfSec < DELAY+STOP)
			   {
				   LCD_clearScreen();
				   LCD_intgerToString(g_ovfSec);
				   LCD_displayStringRowColumn(1,0,"");
				   LCD_intgerToString(g_ovfTick);
			   }
			   g_ovfSec = 0;
			   LCD_clearScreen();
			   LCD_displayString("Door is locking....");

			   while(g_ovfSec < DELAY)
			   {

				   LCD_clearScreen();
				   LCD_intgerToString(g_ovfSec);
				   LCD_displayStringRowColumn(1,0,"");
				   LCD_intgerToString(g_ovfTick);

			   }
			   g_ovfSec = 0;
			   match = MATCH ;
			   LCD_displayString("enough ....");
			   continue ;
		   }
		   else if (open == UNMATCH)
		   {
			   LCD_displayString("UnMatched");
			   _delay_ms (100);
			   tryAgain ();
			   if (unmatch == MATCH)
			   {
				   LCD_displayString("Door is unlocking....");
				   g_ovfSec = 0;
				   while(g_ovfSec < DELAY+STOP)
				   {
					   LCD_clearScreen();
					   LCD_intgerToString(g_ovfSec);
					   LCD_displayStringRowColumn(1,0,"");
					   LCD_intgerToString(g_ovfTick);
				   }
				   g_ovfSec = 0;
				   LCD_clearScreen();
				   LCD_displayString("Door is locking....");

				   while(g_ovfSec < DELAY)
				   {

					   LCD_clearScreen();
					   LCD_intgerToString(g_ovfSec);
					   LCD_displayStringRowColumn(1,0,"");
					   LCD_intgerToString(g_ovfTick);

				   }
				   g_ovfSec = 0;
				   match = MATCH ;
				   LCD_displayString("enough ....");
				   continue ;
			   }
			   else if (unmatch == UNMATCH)
			   {
				  match = UNMATCH ;
			   }
		   }

	   }
	}
    	// step 1
    	if ((change == MATCH)||(match == UNMATCH) || (UART_recieveByte() == READY))
    	{
    		LCD_clearScreen();
    		LCD_displayString("Please Enter New Pass");
    		sendReceive ();
    		LCD_clearScreen();
    		LCD_displayString("Please Re-Enter same Pass");
    		sendReceive ();
    		match = UART_recieveByte();
    		LCD_clearScreen();

    		if (match == UNMATCH)
    	    {
    		     LCD_displayString("UnMatched");
    		     _delay_ms (200);
    		}
    		else if (match == MATCH)
			{
				 LCD_displayString("Matched");
				 _delay_ms (200);
			}
    	}
    	//step 2

}
}
