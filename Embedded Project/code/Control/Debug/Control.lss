
Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f56  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00001f56  00001fea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800076  00800076  00002000  2**0
                  ALLOC
  3 .stab         00001c8c  00000000  00000000  00002000  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001055  00000000  00000000  00003c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004ce1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004e21  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004f91  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006bda  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007ac5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008874  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000089d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008c61  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000942f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 48 0d 	jmp	0x1a90	; 0x1a90 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 7b 0d 	jmp	0x1af6	; 0x1af6 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e5       	ldi	r30, 0x56	; 86
      68:	ff e1       	ldi	r31, 0x1F	; 31
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 37       	cpi	r26, 0x7C	; 124
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ba 05 	call	0xb74	; 0xb74 <main>
      8a:	0c 94 a9 0f 	jmp	0x1f52	; 0x1f52 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 8e 0f 	jmp	0x1f1c	; 0x1f1c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 7e 0f 	jmp	0x1efc	; 0x1efc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9a 0f 	jmp	0x1f34	; 0x1f34 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 7e 0f 	jmp	0x1efc	; 0x1efc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9a 0f 	jmp	0x1f34	; 0x1f34 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 8e 0f 	jmp	0x1f1c	; 0x1f1c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7e 0f 	jmp	0x1efc	; 0x1efc <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 9a 0f 	jmp	0x1f34	; 0x1f34 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 7e 0f 	jmp	0x1efc	; 0x1efc <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 9a 0f 	jmp	0x1f34	; 0x1f34 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 7e 0f 	jmp	0x1efc	; 0x1efc <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 9a 0f 	jmp	0x1f34	; 0x1f34 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 82 0f 	jmp	0x1f04	; 0x1f04 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 9e 0f 	jmp	0x1f3c	; 0x1f3c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <App_program>:
//uint8 g_ctcTick = 0;
uint8 g_ovfSec = 0;
//uint16 g_ctcSec = 0;

/* call back function for normal mode*/
void App_program (void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/*g_ovfTick increase every call */
	g_ovfTick ++ ;
     b4e:	80 91 76 00 	lds	r24, 0x0076
     b52:	8f 5f       	subi	r24, 0xFF	; 255
     b54:	80 93 76 00 	sts	0x0076, r24
	if (g_ovfTick  == NUMBER_OF_OVERFLOWS_PER_SECOND)
     b58:	80 91 76 00 	lds	r24, 0x0076
     b5c:	80 32       	cpi	r24, 0x20	; 32
     b5e:	39 f4       	brne	.+14     	; 0xb6e <App_program+0x28>
	{
		g_ovfSec ++ ;
     b60:	80 91 77 00 	lds	r24, 0x0077
     b64:	8f 5f       	subi	r24, 0xFF	; 255
     b66:	80 93 77 00 	sts	0x0077, r24
		g_ovfTick=0 ;
     b6a:	10 92 76 00 	sts	0x0076, r1
	}
}
     b6e:	cf 91       	pop	r28
     b70:	df 91       	pop	r29
     b72:	08 95       	ret

00000b74 <main>:
		}
}
*/

int main()
{
     b74:	0f 93       	push	r16
     b76:	1f 93       	push	r17
     b78:	df 93       	push	r29
     b7a:	cf 93       	push	r28
     b7c:	cd b7       	in	r28, 0x3d	; 61
     b7e:	de b7       	in	r29, 0x3e	; 62
     b80:	c9 56       	subi	r28, 0x69	; 105
     b82:	d0 40       	sbci	r29, 0x00	; 0
     b84:	0f b6       	in	r0, 0x3f	; 63
     b86:	f8 94       	cli
     b88:	de bf       	out	0x3e, r29	; 62
     b8a:	0f be       	out	0x3f, r0	; 63
     b8c:	cd bf       	out	0x3d, r28	; 61

	/* Create configuration structure for timer driver */
	Timer_ConfigType Timer_Config = {NORMAL,0,CLOCK_1024};
     b8e:	fe 01       	movw	r30, r28
     b90:	e1 5b       	subi	r30, 0xB1	; 177
     b92:	ff 4f       	sbci	r31, 0xFF	; 255
     b94:	10 82       	st	Z, r1
     b96:	11 82       	std	Z+1, r1	; 0x01
     b98:	12 82       	std	Z+2, r1	; 0x02
     b9a:	13 82       	std	Z+3, r1	; 0x03
     b9c:	fe 01       	movw	r30, r28
     b9e:	e1 5b       	subi	r30, 0xB1	; 177
     ba0:	ff 4f       	sbci	r31, 0xFF	; 255
     ba2:	85 e0       	ldi	r24, 0x05	; 5
     ba4:	82 83       	std	Z+2, r24	; 0x02
	//Timer_ConfigType Ctc_Timer_Config = {COMPARE,0,CLOCK_1024,255};
	/* Set the Call back function pointer in the timer driver */
	Ovf_setCallBack(App_program);
     ba6:	83 ea       	ldi	r24, 0xA3	; 163
     ba8:	95 e0       	ldi	r25, 0x05	; 5
     baa:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <Ovf_setCallBack>
	/* Create configuration structure for UART driver */
	Uart_ConfigType Uart_Config = {BIT_8,DISABLED,BIT_1,BAUD_9600};
     bae:	ce 01       	movw	r24, r28
     bb0:	8d 5a       	subi	r24, 0xAD	; 173
     bb2:	9f 4f       	sbci	r25, 0xFF	; 255
     bb4:	a7 96       	adiw	r28, 0x27	; 39
     bb6:	9f af       	std	Y+63, r25	; 0x3f
     bb8:	8e af       	std	Y+62, r24	; 0x3e
     bba:	a7 97       	sbiw	r28, 0x27	; 39
     bbc:	8e e6       	ldi	r24, 0x6E	; 110
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a9 96       	adiw	r28, 0x29	; 41
     bc2:	9f af       	std	Y+63, r25	; 0x3f
     bc4:	8e af       	std	Y+62, r24	; 0x3e
     bc6:	a9 97       	sbiw	r28, 0x29	; 41
     bc8:	97 e0       	ldi	r25, 0x07	; 7
     bca:	aa 96       	adiw	r28, 0x2a	; 42
     bcc:	9f af       	std	Y+63, r25	; 0x3f
     bce:	aa 97       	sbiw	r28, 0x2a	; 42
     bd0:	a9 96       	adiw	r28, 0x29	; 41
     bd2:	ee ad       	ldd	r30, Y+62	; 0x3e
     bd4:	ff ad       	ldd	r31, Y+63	; 0x3f
     bd6:	a9 97       	sbiw	r28, 0x29	; 41
     bd8:	00 80       	ld	r0, Z
     bda:	a9 96       	adiw	r28, 0x29	; 41
     bdc:	8e ad       	ldd	r24, Y+62	; 0x3e
     bde:	9f ad       	ldd	r25, Y+63	; 0x3f
     be0:	a9 97       	sbiw	r28, 0x29	; 41
     be2:	01 96       	adiw	r24, 0x01	; 1
     be4:	a9 96       	adiw	r28, 0x29	; 41
     be6:	9f af       	std	Y+63, r25	; 0x3f
     be8:	8e af       	std	Y+62, r24	; 0x3e
     bea:	a9 97       	sbiw	r28, 0x29	; 41
     bec:	a7 96       	adiw	r28, 0x27	; 39
     bee:	ee ad       	ldd	r30, Y+62	; 0x3e
     bf0:	ff ad       	ldd	r31, Y+63	; 0x3f
     bf2:	a7 97       	sbiw	r28, 0x27	; 39
     bf4:	00 82       	st	Z, r0
     bf6:	a7 96       	adiw	r28, 0x27	; 39
     bf8:	8e ad       	ldd	r24, Y+62	; 0x3e
     bfa:	9f ad       	ldd	r25, Y+63	; 0x3f
     bfc:	a7 97       	sbiw	r28, 0x27	; 39
     bfe:	01 96       	adiw	r24, 0x01	; 1
     c00:	a7 96       	adiw	r28, 0x27	; 39
     c02:	9f af       	std	Y+63, r25	; 0x3f
     c04:	8e af       	std	Y+62, r24	; 0x3e
     c06:	a7 97       	sbiw	r28, 0x27	; 39
     c08:	aa 96       	adiw	r28, 0x2a	; 42
     c0a:	9f ad       	ldd	r25, Y+63	; 0x3f
     c0c:	aa 97       	sbiw	r28, 0x2a	; 42
     c0e:	91 50       	subi	r25, 0x01	; 1
     c10:	aa 96       	adiw	r28, 0x2a	; 42
     c12:	9f af       	std	Y+63, r25	; 0x3f
     c14:	aa 97       	sbiw	r28, 0x2a	; 42
     c16:	aa 96       	adiw	r28, 0x2a	; 42
     c18:	ef ad       	ldd	r30, Y+63	; 0x3f
     c1a:	aa 97       	sbiw	r28, 0x2a	; 42
     c1c:	ee 23       	and	r30, r30
     c1e:	c1 f6       	brne	.-80     	; 0xbd0 <main+0x5c>
	/* Initialize the EEPROM , UART and timer driver */
	UART_init(&Uart_Config);
     c20:	ce 01       	movw	r24, r28
     c22:	8d 5a       	subi	r24, 0xAD	; 173
     c24:	9f 4f       	sbci	r25, 0xFF	; 255
     c26:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <UART_init>
	timer_init(&Timer_Config);
     c2a:	ce 01       	movw	r24, r28
     c2c:	81 5b       	subi	r24, 0xB1	; 177
     c2e:	9f 4f       	sbci	r25, 0xFF	; 255
     c30:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <timer_init>
	EEPROM_init();
     c34:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <EEPROM_init>
	/* Enable Global Interrupt I-Bit */
	SREG  |= (1<<7);
     c38:	af e5       	ldi	r26, 0x5F	; 95
     c3a:	b0 e0       	ldi	r27, 0x00	; 0
     c3c:	ef e5       	ldi	r30, 0x5F	; 95
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	80 81       	ld	r24, Z
     c42:	80 68       	ori	r24, 0x80	; 128
     c44:	8c 93       	st	X, r24
	/* configure pin PB0 , PB1 and PB2 as output pins */
	DDRB |= 0x07;
     c46:	a7 e3       	ldi	r26, 0x37	; 55
     c48:	b0 e0       	ldi	r27, 0x00	; 0
     c4a:	e7 e3       	ldi	r30, 0x37	; 55
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	80 81       	ld	r24, Z
     c50:	87 60       	ori	r24, 0x07	; 7
     c52:	8c 93       	st	X, r24
	/* Motor is stop at the beginning */
	PORTB &= 0xFC;
     c54:	a8 e3       	ldi	r26, 0x38	; 56
     c56:	b0 e0       	ldi	r27, 0x00	; 0
     c58:	e8 e3       	ldi	r30, 0x38	; 56
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	80 81       	ld	r24, Z
     c5e:	8c 7f       	andi	r24, 0xFC	; 252
     c60:	8c 93       	st	X, r24
	/* out high to enable pin*/
	PORTB |= (1<<PB2);
     c62:	a8 e3       	ldi	r26, 0x38	; 56
     c64:	b0 e0       	ldi	r27, 0x00	; 0
     c66:	e8 e3       	ldi	r30, 0x38	; 56
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	80 81       	ld	r24, Z
     c6c:	84 60       	ori	r24, 0x04	; 4
     c6e:	8c 93       	st	X, r24
	/* configure pin PD3 as output pin */
	DDRD |=(1<<PD3);
     c70:	a1 e3       	ldi	r26, 0x31	; 49
     c72:	b0 e0       	ldi	r27, 0x00	; 0
     c74:	e1 e3       	ldi	r30, 0x31	; 49
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	88 60       	ori	r24, 0x08	; 8
     c7c:	8c 93       	st	X, r24
	/* buzzer is stop at the beginning */
	PORTD &= ~(1<<PD3);
     c7e:	a2 e3       	ldi	r26, 0x32	; 50
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	e2 e3       	ldi	r30, 0x32	; 50
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	80 81       	ld	r24, Z
     c88:	87 7f       	andi	r24, 0xF7	; 247
     c8a:	8c 93       	st	X, r24
	/*local variables*/
	uint8 i ,val , count = 0 ,change =5 , open = 5, option,match =10;
     c8c:	fe 01       	movw	r30, r28
     c8e:	e3 5b       	subi	r30, 0xB3	; 179
     c90:	ff 4f       	sbci	r31, 0xFF	; 255
     c92:	10 82       	st	Z, r1
     c94:	fe 01       	movw	r30, r28
     c96:	e4 5b       	subi	r30, 0xB4	; 180
     c98:	ff 4f       	sbci	r31, 0xFF	; 255
     c9a:	85 e0       	ldi	r24, 0x05	; 5
     c9c:	80 83       	st	Z, r24
     c9e:	fe 01       	movw	r30, r28
     ca0:	e5 5b       	subi	r30, 0xB5	; 181
     ca2:	ff 4f       	sbci	r31, 0xFF	; 255
     ca4:	85 e0       	ldi	r24, 0x05	; 5
     ca6:	80 83       	st	Z, r24
     ca8:	fe 01       	movw	r30, r28
     caa:	e7 5b       	subi	r30, 0xB7	; 183
     cac:	ff 4f       	sbci	r31, 0xFF	; 255
     cae:	8a e0       	ldi	r24, 0x0A	; 10
     cb0:	80 83       	st	Z, r24
	/*array to store the pass for the second time */
	uint8 re_password [NUMBER];
	/* variable to handle the EEPROM address */
	uint16 address ;
	/*save the EMPTY to address 0x0311 */
	EEPROM_writeByte(0x0311 ,EMPTY);
     cb2:	81 e1       	ldi	r24, 0x11	; 17
     cb4:	93 e0       	ldi	r25, 0x03	; 3
     cb6:	63 e2       	ldi	r22, 0x23	; 35
     cb8:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <EEPROM_writeByte>
     cbc:	fe 01       	movw	r30, r28
     cbe:	ed 5b       	subi	r30, 0xBD	; 189
     cc0:	ff 4f       	sbci	r31, 0xFF	; 255
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	a0 e2       	ldi	r26, 0x20	; 32
     cc8:	b1 e4       	ldi	r27, 0x41	; 65
     cca:	80 83       	st	Z, r24
     ccc:	91 83       	std	Z+1, r25	; 0x01
     cce:	a2 83       	std	Z+2, r26	; 0x02
     cd0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cd2:	8e 01       	movw	r16, r28
     cd4:	01 5c       	subi	r16, 0xC1	; 193
     cd6:	1f 4f       	sbci	r17, 0xFF	; 255
     cd8:	fe 01       	movw	r30, r28
     cda:	ed 5b       	subi	r30, 0xBD	; 189
     cdc:	ff 4f       	sbci	r31, 0xFF	; 255
     cde:	60 81       	ld	r22, Z
     ce0:	71 81       	ldd	r23, Z+1	; 0x01
     ce2:	82 81       	ldd	r24, Z+2	; 0x02
     ce4:	93 81       	ldd	r25, Z+3	; 0x03
     ce6:	20 e0       	ldi	r18, 0x00	; 0
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	4a ef       	ldi	r20, 0xFA	; 250
     cec:	54 e4       	ldi	r21, 0x44	; 68
     cee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cf2:	dc 01       	movw	r26, r24
     cf4:	cb 01       	movw	r24, r22
     cf6:	f8 01       	movw	r30, r16
     cf8:	80 83       	st	Z, r24
     cfa:	91 83       	std	Z+1, r25	; 0x01
     cfc:	a2 83       	std	Z+2, r26	; 0x02
     cfe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d00:	fe 01       	movw	r30, r28
     d02:	ff 96       	adiw	r30, 0x3f	; 63
     d04:	60 81       	ld	r22, Z
     d06:	71 81       	ldd	r23, Z+1	; 0x01
     d08:	82 81       	ldd	r24, Z+2	; 0x02
     d0a:	93 81       	ldd	r25, Z+3	; 0x03
     d0c:	20 e0       	ldi	r18, 0x00	; 0
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	40 e8       	ldi	r20, 0x80	; 128
     d12:	5f e3       	ldi	r21, 0x3F	; 63
     d14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d18:	88 23       	and	r24, r24
     d1a:	2c f4       	brge	.+10     	; 0xd26 <main+0x1b2>
		__ticks = 1;
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	9e af       	std	Y+62, r25	; 0x3e
     d22:	8d af       	std	Y+61, r24	; 0x3d
     d24:	46 c0       	rjmp	.+140    	; 0xdb2 <main+0x23e>
	else if (__tmp > 65535)
     d26:	fe 01       	movw	r30, r28
     d28:	ff 96       	adiw	r30, 0x3f	; 63
     d2a:	60 81       	ld	r22, Z
     d2c:	71 81       	ldd	r23, Z+1	; 0x01
     d2e:	82 81       	ldd	r24, Z+2	; 0x02
     d30:	93 81       	ldd	r25, Z+3	; 0x03
     d32:	20 e0       	ldi	r18, 0x00	; 0
     d34:	3f ef       	ldi	r19, 0xFF	; 255
     d36:	4f e7       	ldi	r20, 0x7F	; 127
     d38:	57 e4       	ldi	r21, 0x47	; 71
     d3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d3e:	18 16       	cp	r1, r24
     d40:	64 f5       	brge	.+88     	; 0xd9a <main+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d42:	fe 01       	movw	r30, r28
     d44:	ed 5b       	subi	r30, 0xBD	; 189
     d46:	ff 4f       	sbci	r31, 0xFF	; 255
     d48:	60 81       	ld	r22, Z
     d4a:	71 81       	ldd	r23, Z+1	; 0x01
     d4c:	82 81       	ldd	r24, Z+2	; 0x02
     d4e:	93 81       	ldd	r25, Z+3	; 0x03
     d50:	20 e0       	ldi	r18, 0x00	; 0
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	40 e2       	ldi	r20, 0x20	; 32
     d56:	51 e4       	ldi	r21, 0x41	; 65
     d58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d5c:	dc 01       	movw	r26, r24
     d5e:	cb 01       	movw	r24, r22
     d60:	bc 01       	movw	r22, r24
     d62:	cd 01       	movw	r24, r26
     d64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d68:	dc 01       	movw	r26, r24
     d6a:	cb 01       	movw	r24, r22
     d6c:	9e af       	std	Y+62, r25	; 0x3e
     d6e:	8d af       	std	Y+61, r24	; 0x3d
     d70:	0f c0       	rjmp	.+30     	; 0xd90 <main+0x21c>
     d72:	88 ec       	ldi	r24, 0xC8	; 200
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	9c af       	std	Y+60, r25	; 0x3c
     d78:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d7a:	8b ad       	ldd	r24, Y+59	; 0x3b
     d7c:	9c ad       	ldd	r25, Y+60	; 0x3c
     d7e:	01 97       	sbiw	r24, 0x01	; 1
     d80:	f1 f7       	brne	.-4      	; 0xd7e <main+0x20a>
     d82:	9c af       	std	Y+60, r25	; 0x3c
     d84:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d86:	8d ad       	ldd	r24, Y+61	; 0x3d
     d88:	9e ad       	ldd	r25, Y+62	; 0x3e
     d8a:	01 97       	sbiw	r24, 0x01	; 1
     d8c:	9e af       	std	Y+62, r25	; 0x3e
     d8e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d90:	8d ad       	ldd	r24, Y+61	; 0x3d
     d92:	9e ad       	ldd	r25, Y+62	; 0x3e
     d94:	00 97       	sbiw	r24, 0x00	; 0
     d96:	69 f7       	brne	.-38     	; 0xd72 <main+0x1fe>
     d98:	16 c0       	rjmp	.+44     	; 0xdc6 <main+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d9a:	fe 01       	movw	r30, r28
     d9c:	ff 96       	adiw	r30, 0x3f	; 63
     d9e:	60 81       	ld	r22, Z
     da0:	71 81       	ldd	r23, Z+1	; 0x01
     da2:	82 81       	ldd	r24, Z+2	; 0x02
     da4:	93 81       	ldd	r25, Z+3	; 0x03
     da6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     daa:	dc 01       	movw	r26, r24
     dac:	cb 01       	movw	r24, r22
     dae:	9e af       	std	Y+62, r25	; 0x3e
     db0:	8d af       	std	Y+61, r24	; 0x3d
     db2:	8d ad       	ldd	r24, Y+61	; 0x3d
     db4:	9e ad       	ldd	r25, Y+62	; 0x3e
     db6:	9a af       	std	Y+58, r25	; 0x3a
     db8:	89 af       	std	Y+57, r24	; 0x39
     dba:	89 ad       	ldd	r24, Y+57	; 0x39
     dbc:	9a ad       	ldd	r25, Y+58	; 0x3a
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	f1 f7       	brne	.-4      	; 0xdbe <main+0x24a>
     dc2:	9a af       	std	Y+58, r25	; 0x3a
     dc4:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms (10);
	/*send READY to the first MICRO to start*/
	if (EEPROM_readByte(0x0311 , &val))
     dc6:	9e 01       	movw	r18, r28
     dc8:	26 5a       	subi	r18, 0xA6	; 166
     dca:	3f 4f       	sbci	r19, 0xFF	; 255
     dcc:	81 e1       	ldi	r24, 0x11	; 17
     dce:	93 e0       	ldi	r25, 0x03	; 3
     dd0:	b9 01       	movw	r22, r18
     dd2:	0e 94 3f 0c 	call	0x187e	; 0x187e <EEPROM_readByte>
     dd6:	88 23       	and	r24, r24
     dd8:	49 f0       	breq	.+18     	; 0xdec <main+0x278>
	{
		 if (val == EMPTY)
     dda:	fe 01       	movw	r30, r28
     ddc:	e6 5a       	subi	r30, 0xA6	; 166
     dde:	ff 4f       	sbci	r31, 0xFF	; 255
     de0:	80 81       	ld	r24, Z
     de2:	83 32       	cpi	r24, 0x23	; 35
     de4:	19 f4       	brne	.+6      	; 0xdec <main+0x278>
		 {
			 UART_sendByte(READY);
     de6:	82 e5       	ldi	r24, 0x52	; 82
     de8:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <UART_sendByte>
    while (1)
    {
    	/* step 1 : if the MICRO is ready and send EMPTY to the firstMICRO
    	 *   or when the 2 pass unmatched
    	 *   or when the user want to change the pass */
        if ((change == MATCH)||(match == UNMATCH) ||(val == EMPTY))
     dec:	fe 01       	movw	r30, r28
     dee:	e4 5b       	subi	r30, 0xB4	; 180
     df0:	ff 4f       	sbci	r31, 0xFF	; 255
     df2:	80 81       	ld	r24, Z
     df4:	81 30       	cpi	r24, 0x01	; 1
     df6:	69 f0       	breq	.+26     	; 0xe12 <main+0x29e>
     df8:	fe 01       	movw	r30, r28
     dfa:	e7 5b       	subi	r30, 0xB7	; 183
     dfc:	ff 4f       	sbci	r31, 0xFF	; 255
     dfe:	80 81       	ld	r24, Z
     e00:	88 23       	and	r24, r24
     e02:	39 f0       	breq	.+14     	; 0xe12 <main+0x29e>
     e04:	fe 01       	movw	r30, r28
     e06:	e6 5a       	subi	r30, 0xA6	; 166
     e08:	ff 4f       	sbci	r31, 0xFF	; 255
     e0a:	80 81       	ld	r24, Z
     e0c:	83 32       	cpi	r24, 0x23	; 35
     e0e:	09 f0       	breq	.+2      	; 0xe12 <main+0x29e>
     e10:	d8 c1       	rjmp	.+944    	; 0x11c2 <main+0x64e>
        {
        	count = 0 ;
     e12:	fe 01       	movw	r30, r28
     e14:	e3 5b       	subi	r30, 0xB3	; 179
     e16:	ff 4f       	sbci	r31, 0xFF	; 255
     e18:	10 82       	st	Z, r1
        	/*to receive the pass and save it in the array*/
        	for (i=0;i<NUMBER;i++)
     e1a:	fe 01       	movw	r30, r28
     e1c:	e2 5b       	subi	r30, 0xB2	; 178
     e1e:	ff 4f       	sbci	r31, 0xFF	; 255
     e20:	10 82       	st	Z, r1
     e22:	19 c0       	rjmp	.+50     	; 0xe56 <main+0x2e2>
        	{
        		password[i]= UART_recieveByte();
     e24:	fe 01       	movw	r30, r28
     e26:	e2 5b       	subi	r30, 0xB2	; 178
     e28:	ff 4f       	sbci	r31, 0xFF	; 255
     e2a:	80 81       	ld	r24, Z
     e2c:	08 2f       	mov	r16, r24
     e2e:	10 e0       	ldi	r17, 0x00	; 0
     e30:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <UART_recieveByte>
     e34:	28 2f       	mov	r18, r24
     e36:	ce 01       	movw	r24, r28
     e38:	85 5a       	subi	r24, 0xA5	; 165
     e3a:	9f 4f       	sbci	r25, 0xFF	; 255
     e3c:	fc 01       	movw	r30, r24
     e3e:	e0 0f       	add	r30, r16
     e40:	f1 1f       	adc	r31, r17
     e42:	20 83       	st	Z, r18
    	 *   or when the user want to change the pass */
        if ((change == MATCH)||(match == UNMATCH) ||(val == EMPTY))
        {
        	count = 0 ;
        	/*to receive the pass and save it in the array*/
        	for (i=0;i<NUMBER;i++)
     e44:	de 01       	movw	r26, r28
     e46:	a2 5b       	subi	r26, 0xB2	; 178
     e48:	bf 4f       	sbci	r27, 0xFF	; 255
     e4a:	fe 01       	movw	r30, r28
     e4c:	e2 5b       	subi	r30, 0xB2	; 178
     e4e:	ff 4f       	sbci	r31, 0xFF	; 255
     e50:	80 81       	ld	r24, Z
     e52:	8f 5f       	subi	r24, 0xFF	; 255
     e54:	8c 93       	st	X, r24
     e56:	fe 01       	movw	r30, r28
     e58:	e2 5b       	subi	r30, 0xB2	; 178
     e5a:	ff 4f       	sbci	r31, 0xFF	; 255
     e5c:	80 81       	ld	r24, Z
     e5e:	85 30       	cpi	r24, 0x05	; 5
     e60:	08 f3       	brcs	.-62     	; 0xe24 <main+0x2b0>
        	{
        		password[i]= UART_recieveByte();
        	}
        	/*to save the pass in EEPROM*/
        	for (i=0;i<NUMBER;i++)
     e62:	fe 01       	movw	r30, r28
     e64:	e2 5b       	subi	r30, 0xB2	; 178
     e66:	ff 4f       	sbci	r31, 0xFF	; 255
     e68:	10 82       	st	Z, r1
     e6a:	a3 c0       	rjmp	.+326    	; 0xfb2 <main+0x43e>
        	{
        		address = (0x0311)+16*i;
     e6c:	fe 01       	movw	r30, r28
     e6e:	e2 5b       	subi	r30, 0xB2	; 178
     e70:	ff 4f       	sbci	r31, 0xFF	; 255
     e72:	80 81       	ld	r24, Z
     e74:	88 2f       	mov	r24, r24
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	82 95       	swap	r24
     e7a:	92 95       	swap	r25
     e7c:	90 7f       	andi	r25, 0xF0	; 240
     e7e:	98 27       	eor	r25, r24
     e80:	80 7f       	andi	r24, 0xF0	; 240
     e82:	98 27       	eor	r25, r24
     e84:	8f 5e       	subi	r24, 0xEF	; 239
     e86:	9c 4f       	sbci	r25, 0xFC	; 252
     e88:	fe 01       	movw	r30, r28
     e8a:	e9 5b       	subi	r30, 0xB9	; 185
     e8c:	ff 4f       	sbci	r31, 0xFF	; 255
     e8e:	91 83       	std	Z+1, r25	; 0x01
     e90:	80 83       	st	Z, r24
        		EEPROM_writeByte(address , password[i]);
     e92:	fe 01       	movw	r30, r28
     e94:	e2 5b       	subi	r30, 0xB2	; 178
     e96:	ff 4f       	sbci	r31, 0xFF	; 255
     e98:	80 81       	ld	r24, Z
     e9a:	28 2f       	mov	r18, r24
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	ce 01       	movw	r24, r28
     ea0:	85 5a       	subi	r24, 0xA5	; 165
     ea2:	9f 4f       	sbci	r25, 0xFF	; 255
     ea4:	fc 01       	movw	r30, r24
     ea6:	e2 0f       	add	r30, r18
     ea8:	f3 1f       	adc	r31, r19
     eaa:	20 81       	ld	r18, Z
     eac:	fe 01       	movw	r30, r28
     eae:	e9 5b       	subi	r30, 0xB9	; 185
     eb0:	ff 4f       	sbci	r31, 0xFF	; 255
     eb2:	80 81       	ld	r24, Z
     eb4:	91 81       	ldd	r25, Z+1	; 0x01
     eb6:	62 2f       	mov	r22, r18
     eb8:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <EEPROM_writeByte>
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	a0 e2       	ldi	r26, 0x20	; 32
     ec2:	b1 e4       	ldi	r27, 0x41	; 65
     ec4:	8d ab       	std	Y+53, r24	; 0x35
     ec6:	9e ab       	std	Y+54, r25	; 0x36
     ec8:	af ab       	std	Y+55, r26	; 0x37
     eca:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ecc:	6d a9       	ldd	r22, Y+53	; 0x35
     ece:	7e a9       	ldd	r23, Y+54	; 0x36
     ed0:	8f a9       	ldd	r24, Y+55	; 0x37
     ed2:	98 ad       	ldd	r25, Y+56	; 0x38
     ed4:	20 e0       	ldi	r18, 0x00	; 0
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	4a ef       	ldi	r20, 0xFA	; 250
     eda:	54 e4       	ldi	r21, 0x44	; 68
     edc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ee0:	dc 01       	movw	r26, r24
     ee2:	cb 01       	movw	r24, r22
     ee4:	89 ab       	std	Y+49, r24	; 0x31
     ee6:	9a ab       	std	Y+50, r25	; 0x32
     ee8:	ab ab       	std	Y+51, r26	; 0x33
     eea:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     eec:	69 a9       	ldd	r22, Y+49	; 0x31
     eee:	7a a9       	ldd	r23, Y+50	; 0x32
     ef0:	8b a9       	ldd	r24, Y+51	; 0x33
     ef2:	9c a9       	ldd	r25, Y+52	; 0x34
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	40 e8       	ldi	r20, 0x80	; 128
     efa:	5f e3       	ldi	r21, 0x3F	; 63
     efc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f00:	88 23       	and	r24, r24
     f02:	2c f4       	brge	.+10     	; 0xf0e <main+0x39a>
		__ticks = 1;
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	98 ab       	std	Y+48, r25	; 0x30
     f0a:	8f a7       	std	Y+47, r24	; 0x2f
     f0c:	3f c0       	rjmp	.+126    	; 0xf8c <main+0x418>
	else if (__tmp > 65535)
     f0e:	69 a9       	ldd	r22, Y+49	; 0x31
     f10:	7a a9       	ldd	r23, Y+50	; 0x32
     f12:	8b a9       	ldd	r24, Y+51	; 0x33
     f14:	9c a9       	ldd	r25, Y+52	; 0x34
     f16:	20 e0       	ldi	r18, 0x00	; 0
     f18:	3f ef       	ldi	r19, 0xFF	; 255
     f1a:	4f e7       	ldi	r20, 0x7F	; 127
     f1c:	57 e4       	ldi	r21, 0x47	; 71
     f1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f22:	18 16       	cp	r1, r24
     f24:	4c f5       	brge	.+82     	; 0xf78 <main+0x404>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f26:	6d a9       	ldd	r22, Y+53	; 0x35
     f28:	7e a9       	ldd	r23, Y+54	; 0x36
     f2a:	8f a9       	ldd	r24, Y+55	; 0x37
     f2c:	98 ad       	ldd	r25, Y+56	; 0x38
     f2e:	20 e0       	ldi	r18, 0x00	; 0
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	40 e2       	ldi	r20, 0x20	; 32
     f34:	51 e4       	ldi	r21, 0x41	; 65
     f36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f3a:	dc 01       	movw	r26, r24
     f3c:	cb 01       	movw	r24, r22
     f3e:	bc 01       	movw	r22, r24
     f40:	cd 01       	movw	r24, r26
     f42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f46:	dc 01       	movw	r26, r24
     f48:	cb 01       	movw	r24, r22
     f4a:	98 ab       	std	Y+48, r25	; 0x30
     f4c:	8f a7       	std	Y+47, r24	; 0x2f
     f4e:	0f c0       	rjmp	.+30     	; 0xf6e <main+0x3fa>
     f50:	88 ec       	ldi	r24, 0xC8	; 200
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	9e a7       	std	Y+46, r25	; 0x2e
     f56:	8d a7       	std	Y+45, r24	; 0x2d
     f58:	8d a5       	ldd	r24, Y+45	; 0x2d
     f5a:	9e a5       	ldd	r25, Y+46	; 0x2e
     f5c:	01 97       	sbiw	r24, 0x01	; 1
     f5e:	f1 f7       	brne	.-4      	; 0xf5c <main+0x3e8>
     f60:	9e a7       	std	Y+46, r25	; 0x2e
     f62:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f64:	8f a5       	ldd	r24, Y+47	; 0x2f
     f66:	98 a9       	ldd	r25, Y+48	; 0x30
     f68:	01 97       	sbiw	r24, 0x01	; 1
     f6a:	98 ab       	std	Y+48, r25	; 0x30
     f6c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f6e:	8f a5       	ldd	r24, Y+47	; 0x2f
     f70:	98 a9       	ldd	r25, Y+48	; 0x30
     f72:	00 97       	sbiw	r24, 0x00	; 0
     f74:	69 f7       	brne	.-38     	; 0xf50 <main+0x3dc>
     f76:	14 c0       	rjmp	.+40     	; 0xfa0 <main+0x42c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f78:	69 a9       	ldd	r22, Y+49	; 0x31
     f7a:	7a a9       	ldd	r23, Y+50	; 0x32
     f7c:	8b a9       	ldd	r24, Y+51	; 0x33
     f7e:	9c a9       	ldd	r25, Y+52	; 0x34
     f80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f84:	dc 01       	movw	r26, r24
     f86:	cb 01       	movw	r24, r22
     f88:	98 ab       	std	Y+48, r25	; 0x30
     f8a:	8f a7       	std	Y+47, r24	; 0x2f
     f8c:	8f a5       	ldd	r24, Y+47	; 0x2f
     f8e:	98 a9       	ldd	r25, Y+48	; 0x30
     f90:	9c a7       	std	Y+44, r25	; 0x2c
     f92:	8b a7       	std	Y+43, r24	; 0x2b
     f94:	8b a5       	ldd	r24, Y+43	; 0x2b
     f96:	9c a5       	ldd	r25, Y+44	; 0x2c
     f98:	01 97       	sbiw	r24, 0x01	; 1
     f9a:	f1 f7       	brne	.-4      	; 0xf98 <main+0x424>
     f9c:	9c a7       	std	Y+44, r25	; 0x2c
     f9e:	8b a7       	std	Y+43, r24	; 0x2b
        	for (i=0;i<NUMBER;i++)
        	{
        		password[i]= UART_recieveByte();
        	}
        	/*to save the pass in EEPROM*/
        	for (i=0;i<NUMBER;i++)
     fa0:	de 01       	movw	r26, r28
     fa2:	a2 5b       	subi	r26, 0xB2	; 178
     fa4:	bf 4f       	sbci	r27, 0xFF	; 255
     fa6:	fe 01       	movw	r30, r28
     fa8:	e2 5b       	subi	r30, 0xB2	; 178
     faa:	ff 4f       	sbci	r31, 0xFF	; 255
     fac:	80 81       	ld	r24, Z
     fae:	8f 5f       	subi	r24, 0xFF	; 255
     fb0:	8c 93       	st	X, r24
     fb2:	fe 01       	movw	r30, r28
     fb4:	e2 5b       	subi	r30, 0xB2	; 178
     fb6:	ff 4f       	sbci	r31, 0xFF	; 255
     fb8:	80 81       	ld	r24, Z
     fba:	85 30       	cpi	r24, 0x05	; 5
     fbc:	08 f4       	brcc	.+2      	; 0xfc0 <main+0x44c>
     fbe:	56 cf       	rjmp	.-340    	; 0xe6c <main+0x2f8>
        		address = (0x0311)+16*i;
        		EEPROM_writeByte(address , password[i]);
        		_delay_ms(10);
        	}
        	/*to receive the pass for the second time and save it in the array*/
        	for (i=0;i<NUMBER;i++)
     fc0:	fe 01       	movw	r30, r28
     fc2:	e2 5b       	subi	r30, 0xB2	; 178
     fc4:	ff 4f       	sbci	r31, 0xFF	; 255
     fc6:	10 82       	st	Z, r1
     fc8:	19 c0       	rjmp	.+50     	; 0xffc <main+0x488>
        	{
        		re_password[i]= UART_recieveByte();
     fca:	fe 01       	movw	r30, r28
     fcc:	e2 5b       	subi	r30, 0xB2	; 178
     fce:	ff 4f       	sbci	r31, 0xFF	; 255
     fd0:	80 81       	ld	r24, Z
     fd2:	08 2f       	mov	r16, r24
     fd4:	10 e0       	ldi	r17, 0x00	; 0
     fd6:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <UART_recieveByte>
     fda:	28 2f       	mov	r18, r24
     fdc:	ce 01       	movw	r24, r28
     fde:	80 5a       	subi	r24, 0xA0	; 160
     fe0:	9f 4f       	sbci	r25, 0xFF	; 255
     fe2:	fc 01       	movw	r30, r24
     fe4:	e0 0f       	add	r30, r16
     fe6:	f1 1f       	adc	r31, r17
     fe8:	20 83       	st	Z, r18
        		address = (0x0311)+16*i;
        		EEPROM_writeByte(address , password[i]);
        		_delay_ms(10);
        	}
        	/*to receive the pass for the second time and save it in the array*/
        	for (i=0;i<NUMBER;i++)
     fea:	de 01       	movw	r26, r28
     fec:	a2 5b       	subi	r26, 0xB2	; 178
     fee:	bf 4f       	sbci	r27, 0xFF	; 255
     ff0:	fe 01       	movw	r30, r28
     ff2:	e2 5b       	subi	r30, 0xB2	; 178
     ff4:	ff 4f       	sbci	r31, 0xFF	; 255
     ff6:	80 81       	ld	r24, Z
     ff8:	8f 5f       	subi	r24, 0xFF	; 255
     ffa:	8c 93       	st	X, r24
     ffc:	fe 01       	movw	r30, r28
     ffe:	e2 5b       	subi	r30, 0xB2	; 178
    1000:	ff 4f       	sbci	r31, 0xFF	; 255
    1002:	80 81       	ld	r24, Z
    1004:	85 30       	cpi	r24, 0x05	; 5
    1006:	08 f3       	brcs	.-62     	; 0xfca <main+0x456>
        	{
        		re_password[i]= UART_recieveByte();
        	}
        	/*to compare the re_password and the pass in EEPROM*/
        	for (i=0;i<NUMBER;i++)
    1008:	fe 01       	movw	r30, r28
    100a:	e2 5b       	subi	r30, 0xB2	; 178
    100c:	ff 4f       	sbci	r31, 0xFF	; 255
    100e:	10 82       	st	Z, r1
    1010:	b5 c0       	rjmp	.+362    	; 0x117c <main+0x608>
        	{
        		address = (0x0311)+16*i;
    1012:	fe 01       	movw	r30, r28
    1014:	e2 5b       	subi	r30, 0xB2	; 178
    1016:	ff 4f       	sbci	r31, 0xFF	; 255
    1018:	80 81       	ld	r24, Z
    101a:	88 2f       	mov	r24, r24
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	82 95       	swap	r24
    1020:	92 95       	swap	r25
    1022:	90 7f       	andi	r25, 0xF0	; 240
    1024:	98 27       	eor	r25, r24
    1026:	80 7f       	andi	r24, 0xF0	; 240
    1028:	98 27       	eor	r25, r24
    102a:	8f 5e       	subi	r24, 0xEF	; 239
    102c:	9c 4f       	sbci	r25, 0xFC	; 252
    102e:	fe 01       	movw	r30, r28
    1030:	e9 5b       	subi	r30, 0xB9	; 185
    1032:	ff 4f       	sbci	r31, 0xFF	; 255
    1034:	91 83       	std	Z+1, r25	; 0x01
    1036:	80 83       	st	Z, r24
        		EEPROM_readByte(address , &val);
    1038:	fe 01       	movw	r30, r28
    103a:	e9 5b       	subi	r30, 0xB9	; 185
    103c:	ff 4f       	sbci	r31, 0xFF	; 255
    103e:	80 81       	ld	r24, Z
    1040:	91 81       	ldd	r25, Z+1	; 0x01
    1042:	9e 01       	movw	r18, r28
    1044:	26 5a       	subi	r18, 0xA6	; 166
    1046:	3f 4f       	sbci	r19, 0xFF	; 255
    1048:	b9 01       	movw	r22, r18
    104a:	0e 94 3f 0c 	call	0x187e	; 0x187e <EEPROM_readByte>
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	a0 e2       	ldi	r26, 0x20	; 32
    1054:	b1 e4       	ldi	r27, 0x41	; 65
    1056:	8f a3       	std	Y+39, r24	; 0x27
    1058:	98 a7       	std	Y+40, r25	; 0x28
    105a:	a9 a7       	std	Y+41, r26	; 0x29
    105c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    105e:	6f a1       	ldd	r22, Y+39	; 0x27
    1060:	78 a5       	ldd	r23, Y+40	; 0x28
    1062:	89 a5       	ldd	r24, Y+41	; 0x29
    1064:	9a a5       	ldd	r25, Y+42	; 0x2a
    1066:	20 e0       	ldi	r18, 0x00	; 0
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	4a ef       	ldi	r20, 0xFA	; 250
    106c:	54 e4       	ldi	r21, 0x44	; 68
    106e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1072:	dc 01       	movw	r26, r24
    1074:	cb 01       	movw	r24, r22
    1076:	8b a3       	std	Y+35, r24	; 0x23
    1078:	9c a3       	std	Y+36, r25	; 0x24
    107a:	ad a3       	std	Y+37, r26	; 0x25
    107c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    107e:	6b a1       	ldd	r22, Y+35	; 0x23
    1080:	7c a1       	ldd	r23, Y+36	; 0x24
    1082:	8d a1       	ldd	r24, Y+37	; 0x25
    1084:	9e a1       	ldd	r25, Y+38	; 0x26
    1086:	20 e0       	ldi	r18, 0x00	; 0
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	40 e8       	ldi	r20, 0x80	; 128
    108c:	5f e3       	ldi	r21, 0x3F	; 63
    108e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1092:	88 23       	and	r24, r24
    1094:	2c f4       	brge	.+10     	; 0x10a0 <main+0x52c>
		__ticks = 1;
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	9a a3       	std	Y+34, r25	; 0x22
    109c:	89 a3       	std	Y+33, r24	; 0x21
    109e:	3f c0       	rjmp	.+126    	; 0x111e <main+0x5aa>
	else if (__tmp > 65535)
    10a0:	6b a1       	ldd	r22, Y+35	; 0x23
    10a2:	7c a1       	ldd	r23, Y+36	; 0x24
    10a4:	8d a1       	ldd	r24, Y+37	; 0x25
    10a6:	9e a1       	ldd	r25, Y+38	; 0x26
    10a8:	20 e0       	ldi	r18, 0x00	; 0
    10aa:	3f ef       	ldi	r19, 0xFF	; 255
    10ac:	4f e7       	ldi	r20, 0x7F	; 127
    10ae:	57 e4       	ldi	r21, 0x47	; 71
    10b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10b4:	18 16       	cp	r1, r24
    10b6:	4c f5       	brge	.+82     	; 0x110a <main+0x596>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10b8:	6f a1       	ldd	r22, Y+39	; 0x27
    10ba:	78 a5       	ldd	r23, Y+40	; 0x28
    10bc:	89 a5       	ldd	r24, Y+41	; 0x29
    10be:	9a a5       	ldd	r25, Y+42	; 0x2a
    10c0:	20 e0       	ldi	r18, 0x00	; 0
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	40 e2       	ldi	r20, 0x20	; 32
    10c6:	51 e4       	ldi	r21, 0x41	; 65
    10c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10cc:	dc 01       	movw	r26, r24
    10ce:	cb 01       	movw	r24, r22
    10d0:	bc 01       	movw	r22, r24
    10d2:	cd 01       	movw	r24, r26
    10d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10d8:	dc 01       	movw	r26, r24
    10da:	cb 01       	movw	r24, r22
    10dc:	9a a3       	std	Y+34, r25	; 0x22
    10de:	89 a3       	std	Y+33, r24	; 0x21
    10e0:	0f c0       	rjmp	.+30     	; 0x1100 <main+0x58c>
    10e2:	88 ec       	ldi	r24, 0xC8	; 200
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	98 a3       	std	Y+32, r25	; 0x20
    10e8:	8f 8f       	std	Y+31, r24	; 0x1f
    10ea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    10ec:	98 a1       	ldd	r25, Y+32	; 0x20
    10ee:	01 97       	sbiw	r24, 0x01	; 1
    10f0:	f1 f7       	brne	.-4      	; 0x10ee <main+0x57a>
    10f2:	98 a3       	std	Y+32, r25	; 0x20
    10f4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10f6:	89 a1       	ldd	r24, Y+33	; 0x21
    10f8:	9a a1       	ldd	r25, Y+34	; 0x22
    10fa:	01 97       	sbiw	r24, 0x01	; 1
    10fc:	9a a3       	std	Y+34, r25	; 0x22
    10fe:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1100:	89 a1       	ldd	r24, Y+33	; 0x21
    1102:	9a a1       	ldd	r25, Y+34	; 0x22
    1104:	00 97       	sbiw	r24, 0x00	; 0
    1106:	69 f7       	brne	.-38     	; 0x10e2 <main+0x56e>
    1108:	14 c0       	rjmp	.+40     	; 0x1132 <main+0x5be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    110a:	6b a1       	ldd	r22, Y+35	; 0x23
    110c:	7c a1       	ldd	r23, Y+36	; 0x24
    110e:	8d a1       	ldd	r24, Y+37	; 0x25
    1110:	9e a1       	ldd	r25, Y+38	; 0x26
    1112:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1116:	dc 01       	movw	r26, r24
    1118:	cb 01       	movw	r24, r22
    111a:	9a a3       	std	Y+34, r25	; 0x22
    111c:	89 a3       	std	Y+33, r24	; 0x21
    111e:	89 a1       	ldd	r24, Y+33	; 0x21
    1120:	9a a1       	ldd	r25, Y+34	; 0x22
    1122:	9e 8f       	std	Y+30, r25	; 0x1e
    1124:	8d 8f       	std	Y+29, r24	; 0x1d
    1126:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1128:	9e 8d       	ldd	r25, Y+30	; 0x1e
    112a:	01 97       	sbiw	r24, 0x01	; 1
    112c:	f1 f7       	brne	.-4      	; 0x112a <main+0x5b6>
    112e:	9e 8f       	std	Y+30, r25	; 0x1e
    1130:	8d 8f       	std	Y+29, r24	; 0x1d
        		_delay_ms(10);
        		if (val == re_password[i])
    1132:	fe 01       	movw	r30, r28
    1134:	e2 5b       	subi	r30, 0xB2	; 178
    1136:	ff 4f       	sbci	r31, 0xFF	; 255
    1138:	80 81       	ld	r24, Z
    113a:	28 2f       	mov	r18, r24
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	ce 01       	movw	r24, r28
    1140:	80 5a       	subi	r24, 0xA0	; 160
    1142:	9f 4f       	sbci	r25, 0xFF	; 255
    1144:	fc 01       	movw	r30, r24
    1146:	e2 0f       	add	r30, r18
    1148:	f3 1f       	adc	r31, r19
    114a:	90 81       	ld	r25, Z
    114c:	fe 01       	movw	r30, r28
    114e:	e6 5a       	subi	r30, 0xA6	; 166
    1150:	ff 4f       	sbci	r31, 0xFF	; 255
    1152:	80 81       	ld	r24, Z
    1154:	98 17       	cp	r25, r24
    1156:	49 f4       	brne	.+18     	; 0x116a <main+0x5f6>
        		{
        			count ++ ;
    1158:	de 01       	movw	r26, r28
    115a:	a3 5b       	subi	r26, 0xB3	; 179
    115c:	bf 4f       	sbci	r27, 0xFF	; 255
    115e:	fe 01       	movw	r30, r28
    1160:	e3 5b       	subi	r30, 0xB3	; 179
    1162:	ff 4f       	sbci	r31, 0xFF	; 255
    1164:	80 81       	ld	r24, Z
    1166:	8f 5f       	subi	r24, 0xFF	; 255
    1168:	8c 93       	st	X, r24
        	for (i=0;i<NUMBER;i++)
        	{
        		re_password[i]= UART_recieveByte();
        	}
        	/*to compare the re_password and the pass in EEPROM*/
        	for (i=0;i<NUMBER;i++)
    116a:	de 01       	movw	r26, r28
    116c:	a2 5b       	subi	r26, 0xB2	; 178
    116e:	bf 4f       	sbci	r27, 0xFF	; 255
    1170:	fe 01       	movw	r30, r28
    1172:	e2 5b       	subi	r30, 0xB2	; 178
    1174:	ff 4f       	sbci	r31, 0xFF	; 255
    1176:	80 81       	ld	r24, Z
    1178:	8f 5f       	subi	r24, 0xFF	; 255
    117a:	8c 93       	st	X, r24
    117c:	fe 01       	movw	r30, r28
    117e:	e2 5b       	subi	r30, 0xB2	; 178
    1180:	ff 4f       	sbci	r31, 0xFF	; 255
    1182:	80 81       	ld	r24, Z
    1184:	85 30       	cpi	r24, 0x05	; 5
    1186:	08 f4       	brcc	.+2      	; 0x118a <main+0x616>
    1188:	44 cf       	rjmp	.-376    	; 0x1012 <main+0x49e>
        		{
        			count ++ ;
        		}
        	}
        	/*if the two pass are matched*/
        	if (count == NUMBER)
    118a:	fe 01       	movw	r30, r28
    118c:	e3 5b       	subi	r30, 0xB3	; 179
    118e:	ff 4f       	sbci	r31, 0xFF	; 255
    1190:	80 81       	ld	r24, Z
    1192:	85 30       	cpi	r24, 0x05	; 5
    1194:	49 f4       	brne	.+18     	; 0x11a8 <main+0x634>
        	{
        		/*send MATCH to the first MICRO */
        		UART_sendByte(MATCH);
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <UART_sendByte>
        		/*to go to step 2*/
        		match = MATCH ;
    119c:	fe 01       	movw	r30, r28
    119e:	e7 5b       	subi	r30, 0xB7	; 183
    11a0:	ff 4f       	sbci	r31, 0xFF	; 255
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	80 83       	st	Z, r24
    11a6:	0d c0       	rjmp	.+26     	; 0x11c2 <main+0x64e>
        	}
        	/*if the two pass are unmatched*/
        	else if (count != NUMBER)
    11a8:	fe 01       	movw	r30, r28
    11aa:	e3 5b       	subi	r30, 0xB3	; 179
    11ac:	ff 4f       	sbci	r31, 0xFF	; 255
    11ae:	80 81       	ld	r24, Z
    11b0:	85 30       	cpi	r24, 0x05	; 5
    11b2:	39 f0       	breq	.+14     	; 0x11c2 <main+0x64e>
        	{
        		/*send UNMATCH to the first MICRO */
        		UART_sendByte(UNMATCH);
    11b4:	80 e0       	ldi	r24, 0x00	; 0
    11b6:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <UART_sendByte>
        		/*to go to step 1*/
        		match = UNMATCH ;
    11ba:	fe 01       	movw	r30, r28
    11bc:	e7 5b       	subi	r30, 0xB7	; 183
    11be:	ff 4f       	sbci	r31, 0xFF	; 255
    11c0:	10 82       	st	Z, r1
        	}
        }
        /* step 2 : if two pass are matched*/
        if ((match == MATCH))
    11c2:	fe 01       	movw	r30, r28
    11c4:	e7 5b       	subi	r30, 0xB7	; 183
    11c6:	ff 4f       	sbci	r31, 0xFF	; 255
    11c8:	80 81       	ld	r24, Z
    11ca:	81 30       	cpi	r24, 0x01	; 1
    11cc:	09 f0       	breq	.+2      	; 0x11d0 <main+0x65c>
    11ce:	ef c0       	rjmp	.+478    	; 0x13ae <main+0x83a>
        {
        	count = 0 ;
    11d0:	fe 01       	movw	r30, r28
    11d2:	e3 5b       	subi	r30, 0xB3	; 179
    11d4:	ff 4f       	sbci	r31, 0xFF	; 255
    11d6:	10 82       	st	Z, r1
        	/*receive + or - from the first MICRO */
        	option = UART_recieveByte();
    11d8:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <UART_recieveByte>
    11dc:	fe 01       	movw	r30, r28
    11de:	e6 5b       	subi	r30, 0xB6	; 182
    11e0:	ff 4f       	sbci	r31, 0xFF	; 255
    11e2:	80 83       	st	Z, r24
        	/* receive the pass*/
        	for (i=0;i<NUMBER;i++)
    11e4:	fe 01       	movw	r30, r28
    11e6:	e2 5b       	subi	r30, 0xB2	; 178
    11e8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ea:	10 82       	st	Z, r1
    11ec:	19 c0       	rjmp	.+50     	; 0x1220 <main+0x6ac>
			{
				re_password[i]= UART_recieveByte();
    11ee:	fe 01       	movw	r30, r28
    11f0:	e2 5b       	subi	r30, 0xB2	; 178
    11f2:	ff 4f       	sbci	r31, 0xFF	; 255
    11f4:	80 81       	ld	r24, Z
    11f6:	08 2f       	mov	r16, r24
    11f8:	10 e0       	ldi	r17, 0x00	; 0
    11fa:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <UART_recieveByte>
    11fe:	28 2f       	mov	r18, r24
    1200:	ce 01       	movw	r24, r28
    1202:	80 5a       	subi	r24, 0xA0	; 160
    1204:	9f 4f       	sbci	r25, 0xFF	; 255
    1206:	fc 01       	movw	r30, r24
    1208:	e0 0f       	add	r30, r16
    120a:	f1 1f       	adc	r31, r17
    120c:	20 83       	st	Z, r18
        {
        	count = 0 ;
        	/*receive + or - from the first MICRO */
        	option = UART_recieveByte();
        	/* receive the pass*/
        	for (i=0;i<NUMBER;i++)
    120e:	de 01       	movw	r26, r28
    1210:	a2 5b       	subi	r26, 0xB2	; 178
    1212:	bf 4f       	sbci	r27, 0xFF	; 255
    1214:	fe 01       	movw	r30, r28
    1216:	e2 5b       	subi	r30, 0xB2	; 178
    1218:	ff 4f       	sbci	r31, 0xFF	; 255
    121a:	80 81       	ld	r24, Z
    121c:	8f 5f       	subi	r24, 0xFF	; 255
    121e:	8c 93       	st	X, r24
    1220:	fe 01       	movw	r30, r28
    1222:	e2 5b       	subi	r30, 0xB2	; 178
    1224:	ff 4f       	sbci	r31, 0xFF	; 255
    1226:	80 81       	ld	r24, Z
    1228:	85 30       	cpi	r24, 0x05	; 5
    122a:	08 f3       	brcs	.-62     	; 0x11ee <main+0x67a>
			{
				re_password[i]= UART_recieveByte();
			}
        	/*to compare the re_password and the pass in EEPROM*/
			for (i=0;i<NUMBER;i++)
    122c:	fe 01       	movw	r30, r28
    122e:	e2 5b       	subi	r30, 0xB2	; 178
    1230:	ff 4f       	sbci	r31, 0xFF	; 255
    1232:	10 82       	st	Z, r1
    1234:	b5 c0       	rjmp	.+362    	; 0x13a0 <main+0x82c>
			{
				address = (0x0311)+16*i;
    1236:	fe 01       	movw	r30, r28
    1238:	e2 5b       	subi	r30, 0xB2	; 178
    123a:	ff 4f       	sbci	r31, 0xFF	; 255
    123c:	80 81       	ld	r24, Z
    123e:	88 2f       	mov	r24, r24
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	82 95       	swap	r24
    1244:	92 95       	swap	r25
    1246:	90 7f       	andi	r25, 0xF0	; 240
    1248:	98 27       	eor	r25, r24
    124a:	80 7f       	andi	r24, 0xF0	; 240
    124c:	98 27       	eor	r25, r24
    124e:	8f 5e       	subi	r24, 0xEF	; 239
    1250:	9c 4f       	sbci	r25, 0xFC	; 252
    1252:	fe 01       	movw	r30, r28
    1254:	e9 5b       	subi	r30, 0xB9	; 185
    1256:	ff 4f       	sbci	r31, 0xFF	; 255
    1258:	91 83       	std	Z+1, r25	; 0x01
    125a:	80 83       	st	Z, r24
				EEPROM_readByte(address , &val);
    125c:	fe 01       	movw	r30, r28
    125e:	e9 5b       	subi	r30, 0xB9	; 185
    1260:	ff 4f       	sbci	r31, 0xFF	; 255
    1262:	80 81       	ld	r24, Z
    1264:	91 81       	ldd	r25, Z+1	; 0x01
    1266:	9e 01       	movw	r18, r28
    1268:	26 5a       	subi	r18, 0xA6	; 166
    126a:	3f 4f       	sbci	r19, 0xFF	; 255
    126c:	b9 01       	movw	r22, r18
    126e:	0e 94 3f 0c 	call	0x187e	; 0x187e <EEPROM_readByte>
    1272:	80 e0       	ldi	r24, 0x00	; 0
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	a0 e2       	ldi	r26, 0x20	; 32
    1278:	b1 e4       	ldi	r27, 0x41	; 65
    127a:	89 8f       	std	Y+25, r24	; 0x19
    127c:	9a 8f       	std	Y+26, r25	; 0x1a
    127e:	ab 8f       	std	Y+27, r26	; 0x1b
    1280:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1282:	69 8d       	ldd	r22, Y+25	; 0x19
    1284:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1286:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1288:	9c 8d       	ldd	r25, Y+28	; 0x1c
    128a:	20 e0       	ldi	r18, 0x00	; 0
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	4a ef       	ldi	r20, 0xFA	; 250
    1290:	54 e4       	ldi	r21, 0x44	; 68
    1292:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1296:	dc 01       	movw	r26, r24
    1298:	cb 01       	movw	r24, r22
    129a:	8d 8b       	std	Y+21, r24	; 0x15
    129c:	9e 8b       	std	Y+22, r25	; 0x16
    129e:	af 8b       	std	Y+23, r26	; 0x17
    12a0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    12a2:	6d 89       	ldd	r22, Y+21	; 0x15
    12a4:	7e 89       	ldd	r23, Y+22	; 0x16
    12a6:	8f 89       	ldd	r24, Y+23	; 0x17
    12a8:	98 8d       	ldd	r25, Y+24	; 0x18
    12aa:	20 e0       	ldi	r18, 0x00	; 0
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	40 e8       	ldi	r20, 0x80	; 128
    12b0:	5f e3       	ldi	r21, 0x3F	; 63
    12b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12b6:	88 23       	and	r24, r24
    12b8:	2c f4       	brge	.+10     	; 0x12c4 <main+0x750>
		__ticks = 1;
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	9c 8b       	std	Y+20, r25	; 0x14
    12c0:	8b 8b       	std	Y+19, r24	; 0x13
    12c2:	3f c0       	rjmp	.+126    	; 0x1342 <main+0x7ce>
	else if (__tmp > 65535)
    12c4:	6d 89       	ldd	r22, Y+21	; 0x15
    12c6:	7e 89       	ldd	r23, Y+22	; 0x16
    12c8:	8f 89       	ldd	r24, Y+23	; 0x17
    12ca:	98 8d       	ldd	r25, Y+24	; 0x18
    12cc:	20 e0       	ldi	r18, 0x00	; 0
    12ce:	3f ef       	ldi	r19, 0xFF	; 255
    12d0:	4f e7       	ldi	r20, 0x7F	; 127
    12d2:	57 e4       	ldi	r21, 0x47	; 71
    12d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12d8:	18 16       	cp	r1, r24
    12da:	4c f5       	brge	.+82     	; 0x132e <main+0x7ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12dc:	69 8d       	ldd	r22, Y+25	; 0x19
    12de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12e4:	20 e0       	ldi	r18, 0x00	; 0
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	40 e2       	ldi	r20, 0x20	; 32
    12ea:	51 e4       	ldi	r21, 0x41	; 65
    12ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f0:	dc 01       	movw	r26, r24
    12f2:	cb 01       	movw	r24, r22
    12f4:	bc 01       	movw	r22, r24
    12f6:	cd 01       	movw	r24, r26
    12f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12fc:	dc 01       	movw	r26, r24
    12fe:	cb 01       	movw	r24, r22
    1300:	9c 8b       	std	Y+20, r25	; 0x14
    1302:	8b 8b       	std	Y+19, r24	; 0x13
    1304:	0f c0       	rjmp	.+30     	; 0x1324 <main+0x7b0>
    1306:	88 ec       	ldi	r24, 0xC8	; 200
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	9a 8b       	std	Y+18, r25	; 0x12
    130c:	89 8b       	std	Y+17, r24	; 0x11
    130e:	89 89       	ldd	r24, Y+17	; 0x11
    1310:	9a 89       	ldd	r25, Y+18	; 0x12
    1312:	01 97       	sbiw	r24, 0x01	; 1
    1314:	f1 f7       	brne	.-4      	; 0x1312 <main+0x79e>
    1316:	9a 8b       	std	Y+18, r25	; 0x12
    1318:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    131a:	8b 89       	ldd	r24, Y+19	; 0x13
    131c:	9c 89       	ldd	r25, Y+20	; 0x14
    131e:	01 97       	sbiw	r24, 0x01	; 1
    1320:	9c 8b       	std	Y+20, r25	; 0x14
    1322:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1324:	8b 89       	ldd	r24, Y+19	; 0x13
    1326:	9c 89       	ldd	r25, Y+20	; 0x14
    1328:	00 97       	sbiw	r24, 0x00	; 0
    132a:	69 f7       	brne	.-38     	; 0x1306 <main+0x792>
    132c:	14 c0       	rjmp	.+40     	; 0x1356 <main+0x7e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    132e:	6d 89       	ldd	r22, Y+21	; 0x15
    1330:	7e 89       	ldd	r23, Y+22	; 0x16
    1332:	8f 89       	ldd	r24, Y+23	; 0x17
    1334:	98 8d       	ldd	r25, Y+24	; 0x18
    1336:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    133a:	dc 01       	movw	r26, r24
    133c:	cb 01       	movw	r24, r22
    133e:	9c 8b       	std	Y+20, r25	; 0x14
    1340:	8b 8b       	std	Y+19, r24	; 0x13
    1342:	8b 89       	ldd	r24, Y+19	; 0x13
    1344:	9c 89       	ldd	r25, Y+20	; 0x14
    1346:	98 8b       	std	Y+16, r25	; 0x10
    1348:	8f 87       	std	Y+15, r24	; 0x0f
    134a:	8f 85       	ldd	r24, Y+15	; 0x0f
    134c:	98 89       	ldd	r25, Y+16	; 0x10
    134e:	01 97       	sbiw	r24, 0x01	; 1
    1350:	f1 f7       	brne	.-4      	; 0x134e <main+0x7da>
    1352:	98 8b       	std	Y+16, r25	; 0x10
    1354:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(10);
				if (val == re_password[i])
    1356:	fe 01       	movw	r30, r28
    1358:	e2 5b       	subi	r30, 0xB2	; 178
    135a:	ff 4f       	sbci	r31, 0xFF	; 255
    135c:	80 81       	ld	r24, Z
    135e:	28 2f       	mov	r18, r24
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	ce 01       	movw	r24, r28
    1364:	80 5a       	subi	r24, 0xA0	; 160
    1366:	9f 4f       	sbci	r25, 0xFF	; 255
    1368:	fc 01       	movw	r30, r24
    136a:	e2 0f       	add	r30, r18
    136c:	f3 1f       	adc	r31, r19
    136e:	90 81       	ld	r25, Z
    1370:	fe 01       	movw	r30, r28
    1372:	e6 5a       	subi	r30, 0xA6	; 166
    1374:	ff 4f       	sbci	r31, 0xFF	; 255
    1376:	80 81       	ld	r24, Z
    1378:	98 17       	cp	r25, r24
    137a:	49 f4       	brne	.+18     	; 0x138e <main+0x81a>
				{
				   count ++ ;
    137c:	de 01       	movw	r26, r28
    137e:	a3 5b       	subi	r26, 0xB3	; 179
    1380:	bf 4f       	sbci	r27, 0xFF	; 255
    1382:	fe 01       	movw	r30, r28
    1384:	e3 5b       	subi	r30, 0xB3	; 179
    1386:	ff 4f       	sbci	r31, 0xFF	; 255
    1388:	80 81       	ld	r24, Z
    138a:	8f 5f       	subi	r24, 0xFF	; 255
    138c:	8c 93       	st	X, r24
        	for (i=0;i<NUMBER;i++)
			{
				re_password[i]= UART_recieveByte();
			}
        	/*to compare the re_password and the pass in EEPROM*/
			for (i=0;i<NUMBER;i++)
    138e:	de 01       	movw	r26, r28
    1390:	a2 5b       	subi	r26, 0xB2	; 178
    1392:	bf 4f       	sbci	r27, 0xFF	; 255
    1394:	fe 01       	movw	r30, r28
    1396:	e2 5b       	subi	r30, 0xB2	; 178
    1398:	ff 4f       	sbci	r31, 0xFF	; 255
    139a:	80 81       	ld	r24, Z
    139c:	8f 5f       	subi	r24, 0xFF	; 255
    139e:	8c 93       	st	X, r24
    13a0:	fe 01       	movw	r30, r28
    13a2:	e2 5b       	subi	r30, 0xB2	; 178
    13a4:	ff 4f       	sbci	r31, 0xFF	; 255
    13a6:	80 81       	ld	r24, Z
    13a8:	85 30       	cpi	r24, 0x05	; 5
    13aa:	08 f4       	brcc	.+2      	; 0x13ae <main+0x83a>
    13ac:	44 cf       	rjmp	.-376    	; 0x1236 <main+0x6c2>
				   count ++ ;
				}
			}
        }
        /*when received  + */
		if (option ==PLUS)
    13ae:	fe 01       	movw	r30, r28
    13b0:	e6 5b       	subi	r30, 0xB6	; 182
    13b2:	ff 4f       	sbci	r31, 0xFF	; 255
    13b4:	80 81       	ld	r24, Z
    13b6:	8b 32       	cpi	r24, 0x2B	; 43
    13b8:	11 f5       	brne	.+68     	; 0x13fe <main+0x88a>
		{
			 /*if  the two pass are unmatched*/
			if (count != NUMBER)
    13ba:	fe 01       	movw	r30, r28
    13bc:	e3 5b       	subi	r30, 0xB3	; 179
    13be:	ff 4f       	sbci	r31, 0xFF	; 255
    13c0:	80 81       	ld	r24, Z
    13c2:	85 30       	cpi	r24, 0x05	; 5
    13c4:	49 f0       	breq	.+18     	; 0x13d8 <main+0x864>
			{
				/*send UNMATCH to first MICRO*/
				UART_sendByte(UNMATCH);
    13c6:	80 e0       	ldi	r24, 0x00	; 0
    13c8:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <UART_sendByte>
				 /*to go to step 2*/
				match = MATCH ;
    13cc:	fe 01       	movw	r30, r28
    13ce:	e7 5b       	subi	r30, 0xB7	; 183
    13d0:	ff 4f       	sbci	r31, 0xFF	; 255
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	80 83       	st	Z, r24
    13d6:	0a cd       	rjmp	.-1516   	; 0xdec <main+0x278>
				continue ;
			}
			/*if  the two pass are matched*/
			else if (count == NUMBER)
    13d8:	fe 01       	movw	r30, r28
    13da:	e3 5b       	subi	r30, 0xB3	; 179
    13dc:	ff 4f       	sbci	r31, 0xFF	; 255
    13de:	80 81       	ld	r24, Z
    13e0:	85 30       	cpi	r24, 0x05	; 5
    13e2:	41 f4       	brne	.+16     	; 0x13f4 <main+0x880>
			{
				/*send MATCH to first MICRO*/
				UART_sendByte(MATCH);
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <UART_sendByte>
				 /*to go to step 1*/
				change = MATCH ;
    13ea:	fe 01       	movw	r30, r28
    13ec:	e4 5b       	subi	r30, 0xB4	; 180
    13ee:	ff 4f       	sbci	r31, 0xFF	; 255
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	80 83       	st	Z, r24
			}
			count =0 ;
    13f4:	fe 01       	movw	r30, r28
    13f6:	e3 5b       	subi	r30, 0xB3	; 179
    13f8:	ff 4f       	sbci	r31, 0xFF	; 255
    13fa:	10 82       	st	Z, r1
    13fc:	f7 cc       	rjmp	.-1554   	; 0xdec <main+0x278>
		}
		/*when received  - */
		else if ((option == MINUS))
    13fe:	fe 01       	movw	r30, r28
    1400:	e6 5b       	subi	r30, 0xB6	; 182
    1402:	ff 4f       	sbci	r31, 0xFF	; 255
    1404:	80 81       	ld	r24, Z
    1406:	8d 32       	cpi	r24, 0x2D	; 45
    1408:	09 f0       	breq	.+2      	; 0x140c <main+0x898>
    140a:	f0 cc       	rjmp	.-1568   	; 0xdec <main+0x278>
		{
			/*if  the two pass are matched*/
			 if (count == NUMBER)
    140c:	fe 01       	movw	r30, r28
    140e:	e3 5b       	subi	r30, 0xB3	; 179
    1410:	ff 4f       	sbci	r31, 0xFF	; 255
    1412:	80 81       	ld	r24, Z
    1414:	85 30       	cpi	r24, 0x05	; 5
    1416:	09 f0       	breq	.+2      	; 0x141a <main+0x8a6>
    1418:	5f c0       	rjmp	.+190    	; 0x14d8 <main+0x964>
			{
				/*send MATCH to first MICRO*/
				UART_sendByte(MATCH);
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <UART_sendByte>
				/*to go to step 2*/
				open = MATCH ;
    1420:	fe 01       	movw	r30, r28
    1422:	e5 5b       	subi	r30, 0xB5	; 181
    1424:	ff 4f       	sbci	r31, 0xFF	; 255
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	80 83       	st	Z, r24
				match = MATCH ;
    142a:	fe 01       	movw	r30, r28
    142c:	e7 5b       	subi	r30, 0xB7	; 183
    142e:	ff 4f       	sbci	r31, 0xFF	; 255
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	80 83       	st	Z, r24
				/* Rotate the motor --> clock wise for 15 seconds*/
				g_ovfSec = 0;
    1434:	10 92 77 00 	sts	0x0077, r1
    1438:	0e c0       	rjmp	.+28     	; 0x1456 <main+0x8e2>
				while(g_ovfSec < DELAY)
				{
					PORTB &= (~(1<<PB1));
    143a:	a8 e3       	ldi	r26, 0x38	; 56
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	e8 e3       	ldi	r30, 0x38	; 56
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	8d 7f       	andi	r24, 0xFD	; 253
    1446:	8c 93       	st	X, r24
					PORTB |= (1<<PB0);
    1448:	a8 e3       	ldi	r26, 0x38	; 56
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	e8 e3       	ldi	r30, 0x38	; 56
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	81 60       	ori	r24, 0x01	; 1
    1454:	8c 93       	st	X, r24
				/*to go to step 2*/
				open = MATCH ;
				match = MATCH ;
				/* Rotate the motor --> clock wise for 15 seconds*/
				g_ovfSec = 0;
				while(g_ovfSec < DELAY)
    1456:	80 91 77 00 	lds	r24, 0x0077
    145a:	8f 30       	cpi	r24, 0x0F	; 15
    145c:	70 f3       	brcs	.-36     	; 0x143a <main+0x8c6>
				{
					PORTB &= (~(1<<PB1));
					PORTB |= (1<<PB0);
				}
				g_ovfSec=0;
    145e:	10 92 77 00 	sts	0x0077, r1
    1462:	0e c0       	rjmp	.+28     	; 0x1480 <main+0x90c>
				/* Stop the motor for 3 seconds*/
				while(g_ovfSec < STOP)
				{
					PORTB &= (~(1<<PB0));
    1464:	a8 e3       	ldi	r26, 0x38	; 56
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	e8 e3       	ldi	r30, 0x38	; 56
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	8e 7f       	andi	r24, 0xFE	; 254
    1470:	8c 93       	st	X, r24
					PORTB &= (~(1<<PB1));
    1472:	a8 e3       	ldi	r26, 0x38	; 56
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	e8 e3       	ldi	r30, 0x38	; 56
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	8d 7f       	andi	r24, 0xFD	; 253
    147e:	8c 93       	st	X, r24
					PORTB &= (~(1<<PB1));
					PORTB |= (1<<PB0);
				}
				g_ovfSec=0;
				/* Stop the motor for 3 seconds*/
				while(g_ovfSec < STOP)
    1480:	80 91 77 00 	lds	r24, 0x0077
    1484:	83 30       	cpi	r24, 0x03	; 3
    1486:	70 f3       	brcs	.-36     	; 0x1464 <main+0x8f0>
				{
					PORTB &= (~(1<<PB0));
					PORTB &= (~(1<<PB1));
				}
				g_ovfSec =0 ;
    1488:	10 92 77 00 	sts	0x0077, r1
    148c:	0e c0       	rjmp	.+28     	; 0x14aa <main+0x936>
				/* Rotate the motor --> anti-clock wise for 15 seconds*/
				while(g_ovfSec < DELAY)
				{
					PORTB &= (~(1<<PB0));
    148e:	a8 e3       	ldi	r26, 0x38	; 56
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	e8 e3       	ldi	r30, 0x38	; 56
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	8e 7f       	andi	r24, 0xFE	; 254
    149a:	8c 93       	st	X, r24
					PORTB |= (1<<PB1);
    149c:	a8 e3       	ldi	r26, 0x38	; 56
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	e8 e3       	ldi	r30, 0x38	; 56
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	82 60       	ori	r24, 0x02	; 2
    14a8:	8c 93       	st	X, r24
					PORTB &= (~(1<<PB0));
					PORTB &= (~(1<<PB1));
				}
				g_ovfSec =0 ;
				/* Rotate the motor --> anti-clock wise for 15 seconds*/
				while(g_ovfSec < DELAY)
    14aa:	80 91 77 00 	lds	r24, 0x0077
    14ae:	8f 30       	cpi	r24, 0x0F	; 15
    14b0:	70 f3       	brcs	.-36     	; 0x148e <main+0x91a>
				{
					PORTB &= (~(1<<PB0));
					PORTB |= (1<<PB1);
				}
				/* Stop the motor */
				PORTB &= (~(1<<PB0));
    14b2:	a8 e3       	ldi	r26, 0x38	; 56
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	e8 e3       	ldi	r30, 0x38	; 56
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	8e 7f       	andi	r24, 0xFE	; 254
    14be:	8c 93       	st	X, r24
				PORTB &= (~(1<<PB1));
    14c0:	a8 e3       	ldi	r26, 0x38	; 56
    14c2:	b0 e0       	ldi	r27, 0x00	; 0
    14c4:	e8 e3       	ldi	r30, 0x38	; 56
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	8d 7f       	andi	r24, 0xFD	; 253
    14cc:	8c 93       	st	X, r24
				count =0 ;
    14ce:	fe 01       	movw	r30, r28
    14d0:	e3 5b       	subi	r30, 0xB3	; 179
    14d2:	ff 4f       	sbci	r31, 0xFF	; 255
    14d4:	10 82       	st	Z, r1
    14d6:	8a cc       	rjmp	.-1772   	; 0xdec <main+0x278>
				continue ;
			}
			 /*if  the two pass are unmatched*/
			else if (count != NUMBER)
    14d8:	fe 01       	movw	r30, r28
    14da:	e3 5b       	subi	r30, 0xB3	; 179
    14dc:	ff 4f       	sbci	r31, 0xFF	; 255
    14de:	80 81       	ld	r24, Z
    14e0:	85 30       	cpi	r24, 0x05	; 5
    14e2:	09 f4       	brne	.+2      	; 0x14e6 <main+0x972>
    14e4:	83 cc       	rjmp	.-1786   	; 0xdec <main+0x278>
			{
				/*send UNMATCH to first MICRO*/
				UART_sendByte(UNMATCH);
    14e6:	80 e0       	ldi	r24, 0x00	; 0
    14e8:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <UART_sendByte>
    14ec:	53 c1       	rjmp	.+678    	; 0x1794 <main+0xc20>
				/* static local variable to count*/
				static uint8 block = 1 ;
				/*to compare the two pass if still unmatched */
				while (( block < 3) && (count != NUMBER))
				{
					count = 0; //initial count to zero
    14ee:	fe 01       	movw	r30, r28
    14f0:	e3 5b       	subi	r30, 0xB3	; 179
    14f2:	ff 4f       	sbci	r31, 0xFF	; 255
    14f4:	10 82       	st	Z, r1
					block ++ ;
    14f6:	80 91 68 00 	lds	r24, 0x0068
    14fa:	8f 5f       	subi	r24, 0xFF	; 255
    14fc:	80 93 68 00 	sts	0x0068, r24
					/*to receive the pass and save it in the array*/
					for (i=0;i<NUMBER;i++)
    1500:	fe 01       	movw	r30, r28
    1502:	e2 5b       	subi	r30, 0xB2	; 178
    1504:	ff 4f       	sbci	r31, 0xFF	; 255
    1506:	10 82       	st	Z, r1
    1508:	19 c0       	rjmp	.+50     	; 0x153c <main+0x9c8>
					{
						re_password[i]= UART_recieveByte();
    150a:	fe 01       	movw	r30, r28
    150c:	e2 5b       	subi	r30, 0xB2	; 178
    150e:	ff 4f       	sbci	r31, 0xFF	; 255
    1510:	80 81       	ld	r24, Z
    1512:	08 2f       	mov	r16, r24
    1514:	10 e0       	ldi	r17, 0x00	; 0
    1516:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <UART_recieveByte>
    151a:	28 2f       	mov	r18, r24
    151c:	ce 01       	movw	r24, r28
    151e:	80 5a       	subi	r24, 0xA0	; 160
    1520:	9f 4f       	sbci	r25, 0xFF	; 255
    1522:	fc 01       	movw	r30, r24
    1524:	e0 0f       	add	r30, r16
    1526:	f1 1f       	adc	r31, r17
    1528:	20 83       	st	Z, r18
				while (( block < 3) && (count != NUMBER))
				{
					count = 0; //initial count to zero
					block ++ ;
					/*to receive the pass and save it in the array*/
					for (i=0;i<NUMBER;i++)
    152a:	de 01       	movw	r26, r28
    152c:	a2 5b       	subi	r26, 0xB2	; 178
    152e:	bf 4f       	sbci	r27, 0xFF	; 255
    1530:	fe 01       	movw	r30, r28
    1532:	e2 5b       	subi	r30, 0xB2	; 178
    1534:	ff 4f       	sbci	r31, 0xFF	; 255
    1536:	80 81       	ld	r24, Z
    1538:	8f 5f       	subi	r24, 0xFF	; 255
    153a:	8c 93       	st	X, r24
    153c:	fe 01       	movw	r30, r28
    153e:	e2 5b       	subi	r30, 0xB2	; 178
    1540:	ff 4f       	sbci	r31, 0xFF	; 255
    1542:	80 81       	ld	r24, Z
    1544:	85 30       	cpi	r24, 0x05	; 5
    1546:	08 f3       	brcs	.-62     	; 0x150a <main+0x996>
					{
						re_password[i]= UART_recieveByte();
					}
					/*to compare the re_password and the pass in EEPROM*/
					for (i=0;i<NUMBER;i++)
    1548:	fe 01       	movw	r30, r28
    154a:	e2 5b       	subi	r30, 0xB2	; 178
    154c:	ff 4f       	sbci	r31, 0xFF	; 255
    154e:	10 82       	st	Z, r1
    1550:	b5 c0       	rjmp	.+362    	; 0x16bc <main+0xb48>
					{
						address = (0x0311)+16*i;
    1552:	fe 01       	movw	r30, r28
    1554:	e2 5b       	subi	r30, 0xB2	; 178
    1556:	ff 4f       	sbci	r31, 0xFF	; 255
    1558:	80 81       	ld	r24, Z
    155a:	88 2f       	mov	r24, r24
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	82 95       	swap	r24
    1560:	92 95       	swap	r25
    1562:	90 7f       	andi	r25, 0xF0	; 240
    1564:	98 27       	eor	r25, r24
    1566:	80 7f       	andi	r24, 0xF0	; 240
    1568:	98 27       	eor	r25, r24
    156a:	8f 5e       	subi	r24, 0xEF	; 239
    156c:	9c 4f       	sbci	r25, 0xFC	; 252
    156e:	fe 01       	movw	r30, r28
    1570:	e9 5b       	subi	r30, 0xB9	; 185
    1572:	ff 4f       	sbci	r31, 0xFF	; 255
    1574:	91 83       	std	Z+1, r25	; 0x01
    1576:	80 83       	st	Z, r24
						EEPROM_readByte(address , &val);
    1578:	fe 01       	movw	r30, r28
    157a:	e9 5b       	subi	r30, 0xB9	; 185
    157c:	ff 4f       	sbci	r31, 0xFF	; 255
    157e:	80 81       	ld	r24, Z
    1580:	91 81       	ldd	r25, Z+1	; 0x01
    1582:	9e 01       	movw	r18, r28
    1584:	26 5a       	subi	r18, 0xA6	; 166
    1586:	3f 4f       	sbci	r19, 0xFF	; 255
    1588:	b9 01       	movw	r22, r18
    158a:	0e 94 3f 0c 	call	0x187e	; 0x187e <EEPROM_readByte>
    158e:	80 e0       	ldi	r24, 0x00	; 0
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	a0 e2       	ldi	r26, 0x20	; 32
    1594:	b1 e4       	ldi	r27, 0x41	; 65
    1596:	8b 87       	std	Y+11, r24	; 0x0b
    1598:	9c 87       	std	Y+12, r25	; 0x0c
    159a:	ad 87       	std	Y+13, r26	; 0x0d
    159c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    159e:	6b 85       	ldd	r22, Y+11	; 0x0b
    15a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    15a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    15a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    15a6:	20 e0       	ldi	r18, 0x00	; 0
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	4a ef       	ldi	r20, 0xFA	; 250
    15ac:	54 e4       	ldi	r21, 0x44	; 68
    15ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15b2:	dc 01       	movw	r26, r24
    15b4:	cb 01       	movw	r24, r22
    15b6:	8f 83       	std	Y+7, r24	; 0x07
    15b8:	98 87       	std	Y+8, r25	; 0x08
    15ba:	a9 87       	std	Y+9, r26	; 0x09
    15bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15be:	6f 81       	ldd	r22, Y+7	; 0x07
    15c0:	78 85       	ldd	r23, Y+8	; 0x08
    15c2:	89 85       	ldd	r24, Y+9	; 0x09
    15c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    15c6:	20 e0       	ldi	r18, 0x00	; 0
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	40 e8       	ldi	r20, 0x80	; 128
    15cc:	5f e3       	ldi	r21, 0x3F	; 63
    15ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15d2:	88 23       	and	r24, r24
    15d4:	2c f4       	brge	.+10     	; 0x15e0 <main+0xa6c>
		__ticks = 1;
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	9e 83       	std	Y+6, r25	; 0x06
    15dc:	8d 83       	std	Y+5, r24	; 0x05
    15de:	3f c0       	rjmp	.+126    	; 0x165e <main+0xaea>
	else if (__tmp > 65535)
    15e0:	6f 81       	ldd	r22, Y+7	; 0x07
    15e2:	78 85       	ldd	r23, Y+8	; 0x08
    15e4:	89 85       	ldd	r24, Y+9	; 0x09
    15e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    15e8:	20 e0       	ldi	r18, 0x00	; 0
    15ea:	3f ef       	ldi	r19, 0xFF	; 255
    15ec:	4f e7       	ldi	r20, 0x7F	; 127
    15ee:	57 e4       	ldi	r21, 0x47	; 71
    15f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15f4:	18 16       	cp	r1, r24
    15f6:	4c f5       	brge	.+82     	; 0x164a <main+0xad6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    15fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    15fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    15fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1600:	20 e0       	ldi	r18, 0x00	; 0
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	40 e2       	ldi	r20, 0x20	; 32
    1606:	51 e4       	ldi	r21, 0x41	; 65
    1608:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    160c:	dc 01       	movw	r26, r24
    160e:	cb 01       	movw	r24, r22
    1610:	bc 01       	movw	r22, r24
    1612:	cd 01       	movw	r24, r26
    1614:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1618:	dc 01       	movw	r26, r24
    161a:	cb 01       	movw	r24, r22
    161c:	9e 83       	std	Y+6, r25	; 0x06
    161e:	8d 83       	std	Y+5, r24	; 0x05
    1620:	0f c0       	rjmp	.+30     	; 0x1640 <main+0xacc>
    1622:	88 ec       	ldi	r24, 0xC8	; 200
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	9c 83       	std	Y+4, r25	; 0x04
    1628:	8b 83       	std	Y+3, r24	; 0x03
    162a:	8b 81       	ldd	r24, Y+3	; 0x03
    162c:	9c 81       	ldd	r25, Y+4	; 0x04
    162e:	01 97       	sbiw	r24, 0x01	; 1
    1630:	f1 f7       	brne	.-4      	; 0x162e <main+0xaba>
    1632:	9c 83       	std	Y+4, r25	; 0x04
    1634:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1636:	8d 81       	ldd	r24, Y+5	; 0x05
    1638:	9e 81       	ldd	r25, Y+6	; 0x06
    163a:	01 97       	sbiw	r24, 0x01	; 1
    163c:	9e 83       	std	Y+6, r25	; 0x06
    163e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1640:	8d 81       	ldd	r24, Y+5	; 0x05
    1642:	9e 81       	ldd	r25, Y+6	; 0x06
    1644:	00 97       	sbiw	r24, 0x00	; 0
    1646:	69 f7       	brne	.-38     	; 0x1622 <main+0xaae>
    1648:	14 c0       	rjmp	.+40     	; 0x1672 <main+0xafe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    164a:	6f 81       	ldd	r22, Y+7	; 0x07
    164c:	78 85       	ldd	r23, Y+8	; 0x08
    164e:	89 85       	ldd	r24, Y+9	; 0x09
    1650:	9a 85       	ldd	r25, Y+10	; 0x0a
    1652:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1656:	dc 01       	movw	r26, r24
    1658:	cb 01       	movw	r24, r22
    165a:	9e 83       	std	Y+6, r25	; 0x06
    165c:	8d 83       	std	Y+5, r24	; 0x05
    165e:	8d 81       	ldd	r24, Y+5	; 0x05
    1660:	9e 81       	ldd	r25, Y+6	; 0x06
    1662:	9a 83       	std	Y+2, r25	; 0x02
    1664:	89 83       	std	Y+1, r24	; 0x01
    1666:	89 81       	ldd	r24, Y+1	; 0x01
    1668:	9a 81       	ldd	r25, Y+2	; 0x02
    166a:	01 97       	sbiw	r24, 0x01	; 1
    166c:	f1 f7       	brne	.-4      	; 0x166a <main+0xaf6>
    166e:	9a 83       	std	Y+2, r25	; 0x02
    1670:	89 83       	std	Y+1, r24	; 0x01
						_delay_ms(10);
						if (val == re_password[i])
    1672:	fe 01       	movw	r30, r28
    1674:	e2 5b       	subi	r30, 0xB2	; 178
    1676:	ff 4f       	sbci	r31, 0xFF	; 255
    1678:	80 81       	ld	r24, Z
    167a:	28 2f       	mov	r18, r24
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	ce 01       	movw	r24, r28
    1680:	80 5a       	subi	r24, 0xA0	; 160
    1682:	9f 4f       	sbci	r25, 0xFF	; 255
    1684:	fc 01       	movw	r30, r24
    1686:	e2 0f       	add	r30, r18
    1688:	f3 1f       	adc	r31, r19
    168a:	90 81       	ld	r25, Z
    168c:	fe 01       	movw	r30, r28
    168e:	e6 5a       	subi	r30, 0xA6	; 166
    1690:	ff 4f       	sbci	r31, 0xFF	; 255
    1692:	80 81       	ld	r24, Z
    1694:	98 17       	cp	r25, r24
    1696:	49 f4       	brne	.+18     	; 0x16aa <main+0xb36>
						{
						   count ++ ;
    1698:	de 01       	movw	r26, r28
    169a:	a3 5b       	subi	r26, 0xB3	; 179
    169c:	bf 4f       	sbci	r27, 0xFF	; 255
    169e:	fe 01       	movw	r30, r28
    16a0:	e3 5b       	subi	r30, 0xB3	; 179
    16a2:	ff 4f       	sbci	r31, 0xFF	; 255
    16a4:	80 81       	ld	r24, Z
    16a6:	8f 5f       	subi	r24, 0xFF	; 255
    16a8:	8c 93       	st	X, r24
					for (i=0;i<NUMBER;i++)
					{
						re_password[i]= UART_recieveByte();
					}
					/*to compare the re_password and the pass in EEPROM*/
					for (i=0;i<NUMBER;i++)
    16aa:	de 01       	movw	r26, r28
    16ac:	a2 5b       	subi	r26, 0xB2	; 178
    16ae:	bf 4f       	sbci	r27, 0xFF	; 255
    16b0:	fe 01       	movw	r30, r28
    16b2:	e2 5b       	subi	r30, 0xB2	; 178
    16b4:	ff 4f       	sbci	r31, 0xFF	; 255
    16b6:	80 81       	ld	r24, Z
    16b8:	8f 5f       	subi	r24, 0xFF	; 255
    16ba:	8c 93       	st	X, r24
    16bc:	fe 01       	movw	r30, r28
    16be:	e2 5b       	subi	r30, 0xB2	; 178
    16c0:	ff 4f       	sbci	r31, 0xFF	; 255
    16c2:	80 81       	ld	r24, Z
    16c4:	85 30       	cpi	r24, 0x05	; 5
    16c6:	08 f4       	brcc	.+2      	; 0x16ca <main+0xb56>
    16c8:	44 cf       	rjmp	.-376    	; 0x1552 <main+0x9de>
						{
						   count ++ ;
						}
					}
					 /*if  the two pass are unmatched*/
					if ((count != NUMBER))
    16ca:	fe 01       	movw	r30, r28
    16cc:	e3 5b       	subi	r30, 0xB3	; 179
    16ce:	ff 4f       	sbci	r31, 0xFF	; 255
    16d0:	80 81       	ld	r24, Z
    16d2:	85 30       	cpi	r24, 0x05	; 5
    16d4:	21 f0       	breq	.+8      	; 0x16de <main+0xb6a>
					{
						/*send UNMATCH to first MICRO*/
						UART_sendByte(UNMATCH);
    16d6:	80 e0       	ldi	r24, 0x00	; 0
    16d8:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <UART_sendByte>
    16dc:	5b c0       	rjmp	.+182    	; 0x1794 <main+0xc20>
					}
					 /*if  the two pass are matched*/
					else if ((count == NUMBER))
    16de:	fe 01       	movw	r30, r28
    16e0:	e3 5b       	subi	r30, 0xB3	; 179
    16e2:	ff 4f       	sbci	r31, 0xFF	; 255
    16e4:	80 81       	ld	r24, Z
    16e6:	85 30       	cpi	r24, 0x05	; 5
    16e8:	09 f0       	breq	.+2      	; 0x16ec <main+0xb78>
    16ea:	54 c0       	rjmp	.+168    	; 0x1794 <main+0xc20>
					{
						/*send MATCH to first MICRO*/
						UART_sendByte(MATCH);
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <UART_sendByte>
						/* Rotate the motor --> clock wise for 15 seconds*/
						g_ovfSec = 0;
    16f2:	10 92 77 00 	sts	0x0077, r1
    16f6:	0e c0       	rjmp	.+28     	; 0x1714 <main+0xba0>
						while(g_ovfSec < DELAY)
						{
							PORTB &= (~(1<<PB1));
    16f8:	a8 e3       	ldi	r26, 0x38	; 56
    16fa:	b0 e0       	ldi	r27, 0x00	; 0
    16fc:	e8 e3       	ldi	r30, 0x38	; 56
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	8d 7f       	andi	r24, 0xFD	; 253
    1704:	8c 93       	st	X, r24
							PORTB |= (1<<PB0);
    1706:	a8 e3       	ldi	r26, 0x38	; 56
    1708:	b0 e0       	ldi	r27, 0x00	; 0
    170a:	e8 e3       	ldi	r30, 0x38	; 56
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	81 60       	ori	r24, 0x01	; 1
    1712:	8c 93       	st	X, r24
					{
						/*send MATCH to first MICRO*/
						UART_sendByte(MATCH);
						/* Rotate the motor --> clock wise for 15 seconds*/
						g_ovfSec = 0;
						while(g_ovfSec < DELAY)
    1714:	80 91 77 00 	lds	r24, 0x0077
    1718:	8f 30       	cpi	r24, 0x0F	; 15
    171a:	70 f3       	brcs	.-36     	; 0x16f8 <main+0xb84>
						{
							PORTB &= (~(1<<PB1));
							PORTB |= (1<<PB0);
						}
						g_ovfSec=0;
    171c:	10 92 77 00 	sts	0x0077, r1
    1720:	0e c0       	rjmp	.+28     	; 0x173e <main+0xbca>
						/* Stop the motor for 3 seconds*/
						while(g_ovfSec < STOP)
						{
							PORTB &= (~(1<<PB0));
    1722:	a8 e3       	ldi	r26, 0x38	; 56
    1724:	b0 e0       	ldi	r27, 0x00	; 0
    1726:	e8 e3       	ldi	r30, 0x38	; 56
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	8e 7f       	andi	r24, 0xFE	; 254
    172e:	8c 93       	st	X, r24
							PORTB &= (~(1<<PB1));
    1730:	a8 e3       	ldi	r26, 0x38	; 56
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	e8 e3       	ldi	r30, 0x38	; 56
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	8d 7f       	andi	r24, 0xFD	; 253
    173c:	8c 93       	st	X, r24
							PORTB &= (~(1<<PB1));
							PORTB |= (1<<PB0);
						}
						g_ovfSec=0;
						/* Stop the motor for 3 seconds*/
						while(g_ovfSec < STOP)
    173e:	80 91 77 00 	lds	r24, 0x0077
    1742:	83 30       	cpi	r24, 0x03	; 3
    1744:	70 f3       	brcs	.-36     	; 0x1722 <main+0xbae>
						{
							PORTB &= (~(1<<PB0));
							PORTB &= (~(1<<PB1));
						}
						g_ovfSec =0 ;
    1746:	10 92 77 00 	sts	0x0077, r1
    174a:	0e c0       	rjmp	.+28     	; 0x1768 <main+0xbf4>
						/* Rotate the motor --> anti-clock wise for 15 seconds*/
						while(g_ovfSec < DELAY)
						{
							PORTB &= (~(1<<PB0));
    174c:	a8 e3       	ldi	r26, 0x38	; 56
    174e:	b0 e0       	ldi	r27, 0x00	; 0
    1750:	e8 e3       	ldi	r30, 0x38	; 56
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 81       	ld	r24, Z
    1756:	8e 7f       	andi	r24, 0xFE	; 254
    1758:	8c 93       	st	X, r24
							PORTB |= (1<<PB1);
    175a:	a8 e3       	ldi	r26, 0x38	; 56
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	e8 e3       	ldi	r30, 0x38	; 56
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	82 60       	ori	r24, 0x02	; 2
    1766:	8c 93       	st	X, r24
							PORTB &= (~(1<<PB0));
							PORTB &= (~(1<<PB1));
						}
						g_ovfSec =0 ;
						/* Rotate the motor --> anti-clock wise for 15 seconds*/
						while(g_ovfSec < DELAY)
    1768:	80 91 77 00 	lds	r24, 0x0077
    176c:	8f 30       	cpi	r24, 0x0F	; 15
    176e:	70 f3       	brcs	.-36     	; 0x174c <main+0xbd8>
						{
							PORTB &= (~(1<<PB0));
							PORTB |= (1<<PB1);
						}
						/* Stop the motor */
						PORTB &= (~(1<<PB0));
    1770:	a8 e3       	ldi	r26, 0x38	; 56
    1772:	b0 e0       	ldi	r27, 0x00	; 0
    1774:	e8 e3       	ldi	r30, 0x38	; 56
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	80 81       	ld	r24, Z
    177a:	8e 7f       	andi	r24, 0xFE	; 254
    177c:	8c 93       	st	X, r24
						PORTB &= (~(1<<PB1));
    177e:	a8 e3       	ldi	r26, 0x38	; 56
    1780:	b0 e0       	ldi	r27, 0x00	; 0
    1782:	e8 e3       	ldi	r30, 0x38	; 56
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	8d 7f       	andi	r24, 0xFD	; 253
    178a:	8c 93       	st	X, r24
						count =0 ;
    178c:	fe 01       	movw	r30, r28
    178e:	e3 5b       	subi	r30, 0xB3	; 179
    1790:	ff 4f       	sbci	r31, 0xFF	; 255
    1792:	10 82       	st	Z, r1
				/*send UNMATCH to first MICRO*/
				UART_sendByte(UNMATCH);
				/* static local variable to count*/
				static uint8 block = 1 ;
				/*to compare the two pass if still unmatched */
				while (( block < 3) && (count != NUMBER))
    1794:	80 91 68 00 	lds	r24, 0x0068
    1798:	83 30       	cpi	r24, 0x03	; 3
    179a:	38 f4       	brcc	.+14     	; 0x17aa <main+0xc36>
    179c:	fe 01       	movw	r30, r28
    179e:	e3 5b       	subi	r30, 0xB3	; 179
    17a0:	ff 4f       	sbci	r31, 0xFF	; 255
    17a2:	80 81       	ld	r24, Z
    17a4:	85 30       	cpi	r24, 0x05	; 5
    17a6:	09 f0       	breq	.+2      	; 0x17aa <main+0xc36>
    17a8:	a2 ce       	rjmp	.-700    	; 0x14ee <main+0x97a>
						count =0 ;
						continue ;
					}
				}
				/*the user enter the pass 3 times wrong*/
				if (block == 3)
    17aa:	80 91 68 00 	lds	r24, 0x0068
    17ae:	83 30       	cpi	r24, 0x03	; 3
    17b0:	71 f4       	brne	.+28     	; 0x17ce <main+0xc5a>
				{
					/*trigger buzzer for a minute*/
					g_ovfSec = 0;
    17b2:	10 92 77 00 	sts	0x0077, r1
    17b6:	07 c0       	rjmp	.+14     	; 0x17c6 <main+0xc52>
					while(g_ovfSec < MIN)
					{
						PORTD |= (1<<PD3 );
    17b8:	a2 e3       	ldi	r26, 0x32	; 50
    17ba:	b0 e0       	ldi	r27, 0x00	; 0
    17bc:	e2 e3       	ldi	r30, 0x32	; 50
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 81       	ld	r24, Z
    17c2:	88 60       	ori	r24, 0x08	; 8
    17c4:	8c 93       	st	X, r24
				/*the user enter the pass 3 times wrong*/
				if (block == 3)
				{
					/*trigger buzzer for a minute*/
					g_ovfSec = 0;
					while(g_ovfSec < MIN)
    17c6:	80 91 77 00 	lds	r24, 0x0077
    17ca:	8c 33       	cpi	r24, 0x3C	; 60
    17cc:	a8 f3       	brcs	.-22     	; 0x17b8 <main+0xc44>
					{
						PORTD |= (1<<PD3 );
					}
				}
				/* stop the buzzer*/
				PORTD &= ~(1<<PD3 );
    17ce:	a2 e3       	ldi	r26, 0x32	; 50
    17d0:	b0 e0       	ldi	r27, 0x00	; 0
    17d2:	e2 e3       	ldi	r30, 0x32	; 50
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	80 81       	ld	r24, Z
    17d8:	87 7f       	andi	r24, 0xF7	; 247
    17da:	8c 93       	st	X, r24
				 /*to go to step 1*/
				match = UNMATCH ;
    17dc:	fe 01       	movw	r30, r28
    17de:	e7 5b       	subi	r30, 0xB7	; 183
    17e0:	ff 4f       	sbci	r31, 0xFF	; 255
    17e2:	10 82       	st	Z, r1
    17e4:	03 cb       	rjmp	.-2554   	; 0xdec <main+0x278>

000017e6 <EEPROM_init>:
#include "external_eeprom.h"

I2c_ConfigType stru ={FAST_MODE,1};

void EEPROM_init(void)
{
    17e6:	df 93       	push	r29
    17e8:	cf 93       	push	r28
    17ea:	cd b7       	in	r28, 0x3d	; 61
    17ec:	de b7       	in	r29, 0x3e	; 62
	/* just initialize the I2C(TWI) module inside the MC */
	TWI_init(&stru);
    17ee:	89 e6       	ldi	r24, 0x69	; 105
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	0e 94 9f 0c 	call	0x193e	; 0x193e <TWI_init>
}
    17f6:	cf 91       	pop	r28
    17f8:	df 91       	pop	r29
    17fa:	08 95       	ret

000017fc <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    17fc:	df 93       	push	r29
    17fe:	cf 93       	push	r28
    1800:	00 d0       	rcall	.+0      	; 0x1802 <EEPROM_writeByte+0x6>
    1802:	00 d0       	rcall	.+0      	; 0x1804 <EEPROM_writeByte+0x8>
    1804:	cd b7       	in	r28, 0x3d	; 61
    1806:	de b7       	in	r29, 0x3e	; 62
    1808:	9a 83       	std	Y+2, r25	; 0x02
    180a:	89 83       	std	Y+1, r24	; 0x01
    180c:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    180e:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <TWI_start>
    if (TWI_getStatus() != TW_START)
    1812:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <TWI_getStatus>
    1816:	88 30       	cpi	r24, 0x08	; 8
    1818:	11 f0       	breq	.+4      	; 0x181e <EEPROM_writeByte+0x22>
        return ERROR;
    181a:	1c 82       	std	Y+4, r1	; 0x04
    181c:	28 c0       	rjmp	.+80     	; 0x186e <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    181e:	89 81       	ldd	r24, Y+1	; 0x01
    1820:	9a 81       	ldd	r25, Y+2	; 0x02
    1822:	80 70       	andi	r24, 0x00	; 0
    1824:	97 70       	andi	r25, 0x07	; 7
    1826:	88 0f       	add	r24, r24
    1828:	89 2f       	mov	r24, r25
    182a:	88 1f       	adc	r24, r24
    182c:	99 0b       	sbc	r25, r25
    182e:	91 95       	neg	r25
    1830:	80 6a       	ori	r24, 0xA0	; 160
    1832:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    1836:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <TWI_getStatus>
    183a:	88 31       	cpi	r24, 0x18	; 24
    183c:	11 f0       	breq	.+4      	; 0x1842 <EEPROM_writeByte+0x46>
        return ERROR; 
    183e:	1c 82       	std	Y+4, r1	; 0x04
    1840:	16 c0       	rjmp	.+44     	; 0x186e <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    1842:	89 81       	ldd	r24, Y+1	; 0x01
    1844:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    1848:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <TWI_getStatus>
    184c:	88 32       	cpi	r24, 0x28	; 40
    184e:	11 f0       	breq	.+4      	; 0x1854 <EEPROM_writeByte+0x58>
        return ERROR;
    1850:	1c 82       	std	Y+4, r1	; 0x04
    1852:	0d c0       	rjmp	.+26     	; 0x186e <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_write(u8data);
    1854:	8b 81       	ldd	r24, Y+3	; 0x03
    1856:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    185a:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <TWI_getStatus>
    185e:	88 32       	cpi	r24, 0x28	; 40
    1860:	11 f0       	breq	.+4      	; 0x1866 <EEPROM_writeByte+0x6a>
        return ERROR;
    1862:	1c 82       	std	Y+4, r1	; 0x04
    1864:	04 c0       	rjmp	.+8      	; 0x186e <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1866:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <TWI_stop>
	
    return SUCCESS;
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	8c 83       	std	Y+4, r24	; 0x04
    186e:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1870:	0f 90       	pop	r0
    1872:	0f 90       	pop	r0
    1874:	0f 90       	pop	r0
    1876:	0f 90       	pop	r0
    1878:	cf 91       	pop	r28
    187a:	df 91       	pop	r29
    187c:	08 95       	ret

0000187e <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    187e:	df 93       	push	r29
    1880:	cf 93       	push	r28
    1882:	00 d0       	rcall	.+0      	; 0x1884 <EEPROM_readByte+0x6>
    1884:	00 d0       	rcall	.+0      	; 0x1886 <EEPROM_readByte+0x8>
    1886:	0f 92       	push	r0
    1888:	cd b7       	in	r28, 0x3d	; 61
    188a:	de b7       	in	r29, 0x3e	; 62
    188c:	9a 83       	std	Y+2, r25	; 0x02
    188e:	89 83       	std	Y+1, r24	; 0x01
    1890:	7c 83       	std	Y+4, r23	; 0x04
    1892:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1894:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <TWI_start>
    if (TWI_getStatus() != TW_START)
    1898:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <TWI_getStatus>
    189c:	88 30       	cpi	r24, 0x08	; 8
    189e:	11 f0       	breq	.+4      	; 0x18a4 <EEPROM_readByte+0x26>
        return ERROR;
    18a0:	1d 82       	std	Y+5, r1	; 0x05
    18a2:	44 c0       	rjmp	.+136    	; 0x192c <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    18a4:	89 81       	ldd	r24, Y+1	; 0x01
    18a6:	9a 81       	ldd	r25, Y+2	; 0x02
    18a8:	80 70       	andi	r24, 0x00	; 0
    18aa:	97 70       	andi	r25, 0x07	; 7
    18ac:	88 0f       	add	r24, r24
    18ae:	89 2f       	mov	r24, r25
    18b0:	88 1f       	adc	r24, r24
    18b2:	99 0b       	sbc	r25, r25
    18b4:	91 95       	neg	r25
    18b6:	80 6a       	ori	r24, 0xA0	; 160
    18b8:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    18bc:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <TWI_getStatus>
    18c0:	88 31       	cpi	r24, 0x18	; 24
    18c2:	11 f0       	breq	.+4      	; 0x18c8 <EEPROM_readByte+0x4a>
        return ERROR;
    18c4:	1d 82       	std	Y+5, r1	; 0x05
    18c6:	32 c0       	rjmp	.+100    	; 0x192c <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    18c8:	89 81       	ldd	r24, Y+1	; 0x01
    18ca:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    18ce:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <TWI_getStatus>
    18d2:	88 32       	cpi	r24, 0x28	; 40
    18d4:	11 f0       	breq	.+4      	; 0x18da <EEPROM_readByte+0x5c>
        return ERROR;
    18d6:	1d 82       	std	Y+5, r1	; 0x05
    18d8:	29 c0       	rjmp	.+82     	; 0x192c <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    18da:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <TWI_start>
    if (TWI_getStatus() != TW_REP_START)
    18de:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <TWI_getStatus>
    18e2:	80 31       	cpi	r24, 0x10	; 16
    18e4:	11 f0       	breq	.+4      	; 0x18ea <EEPROM_readByte+0x6c>
        return ERROR;
    18e6:	1d 82       	std	Y+5, r1	; 0x05
    18e8:	21 c0       	rjmp	.+66     	; 0x192c <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    18ea:	89 81       	ldd	r24, Y+1	; 0x01
    18ec:	9a 81       	ldd	r25, Y+2	; 0x02
    18ee:	80 70       	andi	r24, 0x00	; 0
    18f0:	97 70       	andi	r25, 0x07	; 7
    18f2:	88 0f       	add	r24, r24
    18f4:	89 2f       	mov	r24, r25
    18f6:	88 1f       	adc	r24, r24
    18f8:	99 0b       	sbc	r25, r25
    18fa:	91 95       	neg	r25
    18fc:	81 6a       	ori	r24, 0xA1	; 161
    18fe:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_R_ACK)
    1902:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <TWI_getStatus>
    1906:	80 34       	cpi	r24, 0x40	; 64
    1908:	11 f0       	breq	.+4      	; 0x190e <EEPROM_readByte+0x90>
        return ERROR;
    190a:	1d 82       	std	Y+5, r1	; 0x05
    190c:	0f c0       	rjmp	.+30     	; 0x192c <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readWithNACK();
    190e:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <TWI_readWithNACK>
    1912:	eb 81       	ldd	r30, Y+3	; 0x03
    1914:	fc 81       	ldd	r31, Y+4	; 0x04
    1916:	80 83       	st	Z, r24
    if (TWI_getStatus() != TW_MR_DATA_NACK)
    1918:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <TWI_getStatus>
    191c:	88 35       	cpi	r24, 0x58	; 88
    191e:	11 f0       	breq	.+4      	; 0x1924 <EEPROM_readByte+0xa6>
        return ERROR;
    1920:	1d 82       	std	Y+5, r1	; 0x05
    1922:	04 c0       	rjmp	.+8      	; 0x192c <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1924:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <TWI_stop>
    return SUCCESS;
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	8d 83       	std	Y+5, r24	; 0x05
    192c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    192e:	0f 90       	pop	r0
    1930:	0f 90       	pop	r0
    1932:	0f 90       	pop	r0
    1934:	0f 90       	pop	r0
    1936:	0f 90       	pop	r0
    1938:	cf 91       	pop	r28
    193a:	df 91       	pop	r29
    193c:	08 95       	ret

0000193e <TWI_init>:
 *******************************************************************************/

#include "i2c.h"

void TWI_init(const I2c_ConfigType * Config_Ptr)
{
    193e:	0f 93       	push	r16
    1940:	1f 93       	push	r17
    1942:	df 93       	push	r29
    1944:	cf 93       	push	r28
    1946:	00 d0       	rcall	.+0      	; 0x1948 <TWI_init+0xa>
    1948:	cd b7       	in	r28, 0x3d	; 61
    194a:	de b7       	in	r29, 0x3e	; 62
    194c:	9a 83       	std	Y+2, r25	; 0x02
    194e:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
	TWBR = ((F_CPU/Config_Ptr->baud)-16)/2;
    1950:	00 e2       	ldi	r16, 0x20	; 32
    1952:	10 e0       	ldi	r17, 0x00	; 0
    1954:	e9 81       	ldd	r30, Y+1	; 0x01
    1956:	fa 81       	ldd	r31, Y+2	; 0x02
    1958:	20 81       	ld	r18, Z
    195a:	31 81       	ldd	r19, Z+1	; 0x01
    195c:	42 81       	ldd	r20, Z+2	; 0x02
    195e:	53 81       	ldd	r21, Z+3	; 0x03
    1960:	80 e0       	ldi	r24, 0x00	; 0
    1962:	92 e1       	ldi	r25, 0x12	; 18
    1964:	aa e7       	ldi	r26, 0x7A	; 122
    1966:	b0 e0       	ldi	r27, 0x00	; 0
    1968:	bc 01       	movw	r22, r24
    196a:	cd 01       	movw	r24, r26
    196c:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <__udivmodsi4>
    1970:	da 01       	movw	r26, r20
    1972:	c9 01       	movw	r24, r18
    1974:	40 97       	sbiw	r24, 0x10	; 16
    1976:	a1 09       	sbc	r26, r1
    1978:	b1 09       	sbc	r27, r1
    197a:	b6 95       	lsr	r27
    197c:	a7 95       	ror	r26
    197e:	97 95       	ror	r25
    1980:	87 95       	ror	r24
    1982:	f8 01       	movw	r30, r16
    1984:	80 83       	st	Z, r24
	TWSR = 0x00;
    1986:	e1 e2       	ldi	r30, 0x21	; 33
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR =(TWAR & 0xFE)|((Config_Ptr->address)<<1); // my address
    198c:	a2 e2       	ldi	r26, 0x22	; 34
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	e2 e2       	ldi	r30, 0x22	; 34
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	28 2f       	mov	r18, r24
    1998:	2e 7f       	andi	r18, 0xFE	; 254
    199a:	e9 81       	ldd	r30, Y+1	; 0x01
    199c:	fa 81       	ldd	r31, Y+2	; 0x02
    199e:	84 81       	ldd	r24, Z+4	; 0x04
    19a0:	88 2f       	mov	r24, r24
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	88 0f       	add	r24, r24
    19a6:	99 1f       	adc	r25, r25
    19a8:	82 2b       	or	r24, r18
    19aa:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    19ac:	e6 e5       	ldi	r30, 0x56	; 86
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	84 e0       	ldi	r24, 0x04	; 4
    19b2:	80 83       	st	Z, r24
}
    19b4:	0f 90       	pop	r0
    19b6:	0f 90       	pop	r0
    19b8:	cf 91       	pop	r28
    19ba:	df 91       	pop	r29
    19bc:	1f 91       	pop	r17
    19be:	0f 91       	pop	r16
    19c0:	08 95       	ret

000019c2 <TWI_start>:

void TWI_start(void)
{
    19c2:	df 93       	push	r29
    19c4:	cf 93       	push	r28
    19c6:	cd b7       	in	r28, 0x3d	; 61
    19c8:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    19ca:	e6 e5       	ldi	r30, 0x56	; 86
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	84 ea       	ldi	r24, 0xA4	; 164
    19d0:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    19d2:	e6 e5       	ldi	r30, 0x56	; 86
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	80 81       	ld	r24, Z
    19d8:	88 23       	and	r24, r24
    19da:	dc f7       	brge	.-10     	; 0x19d2 <TWI_start+0x10>
}
    19dc:	cf 91       	pop	r28
    19de:	df 91       	pop	r29
    19e0:	08 95       	ret

000019e2 <TWI_stop>:

void TWI_stop(void)
{
    19e2:	df 93       	push	r29
    19e4:	cf 93       	push	r28
    19e6:	cd b7       	in	r28, 0x3d	; 61
    19e8:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    19ea:	e6 e5       	ldi	r30, 0x56	; 86
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	84 e9       	ldi	r24, 0x94	; 148
    19f0:	80 83       	st	Z, r24
}
    19f2:	cf 91       	pop	r28
    19f4:	df 91       	pop	r29
    19f6:	08 95       	ret

000019f8 <TWI_write>:

void TWI_write(uint8 data)
{
    19f8:	df 93       	push	r29
    19fa:	cf 93       	push	r28
    19fc:	0f 92       	push	r0
    19fe:	cd b7       	in	r28, 0x3d	; 61
    1a00:	de b7       	in	r29, 0x3e	; 62
    1a02:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1a04:	e3 e2       	ldi	r30, 0x23	; 35
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	89 81       	ldd	r24, Y+1	; 0x01
    1a0a:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    1a0c:	e6 e5       	ldi	r30, 0x56	; 86
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	84 e8       	ldi	r24, 0x84	; 132
    1a12:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1a14:	e6 e5       	ldi	r30, 0x56	; 86
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	80 81       	ld	r24, Z
    1a1a:	88 23       	and	r24, r24
    1a1c:	dc f7       	brge	.-10     	; 0x1a14 <TWI_write+0x1c>
}
    1a1e:	0f 90       	pop	r0
    1a20:	cf 91       	pop	r28
    1a22:	df 91       	pop	r29
    1a24:	08 95       	ret

00001a26 <TWI_readWithACK>:

uint8 TWI_readWithACK(void)
{
    1a26:	df 93       	push	r29
    1a28:	cf 93       	push	r28
    1a2a:	cd b7       	in	r28, 0x3d	; 61
    1a2c:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1a2e:	e6 e5       	ldi	r30, 0x56	; 86
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	84 ec       	ldi	r24, 0xC4	; 196
    1a34:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1a36:	e6 e5       	ldi	r30, 0x56	; 86
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	80 81       	ld	r24, Z
    1a3c:	88 23       	and	r24, r24
    1a3e:	dc f7       	brge	.-10     	; 0x1a36 <TWI_readWithACK+0x10>
    /* Read Data */
    return TWDR;
    1a40:	e3 e2       	ldi	r30, 0x23	; 35
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	80 81       	ld	r24, Z
}
    1a46:	cf 91       	pop	r28
    1a48:	df 91       	pop	r29
    1a4a:	08 95       	ret

00001a4c <TWI_readWithNACK>:

uint8 TWI_readWithNACK(void)
{
    1a4c:	df 93       	push	r29
    1a4e:	cf 93       	push	r28
    1a50:	cd b7       	in	r28, 0x3d	; 61
    1a52:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1a54:	e6 e5       	ldi	r30, 0x56	; 86
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	84 e8       	ldi	r24, 0x84	; 132
    1a5a:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1a5c:	e6 e5       	ldi	r30, 0x56	; 86
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	88 23       	and	r24, r24
    1a64:	dc f7       	brge	.-10     	; 0x1a5c <TWI_readWithNACK+0x10>
    /* Read Data */
    return TWDR;
    1a66:	e3 e2       	ldi	r30, 0x23	; 35
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	80 81       	ld	r24, Z
}
    1a6c:	cf 91       	pop	r28
    1a6e:	df 91       	pop	r29
    1a70:	08 95       	ret

00001a72 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1a72:	df 93       	push	r29
    1a74:	cf 93       	push	r28
    1a76:	0f 92       	push	r0
    1a78:	cd b7       	in	r28, 0x3d	; 61
    1a7a:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    1a7c:	e1 e2       	ldi	r30, 0x21	; 33
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	88 7f       	andi	r24, 0xF8	; 248
    1a84:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1a86:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a88:	0f 90       	pop	r0
    1a8a:	cf 91       	pop	r28
    1a8c:	df 91       	pop	r29
    1a8e:	08 95       	ret

00001a90 <__vector_9>:
static volatile void (*g_callBackPtrOvf)(void) = NULL_PTR;
static volatile void (*g_callBackPtrCtc)(void) = NULL_PTR;

/* Interrupt Service Routine for timer0 normal mode */
ISR(TIMER0_OVF_vect)
{
    1a90:	1f 92       	push	r1
    1a92:	0f 92       	push	r0
    1a94:	0f b6       	in	r0, 0x3f	; 63
    1a96:	0f 92       	push	r0
    1a98:	11 24       	eor	r1, r1
    1a9a:	2f 93       	push	r18
    1a9c:	3f 93       	push	r19
    1a9e:	4f 93       	push	r20
    1aa0:	5f 93       	push	r21
    1aa2:	6f 93       	push	r22
    1aa4:	7f 93       	push	r23
    1aa6:	8f 93       	push	r24
    1aa8:	9f 93       	push	r25
    1aaa:	af 93       	push	r26
    1aac:	bf 93       	push	r27
    1aae:	ef 93       	push	r30
    1ab0:	ff 93       	push	r31
    1ab2:	df 93       	push	r29
    1ab4:	cf 93       	push	r28
    1ab6:	cd b7       	in	r28, 0x3d	; 61
    1ab8:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrOvf != NULL_PTR)
    1aba:	80 91 78 00 	lds	r24, 0x0078
    1abe:	90 91 79 00 	lds	r25, 0x0079
    1ac2:	00 97       	sbiw	r24, 0x00	; 0
    1ac4:	29 f0       	breq	.+10     	; 0x1ad0 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtrOvf)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1ac6:	e0 91 78 00 	lds	r30, 0x0078
    1aca:	f0 91 79 00 	lds	r31, 0x0079
    1ace:	09 95       	icall
	if (g_ovfTick  == 7813)
	{
		g_ovfTick=0 ;
		g_ovfSec =1 ;
	}*/
}
    1ad0:	cf 91       	pop	r28
    1ad2:	df 91       	pop	r29
    1ad4:	ff 91       	pop	r31
    1ad6:	ef 91       	pop	r30
    1ad8:	bf 91       	pop	r27
    1ada:	af 91       	pop	r26
    1adc:	9f 91       	pop	r25
    1ade:	8f 91       	pop	r24
    1ae0:	7f 91       	pop	r23
    1ae2:	6f 91       	pop	r22
    1ae4:	5f 91       	pop	r21
    1ae6:	4f 91       	pop	r20
    1ae8:	3f 91       	pop	r19
    1aea:	2f 91       	pop	r18
    1aec:	0f 90       	pop	r0
    1aee:	0f be       	out	0x3f, r0	; 63
    1af0:	0f 90       	pop	r0
    1af2:	1f 90       	pop	r1
    1af4:	18 95       	reti

00001af6 <__vector_19>:
/* Interrupt Service Routine for timer0 compare mode */
ISR(TIMER0_COMP_vect)
{
    1af6:	1f 92       	push	r1
    1af8:	0f 92       	push	r0
    1afa:	0f b6       	in	r0, 0x3f	; 63
    1afc:	0f 92       	push	r0
    1afe:	11 24       	eor	r1, r1
    1b00:	2f 93       	push	r18
    1b02:	3f 93       	push	r19
    1b04:	4f 93       	push	r20
    1b06:	5f 93       	push	r21
    1b08:	6f 93       	push	r22
    1b0a:	7f 93       	push	r23
    1b0c:	8f 93       	push	r24
    1b0e:	9f 93       	push	r25
    1b10:	af 93       	push	r26
    1b12:	bf 93       	push	r27
    1b14:	ef 93       	push	r30
    1b16:	ff 93       	push	r31
    1b18:	df 93       	push	r29
    1b1a:	cf 93       	push	r28
    1b1c:	cd b7       	in	r28, 0x3d	; 61
    1b1e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrCtc != NULL_PTR)
    1b20:	80 91 7a 00 	lds	r24, 0x007A
    1b24:	90 91 7b 00 	lds	r25, 0x007B
    1b28:	00 97       	sbiw	r24, 0x00	; 0
    1b2a:	29 f0       	breq	.+10     	; 0x1b36 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtrCtc)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1b2c:	e0 91 7a 00 	lds	r30, 0x007A
    1b30:	f0 91 7b 00 	lds	r31, 0x007B
    1b34:	09 95       	icall
	if (g_ctcTick  == 7813)
		{
		    g_ctcTick =0 ;
		    g_ctcSec  =1 ;
		}*/
}
    1b36:	cf 91       	pop	r28
    1b38:	df 91       	pop	r29
    1b3a:	ff 91       	pop	r31
    1b3c:	ef 91       	pop	r30
    1b3e:	bf 91       	pop	r27
    1b40:	af 91       	pop	r26
    1b42:	9f 91       	pop	r25
    1b44:	8f 91       	pop	r24
    1b46:	7f 91       	pop	r23
    1b48:	6f 91       	pop	r22
    1b4a:	5f 91       	pop	r21
    1b4c:	4f 91       	pop	r20
    1b4e:	3f 91       	pop	r19
    1b50:	2f 91       	pop	r18
    1b52:	0f 90       	pop	r0
    1b54:	0f be       	out	0x3f, r0	; 63
    1b56:	0f 90       	pop	r0
    1b58:	1f 90       	pop	r1
    1b5a:	18 95       	reti

00001b5c <timer_init>:
void timer_init (const Timer_ConfigType * Config_Ptr)
{
    1b5c:	df 93       	push	r29
    1b5e:	cf 93       	push	r28
    1b60:	00 d0       	rcall	.+0      	; 0x1b62 <timer_init+0x6>
    1b62:	cd b7       	in	r28, 0x3d	; 61
    1b64:	de b7       	in	r29, 0x3e	; 62
    1b66:	9a 83       	std	Y+2, r25	; 0x02
    1b68:	89 83       	std	Y+1, r24	; 0x01
	if (Config_Ptr->mode == NORMAL_MODE)
    1b6a:	e9 81       	ldd	r30, Y+1	; 0x01
    1b6c:	fa 81       	ldd	r31, Y+2	; 0x02
    1b6e:	80 81       	ld	r24, Z
    1b70:	88 23       	and	r24, r24
    1b72:	e9 f4       	brne	.+58     	; 0x1bae <timer_init+0x52>
	{
		TCNT0 = Config_Ptr->initValue ;//Set Timer initial value
    1b74:	a2 e5       	ldi	r26, 0x52	; 82
    1b76:	b0 e0       	ldi	r27, 0x00	; 0
    1b78:	e9 81       	ldd	r30, Y+1	; 0x01
    1b7a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b7c:	81 81       	ldd	r24, Z+1	; 0x01
    1b7e:	8c 93       	st	X, r24
		TIMSK |= (1<<TOIE0);          // Enable Timer0 Overflow Interrupt
    1b80:	a9 e5       	ldi	r26, 0x59	; 89
    1b82:	b0 e0       	ldi	r27, 0x00	; 0
    1b84:	e9 e5       	ldi	r30, 0x59	; 89
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	80 81       	ld	r24, Z
    1b8a:	81 60       	ori	r24, 0x01	; 1
    1b8c:	8c 93       	st	X, r24
		 * 1. Non PWM mode FOC0=1
		 * 2. Normal Mode WGM01=0 & WGM00=0
		 * 3. Normal Mode COM00=0 & COM01=0
		 * 4. clock
		 */
		TCCR0 = (1<<FOC0) ;
    1b8e:	e3 e5       	ldi	r30, 0x53	; 83
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 e8       	ldi	r24, 0x80	; 128
    1b94:	80 83       	st	Z, r24
		TCCR0 = (TCCR0 & 0xF8)|(Config_Ptr->Prescaler);
    1b96:	a3 e5       	ldi	r26, 0x53	; 83
    1b98:	b0 e0       	ldi	r27, 0x00	; 0
    1b9a:	e3 e5       	ldi	r30, 0x53	; 83
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	80 81       	ld	r24, Z
    1ba0:	98 2f       	mov	r25, r24
    1ba2:	98 7f       	andi	r25, 0xF8	; 248
    1ba4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ba6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ba8:	82 81       	ldd	r24, Z+2	; 0x02
    1baa:	89 2b       	or	r24, r25
    1bac:	8c 93       	st	X, r24

	}
	if(Config_Ptr->mode == COMPARE_MODE)
    1bae:	e9 81       	ldd	r30, Y+1	; 0x01
    1bb0:	fa 81       	ldd	r31, Y+2	; 0x02
    1bb2:	80 81       	ld	r24, Z
    1bb4:	81 30       	cpi	r24, 0x01	; 1
    1bb6:	19 f5       	brne	.+70     	; 0x1bfe <timer_init+0xa2>
	{
		TCNT0 = Config_Ptr->initValue;    // Set Timer initial value
    1bb8:	a2 e5       	ldi	r26, 0x52	; 82
    1bba:	b0 e0       	ldi	r27, 0x00	; 0
    1bbc:	e9 81       	ldd	r30, Y+1	; 0x01
    1bbe:	fa 81       	ldd	r31, Y+2	; 0x02
    1bc0:	81 81       	ldd	r24, Z+1	; 0x01
    1bc2:	8c 93       	st	X, r24
		OCR0  = Config_Ptr->compare;     // Set Compare Value
    1bc4:	ac e5       	ldi	r26, 0x5C	; 92
    1bc6:	b0 e0       	ldi	r27, 0x00	; 0
    1bc8:	e9 81       	ldd	r30, Y+1	; 0x01
    1bca:	fa 81       	ldd	r31, Y+2	; 0x02
    1bcc:	83 81       	ldd	r24, Z+3	; 0x03
    1bce:	8c 93       	st	X, r24
		TIMSK |= (1<<OCIE0);            // Enable Timer0 Compare Interrupt
    1bd0:	a9 e5       	ldi	r26, 0x59	; 89
    1bd2:	b0 e0       	ldi	r27, 0x00	; 0
    1bd4:	e9 e5       	ldi	r30, 0x59	; 89
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	80 81       	ld	r24, Z
    1bda:	82 60       	ori	r24, 0x02	; 2
    1bdc:	8c 93       	st	X, r24
		 * 1. Non PWM mode FOC0=1
		 * 2. CTC Mode WGM01=1 & WGM00=0
		 * 3. No need for OC0 in this example so COM00=0 & COM01=0
		 * 4. clock
		 */
		TCCR0 = (1<<FOC0) | (1<<WGM01);
    1bde:	e3 e5       	ldi	r30, 0x53	; 83
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	88 e8       	ldi	r24, 0x88	; 136
    1be4:	80 83       	st	Z, r24
		TCCR0 =(TCCR0 & 0xF8)|(Config_Ptr->Prescaler);
    1be6:	a3 e5       	ldi	r26, 0x53	; 83
    1be8:	b0 e0       	ldi	r27, 0x00	; 0
    1bea:	e3 e5       	ldi	r30, 0x53	; 83
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	80 81       	ld	r24, Z
    1bf0:	98 2f       	mov	r25, r24
    1bf2:	98 7f       	andi	r25, 0xF8	; 248
    1bf4:	e9 81       	ldd	r30, Y+1	; 0x01
    1bf6:	fa 81       	ldd	r31, Y+2	; 0x02
    1bf8:	82 81       	ldd	r24, Z+2	; 0x02
    1bfa:	89 2b       	or	r24, r25
    1bfc:	8c 93       	st	X, r24
	}
}
    1bfe:	0f 90       	pop	r0
    1c00:	0f 90       	pop	r0
    1c02:	cf 91       	pop	r28
    1c04:	df 91       	pop	r29
    1c06:	08 95       	ret

00001c08 <Ovf_setCallBack>:
/* Description: Function to set the Call Back function address.
*/
void Ovf_setCallBack(void(*a_ptr)(void))
{
    1c08:	df 93       	push	r29
    1c0a:	cf 93       	push	r28
    1c0c:	00 d0       	rcall	.+0      	; 0x1c0e <Ovf_setCallBack+0x6>
    1c0e:	cd b7       	in	r28, 0x3d	; 61
    1c10:	de b7       	in	r29, 0x3e	; 62
    1c12:	9a 83       	std	Y+2, r25	; 0x02
    1c14:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtrOvf = a_ptr;
    1c16:	89 81       	ldd	r24, Y+1	; 0x01
    1c18:	9a 81       	ldd	r25, Y+2	; 0x02
    1c1a:	90 93 79 00 	sts	0x0079, r25
    1c1e:	80 93 78 00 	sts	0x0078, r24
}
    1c22:	0f 90       	pop	r0
    1c24:	0f 90       	pop	r0
    1c26:	cf 91       	pop	r28
    1c28:	df 91       	pop	r29
    1c2a:	08 95       	ret

00001c2c <Ctc_setCallBack>:
/* Description: Function to set the Call Back function address.
*/
void Ctc_setCallBack(void(*a_ptr)(void))
{
    1c2c:	df 93       	push	r29
    1c2e:	cf 93       	push	r28
    1c30:	00 d0       	rcall	.+0      	; 0x1c32 <Ctc_setCallBack+0x6>
    1c32:	cd b7       	in	r28, 0x3d	; 61
    1c34:	de b7       	in	r29, 0x3e	; 62
    1c36:	9a 83       	std	Y+2, r25	; 0x02
    1c38:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtrCtc = a_ptr;
    1c3a:	89 81       	ldd	r24, Y+1	; 0x01
    1c3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c3e:	90 93 7b 00 	sts	0x007B, r25
    1c42:	80 93 7a 00 	sts	0x007A, r24
}
    1c46:	0f 90       	pop	r0
    1c48:	0f 90       	pop	r0
    1c4a:	cf 91       	pop	r28
    1c4c:	df 91       	pop	r29
    1c4e:	08 95       	ret

00001c50 <UART_init>:
#include "uart_driver.h"

//#define BAUD_PRESCALE (((F_CPU / (USART_BAUDRATE * 8UL))) - 1)

void UART_init(const Uart_ConfigType * Config_Ptr)
{
    1c50:	df 93       	push	r29
    1c52:	cf 93       	push	r28
    1c54:	00 d0       	rcall	.+0      	; 0x1c56 <UART_init+0x6>
    1c56:	00 d0       	rcall	.+0      	; 0x1c58 <UART_init+0x8>
    1c58:	00 d0       	rcall	.+0      	; 0x1c5a <UART_init+0xa>
    1c5a:	cd b7       	in	r28, 0x3d	; 61
    1c5c:	de b7       	in	r29, 0x3e	; 62
    1c5e:	9e 83       	std	Y+6, r25	; 0x06
    1c60:	8d 83       	std	Y+5, r24	; 0x05
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    1c62:	eb e2       	ldi	r30, 0x2B	; 43
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	82 e0       	ldi	r24, 0x02	; 2
    1c68:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2  For data mode
	 * RXB8 & TXB8  used for 9-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    1c6a:	ea e2       	ldi	r30, 0x2A	; 42
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	88 e1       	ldi	r24, 0x18	; 24
    1c70:	80 83       	st	Z, r24
	UCSRB = (UCSRB & 0xFB)|(Config_Ptr->bits);
    1c72:	aa e2       	ldi	r26, 0x2A	; 42
    1c74:	b0 e0       	ldi	r27, 0x00	; 0
    1c76:	ea e2       	ldi	r30, 0x2A	; 42
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	98 2f       	mov	r25, r24
    1c7e:	9b 7f       	andi	r25, 0xFB	; 251
    1c80:	ed 81       	ldd	r30, Y+5	; 0x05
    1c82:	fe 81       	ldd	r31, Y+6	; 0x06
    1c84:	80 81       	ld	r24, Z
    1c86:	89 2b       	or	r24, r25
    1c88:	8c 93       	st	X, r24
	 * UPM1:0  for parity bit
	 * USBS    for stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);
    1c8a:	e0 e4       	ldi	r30, 0x40	; 64
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	86 e8       	ldi	r24, 0x86	; 134
    1c90:	80 83       	st	Z, r24
	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr->parity)<<4);
    1c92:	a0 e4       	ldi	r26, 0x40	; 64
    1c94:	b0 e0       	ldi	r27, 0x00	; 0
    1c96:	e0 e4       	ldi	r30, 0x40	; 64
    1c98:	f0 e0       	ldi	r31, 0x00	; 0
    1c9a:	80 81       	ld	r24, Z
    1c9c:	28 2f       	mov	r18, r24
    1c9e:	2f 7c       	andi	r18, 0xCF	; 207
    1ca0:	ed 81       	ldd	r30, Y+5	; 0x05
    1ca2:	fe 81       	ldd	r31, Y+6	; 0x06
    1ca4:	81 81       	ldd	r24, Z+1	; 0x01
    1ca6:	88 2f       	mov	r24, r24
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	82 95       	swap	r24
    1cac:	92 95       	swap	r25
    1cae:	90 7f       	andi	r25, 0xF0	; 240
    1cb0:	98 27       	eor	r25, r24
    1cb2:	80 7f       	andi	r24, 0xF0	; 240
    1cb4:	98 27       	eor	r25, r24
    1cb6:	82 2b       	or	r24, r18
    1cb8:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr->stop)<<3);
    1cba:	a0 e4       	ldi	r26, 0x40	; 64
    1cbc:	b0 e0       	ldi	r27, 0x00	; 0
    1cbe:	e0 e4       	ldi	r30, 0x40	; 64
    1cc0:	f0 e0       	ldi	r31, 0x00	; 0
    1cc2:	80 81       	ld	r24, Z
    1cc4:	28 2f       	mov	r18, r24
    1cc6:	27 7f       	andi	r18, 0xF7	; 247
    1cc8:	ed 81       	ldd	r30, Y+5	; 0x05
    1cca:	fe 81       	ldd	r31, Y+6	; 0x06
    1ccc:	82 81       	ldd	r24, Z+2	; 0x02
    1cce:	88 2f       	mov	r24, r24
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	88 0f       	add	r24, r24
    1cd4:	99 1f       	adc	r25, r25
    1cd6:	88 0f       	add	r24, r24
    1cd8:	99 1f       	adc	r25, r25
    1cda:	88 0f       	add	r24, r24
    1cdc:	99 1f       	adc	r25, r25
    1cde:	82 2b       	or	r24, r18
    1ce0:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9) | ((Config_Ptr->bits)<<1);
    1ce2:	a0 e4       	ldi	r26, 0x40	; 64
    1ce4:	b0 e0       	ldi	r27, 0x00	; 0
    1ce6:	e0 e4       	ldi	r30, 0x40	; 64
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	80 81       	ld	r24, Z
    1cec:	28 2f       	mov	r18, r24
    1cee:	29 7f       	andi	r18, 0xF9	; 249
    1cf0:	ed 81       	ldd	r30, Y+5	; 0x05
    1cf2:	fe 81       	ldd	r31, Y+6	; 0x06
    1cf4:	80 81       	ld	r24, Z
    1cf6:	88 2f       	mov	r24, r24
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	88 0f       	add	r24, r24
    1cfc:	99 1f       	adc	r25, r25
    1cfe:	82 2b       	or	r24, r18
    1d00:	8c 93       	st	X, r24

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	unsigned long int baudPrescale;
	baudPrescale = (((F_CPU / ((Config_Ptr->baud)* 8UL))) - 1) ;
    1d02:	ed 81       	ldd	r30, Y+5	; 0x05
    1d04:	fe 81       	ldd	r31, Y+6	; 0x06
    1d06:	83 81       	ldd	r24, Z+3	; 0x03
    1d08:	94 81       	ldd	r25, Z+4	; 0x04
    1d0a:	a5 81       	ldd	r26, Z+5	; 0x05
    1d0c:	b6 81       	ldd	r27, Z+6	; 0x06
    1d0e:	88 0f       	add	r24, r24
    1d10:	99 1f       	adc	r25, r25
    1d12:	aa 1f       	adc	r26, r26
    1d14:	bb 1f       	adc	r27, r27
    1d16:	88 0f       	add	r24, r24
    1d18:	99 1f       	adc	r25, r25
    1d1a:	aa 1f       	adc	r26, r26
    1d1c:	bb 1f       	adc	r27, r27
    1d1e:	88 0f       	add	r24, r24
    1d20:	99 1f       	adc	r25, r25
    1d22:	aa 1f       	adc	r26, r26
    1d24:	bb 1f       	adc	r27, r27
    1d26:	9c 01       	movw	r18, r24
    1d28:	ad 01       	movw	r20, r26
    1d2a:	80 e0       	ldi	r24, 0x00	; 0
    1d2c:	92 e1       	ldi	r25, 0x12	; 18
    1d2e:	aa e7       	ldi	r26, 0x7A	; 122
    1d30:	b0 e0       	ldi	r27, 0x00	; 0
    1d32:	bc 01       	movw	r22, r24
    1d34:	cd 01       	movw	r24, r26
    1d36:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <__udivmodsi4>
    1d3a:	da 01       	movw	r26, r20
    1d3c:	c9 01       	movw	r24, r18
    1d3e:	01 97       	sbiw	r24, 0x01	; 1
    1d40:	a1 09       	sbc	r26, r1
    1d42:	b1 09       	sbc	r27, r1
    1d44:	89 83       	std	Y+1, r24	; 0x01
    1d46:	9a 83       	std	Y+2, r25	; 0x02
    1d48:	ab 83       	std	Y+3, r26	; 0x03
    1d4a:	bc 83       	std	Y+4, r27	; 0x04
	UBRRH = (baudPrescale >> 8);
    1d4c:	e0 e4       	ldi	r30, 0x40	; 64
    1d4e:	f0 e0       	ldi	r31, 0x00	; 0
    1d50:	89 81       	ldd	r24, Y+1	; 0x01
    1d52:	9a 81       	ldd	r25, Y+2	; 0x02
    1d54:	ab 81       	ldd	r26, Y+3	; 0x03
    1d56:	bc 81       	ldd	r27, Y+4	; 0x04
    1d58:	89 2f       	mov	r24, r25
    1d5a:	9a 2f       	mov	r25, r26
    1d5c:	ab 2f       	mov	r26, r27
    1d5e:	bb 27       	eor	r27, r27
    1d60:	80 83       	st	Z, r24
	UBRRL = baudPrescale;
    1d62:	e9 e2       	ldi	r30, 0x29	; 41
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	89 81       	ldd	r24, Y+1	; 0x01
    1d68:	80 83       	st	Z, r24
}
    1d6a:	26 96       	adiw	r28, 0x06	; 6
    1d6c:	0f b6       	in	r0, 0x3f	; 63
    1d6e:	f8 94       	cli
    1d70:	de bf       	out	0x3e, r29	; 62
    1d72:	0f be       	out	0x3f, r0	; 63
    1d74:	cd bf       	out	0x3d, r28	; 61
    1d76:	cf 91       	pop	r28
    1d78:	df 91       	pop	r29
    1d7a:	08 95       	ret

00001d7c <UART_sendByte>:

void UART_sendByte(const uint8 data)
{
    1d7c:	df 93       	push	r29
    1d7e:	cf 93       	push	r28
    1d80:	0f 92       	push	r0
    1d82:	cd b7       	in	r28, 0x3d	; 61
    1d84:	de b7       	in	r29, 0x3e	; 62
    1d86:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    1d88:	eb e2       	ldi	r30, 0x2B	; 43
    1d8a:	f0 e0       	ldi	r31, 0x00	; 0
    1d8c:	80 81       	ld	r24, Z
    1d8e:	88 2f       	mov	r24, r24
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	80 72       	andi	r24, 0x20	; 32
    1d94:	90 70       	andi	r25, 0x00	; 0
    1d96:	00 97       	sbiw	r24, 0x00	; 0
    1d98:	b9 f3       	breq	.-18     	; 0x1d88 <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now */
	UDR = data;
    1d9a:	ec e2       	ldi	r30, 0x2C	; 44
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	89 81       	ldd	r24, Y+1	; 0x01
    1da0:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    1da2:	0f 90       	pop	r0
    1da4:	cf 91       	pop	r28
    1da6:	df 91       	pop	r29
    1da8:	08 95       	ret

00001daa <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    1daa:	df 93       	push	r29
    1dac:	cf 93       	push	r28
    1dae:	cd b7       	in	r28, 0x3d	; 61
    1db0:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1db2:	eb e2       	ldi	r30, 0x2B	; 43
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	80 81       	ld	r24, Z
    1db8:	88 23       	and	r24, r24
    1dba:	dc f7       	brge	.-10     	; 0x1db2 <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag
	   will be cleared after read this data */
    return UDR;
    1dbc:	ec e2       	ldi	r30, 0x2C	; 44
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	80 81       	ld	r24, Z
}
    1dc2:	cf 91       	pop	r28
    1dc4:	df 91       	pop	r29
    1dc6:	08 95       	ret

00001dc8 <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    1dc8:	df 93       	push	r29
    1dca:	cf 93       	push	r28
    1dcc:	00 d0       	rcall	.+0      	; 0x1dce <UART_sendString+0x6>
    1dce:	0f 92       	push	r0
    1dd0:	cd b7       	in	r28, 0x3d	; 61
    1dd2:	de b7       	in	r29, 0x3e	; 62
    1dd4:	9b 83       	std	Y+3, r25	; 0x03
    1dd6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1dd8:	19 82       	std	Y+1, r1	; 0x01
    1dda:	0e c0       	rjmp	.+28     	; 0x1df8 <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    1ddc:	89 81       	ldd	r24, Y+1	; 0x01
    1dde:	28 2f       	mov	r18, r24
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	8a 81       	ldd	r24, Y+2	; 0x02
    1de4:	9b 81       	ldd	r25, Y+3	; 0x03
    1de6:	fc 01       	movw	r30, r24
    1de8:	e2 0f       	add	r30, r18
    1dea:	f3 1f       	adc	r31, r19
    1dec:	80 81       	ld	r24, Z
    1dee:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <UART_sendByte>
		i++;
    1df2:	89 81       	ldd	r24, Y+1	; 0x01
    1df4:	8f 5f       	subi	r24, 0xFF	; 255
    1df6:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1df8:	89 81       	ldd	r24, Y+1	; 0x01
    1dfa:	28 2f       	mov	r18, r24
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1e00:	9b 81       	ldd	r25, Y+3	; 0x03
    1e02:	fc 01       	movw	r30, r24
    1e04:	e2 0f       	add	r30, r18
    1e06:	f3 1f       	adc	r31, r19
    1e08:	80 81       	ld	r24, Z
    1e0a:	88 23       	and	r24, r24
    1e0c:	39 f7       	brne	.-50     	; 0x1ddc <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    1e0e:	0f 90       	pop	r0
    1e10:	0f 90       	pop	r0
    1e12:	0f 90       	pop	r0
    1e14:	cf 91       	pop	r28
    1e16:	df 91       	pop	r29
    1e18:	08 95       	ret

00001e1a <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    1e1a:	0f 93       	push	r16
    1e1c:	1f 93       	push	r17
    1e1e:	df 93       	push	r29
    1e20:	cf 93       	push	r28
    1e22:	00 d0       	rcall	.+0      	; 0x1e24 <UART_receiveString+0xa>
    1e24:	0f 92       	push	r0
    1e26:	cd b7       	in	r28, 0x3d	; 61
    1e28:	de b7       	in	r29, 0x3e	; 62
    1e2a:	9b 83       	std	Y+3, r25	; 0x03
    1e2c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1e2e:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    1e30:	89 81       	ldd	r24, Y+1	; 0x01
    1e32:	28 2f       	mov	r18, r24
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	8a 81       	ldd	r24, Y+2	; 0x02
    1e38:	9b 81       	ldd	r25, Y+3	; 0x03
    1e3a:	8c 01       	movw	r16, r24
    1e3c:	02 0f       	add	r16, r18
    1e3e:	13 1f       	adc	r17, r19
    1e40:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <UART_recieveByte>
    1e44:	f8 01       	movw	r30, r16
    1e46:	80 83       	st	Z, r24
    1e48:	0f c0       	rjmp	.+30     	; 0x1e68 <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    1e4a:	89 81       	ldd	r24, Y+1	; 0x01
    1e4c:	8f 5f       	subi	r24, 0xFF	; 255
    1e4e:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    1e50:	89 81       	ldd	r24, Y+1	; 0x01
    1e52:	28 2f       	mov	r18, r24
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	8a 81       	ldd	r24, Y+2	; 0x02
    1e58:	9b 81       	ldd	r25, Y+3	; 0x03
    1e5a:	8c 01       	movw	r16, r24
    1e5c:	02 0f       	add	r16, r18
    1e5e:	13 1f       	adc	r17, r19
    1e60:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <UART_recieveByte>
    1e64:	f8 01       	movw	r30, r16
    1e66:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    1e68:	89 81       	ldd	r24, Y+1	; 0x01
    1e6a:	28 2f       	mov	r18, r24
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e70:	9b 81       	ldd	r25, Y+3	; 0x03
    1e72:	fc 01       	movw	r30, r24
    1e74:	e2 0f       	add	r30, r18
    1e76:	f3 1f       	adc	r31, r19
    1e78:	80 81       	ld	r24, Z
    1e7a:	83 32       	cpi	r24, 0x23	; 35
    1e7c:	31 f7       	brne	.-52     	; 0x1e4a <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    1e7e:	89 81       	ldd	r24, Y+1	; 0x01
    1e80:	28 2f       	mov	r18, r24
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	8a 81       	ldd	r24, Y+2	; 0x02
    1e86:	9b 81       	ldd	r25, Y+3	; 0x03
    1e88:	fc 01       	movw	r30, r24
    1e8a:	e2 0f       	add	r30, r18
    1e8c:	f3 1f       	adc	r31, r19
    1e8e:	10 82       	st	Z, r1
}
    1e90:	0f 90       	pop	r0
    1e92:	0f 90       	pop	r0
    1e94:	0f 90       	pop	r0
    1e96:	cf 91       	pop	r28
    1e98:	df 91       	pop	r29
    1e9a:	1f 91       	pop	r17
    1e9c:	0f 91       	pop	r16
    1e9e:	08 95       	ret

00001ea0 <__udivmodsi4>:
    1ea0:	a1 e2       	ldi	r26, 0x21	; 33
    1ea2:	1a 2e       	mov	r1, r26
    1ea4:	aa 1b       	sub	r26, r26
    1ea6:	bb 1b       	sub	r27, r27
    1ea8:	fd 01       	movw	r30, r26
    1eaa:	0d c0       	rjmp	.+26     	; 0x1ec6 <__udivmodsi4_ep>

00001eac <__udivmodsi4_loop>:
    1eac:	aa 1f       	adc	r26, r26
    1eae:	bb 1f       	adc	r27, r27
    1eb0:	ee 1f       	adc	r30, r30
    1eb2:	ff 1f       	adc	r31, r31
    1eb4:	a2 17       	cp	r26, r18
    1eb6:	b3 07       	cpc	r27, r19
    1eb8:	e4 07       	cpc	r30, r20
    1eba:	f5 07       	cpc	r31, r21
    1ebc:	20 f0       	brcs	.+8      	; 0x1ec6 <__udivmodsi4_ep>
    1ebe:	a2 1b       	sub	r26, r18
    1ec0:	b3 0b       	sbc	r27, r19
    1ec2:	e4 0b       	sbc	r30, r20
    1ec4:	f5 0b       	sbc	r31, r21

00001ec6 <__udivmodsi4_ep>:
    1ec6:	66 1f       	adc	r22, r22
    1ec8:	77 1f       	adc	r23, r23
    1eca:	88 1f       	adc	r24, r24
    1ecc:	99 1f       	adc	r25, r25
    1ece:	1a 94       	dec	r1
    1ed0:	69 f7       	brne	.-38     	; 0x1eac <__udivmodsi4_loop>
    1ed2:	60 95       	com	r22
    1ed4:	70 95       	com	r23
    1ed6:	80 95       	com	r24
    1ed8:	90 95       	com	r25
    1eda:	9b 01       	movw	r18, r22
    1edc:	ac 01       	movw	r20, r24
    1ede:	bd 01       	movw	r22, r26
    1ee0:	cf 01       	movw	r24, r30
    1ee2:	08 95       	ret

00001ee4 <__prologue_saves__>:
    1ee4:	2f 92       	push	r2
    1ee6:	3f 92       	push	r3
    1ee8:	4f 92       	push	r4
    1eea:	5f 92       	push	r5
    1eec:	6f 92       	push	r6
    1eee:	7f 92       	push	r7
    1ef0:	8f 92       	push	r8
    1ef2:	9f 92       	push	r9
    1ef4:	af 92       	push	r10
    1ef6:	bf 92       	push	r11
    1ef8:	cf 92       	push	r12
    1efa:	df 92       	push	r13
    1efc:	ef 92       	push	r14
    1efe:	ff 92       	push	r15
    1f00:	0f 93       	push	r16
    1f02:	1f 93       	push	r17
    1f04:	cf 93       	push	r28
    1f06:	df 93       	push	r29
    1f08:	cd b7       	in	r28, 0x3d	; 61
    1f0a:	de b7       	in	r29, 0x3e	; 62
    1f0c:	ca 1b       	sub	r28, r26
    1f0e:	db 0b       	sbc	r29, r27
    1f10:	0f b6       	in	r0, 0x3f	; 63
    1f12:	f8 94       	cli
    1f14:	de bf       	out	0x3e, r29	; 62
    1f16:	0f be       	out	0x3f, r0	; 63
    1f18:	cd bf       	out	0x3d, r28	; 61
    1f1a:	09 94       	ijmp

00001f1c <__epilogue_restores__>:
    1f1c:	2a 88       	ldd	r2, Y+18	; 0x12
    1f1e:	39 88       	ldd	r3, Y+17	; 0x11
    1f20:	48 88       	ldd	r4, Y+16	; 0x10
    1f22:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f24:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f26:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f28:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f2a:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f2c:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f2e:	b9 84       	ldd	r11, Y+9	; 0x09
    1f30:	c8 84       	ldd	r12, Y+8	; 0x08
    1f32:	df 80       	ldd	r13, Y+7	; 0x07
    1f34:	ee 80       	ldd	r14, Y+6	; 0x06
    1f36:	fd 80       	ldd	r15, Y+5	; 0x05
    1f38:	0c 81       	ldd	r16, Y+4	; 0x04
    1f3a:	1b 81       	ldd	r17, Y+3	; 0x03
    1f3c:	aa 81       	ldd	r26, Y+2	; 0x02
    1f3e:	b9 81       	ldd	r27, Y+1	; 0x01
    1f40:	ce 0f       	add	r28, r30
    1f42:	d1 1d       	adc	r29, r1
    1f44:	0f b6       	in	r0, 0x3f	; 63
    1f46:	f8 94       	cli
    1f48:	de bf       	out	0x3e, r29	; 62
    1f4a:	0f be       	out	0x3f, r0	; 63
    1f4c:	cd bf       	out	0x3d, r28	; 61
    1f4e:	ed 01       	movw	r28, r26
    1f50:	08 95       	ret

00001f52 <_exit>:
    1f52:	f8 94       	cli

00001f54 <__stop_program>:
    1f54:	ff cf       	rjmp	.-2      	; 0x1f54 <__stop_program>
